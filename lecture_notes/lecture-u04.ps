%!PS-Adobe-3.0
%%Creator: groff version 1.19.1
%%CreationDate: Thu Oct 11 22:40:45 2012
%%DocumentNeededResources: font Times-Roman
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Courier
%%DocumentSuppliedResources: file parsetree-wrong.eps
%%+ file typesast.eps
%%+ file scopes.eps
%%+ file astexpr.eps
%%+ procset grops 1.19 1
%%Pages: 35
%%PageOrder: Ascend
%%DocumentMedia: Default 612 792 0 () ()
%%Orientation: Portrait
%%EndComments
%%BeginDefaults
%%PageMedia: Default
%%EndDefaults
%%BeginProlog
%%BeginResource: procset grops 1.19 1
%!PS-Adobe-3.0 Resource-ProcSet
/setpacking where{
pop
currentpacking
true setpacking
}if
/grops 120 dict dup begin
/SC 32 def
/A/show load def
/B{0 SC 3 -1 roll widthshow}bind def
/C{0 exch ashow}bind def
/D{0 exch 0 SC 5 2 roll awidthshow}bind def
/E{0 rmoveto show}bind def
/F{0 rmoveto 0 SC 3 -1 roll widthshow}bind def
/G{0 rmoveto 0 exch ashow}bind def
/H{0 rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/I{0 exch rmoveto show}bind def
/J{0 exch rmoveto 0 SC 3 -1 roll widthshow}bind def
/K{0 exch rmoveto 0 exch ashow}bind def
/L{0 exch rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/M{rmoveto show}bind def
/N{rmoveto 0 SC 3 -1 roll widthshow}bind def
/O{rmoveto 0 exch ashow}bind def
/P{rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/Q{moveto show}bind def
/R{moveto 0 SC 3 -1 roll widthshow}bind def
/S{moveto 0 exch ashow}bind def
/T{moveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/SF{
findfont exch
[exch dup 0 exch 0 exch neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/MF{
findfont
[5 2 roll
0 3 1 roll
neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/level0 0 def
/RES 0 def
/PL 0 def
/LS 0 def
/MANUAL{
statusdict begin/manualfeed true store end
}bind def
/PLG{
gsave newpath clippath pathbbox grestore
exch pop add exch pop
}bind def
/BP{
/level0 save def
1 setlinecap
1 setlinejoin
72 RES div dup scale
LS{
90 rotate
}{
0 PL translate
}ifelse
1 -1 scale
}bind def
/EP{
level0 restore
showpage
}bind def
/DA{
newpath arcn stroke
}bind def
/SN{
transform
.25 sub exch .25 sub exch
round .25 add exch round .25 add exch
itransform
}bind def
/DL{
SN
moveto
SN
lineto stroke
}bind def
/DC{
newpath 0 360 arc closepath
}bind def
/TM matrix def
/DE{
TM currentmatrix pop
translate scale newpath 0 0 .5 0 360 arc closepath
TM setmatrix
}bind def
/RC/rcurveto load def
/RL/rlineto load def
/ST/stroke load def
/MT/moveto load def
/CL/closepath load def
/Fr{
setrgbcolor fill
}bind def
/setcmykcolor where{
pop
/Fk{
setcmykcolor fill
}bind def
}if
/Fg{
setgray fill
}bind def
/FL/fill load def
/LW/setlinewidth load def
/Cr/setrgbcolor load def
/setcmykcolor where{
pop
/Ck/setcmykcolor load def
}if
/Cg/setgray load def
/RE{
findfont
dup maxlength 1 index/FontName known not{1 add}if dict begin
{
1 index/FID ne{def}{pop pop}ifelse
}forall
/Encoding exch def
dup/FontName exch def
currentdict end definefont pop
}bind def
/DEFS 0 def
/EBEGIN{
moveto
DEFS begin
}bind def
/EEND/end load def
/CNT 0 def
/level1 0 def
/PBEGIN{
/level1 save def
translate
div 3 1 roll div exch scale
neg exch neg exch translate
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[]0 setdash
/setstrokeadjust where{
pop
false setstrokeadjust
}if
/setoverprint where{
pop
false setoverprint
}if
newpath
/CNT countdictstack def
userdict begin
/showpage{}def
/setpagedevice{}def
}bind def
/PEND{
clear
countdictstack CNT sub{end}repeat
level1 restore
}bind def
end def
/setpacking where{
pop
setpacking
}if
%%EndResource
%%EndProlog
%%BeginSetup
%%BeginFeature: *PageSize Default
<< /PageSize [ 612 792 ] /ImagingBBox null >> setpagedevice
%%EndFeature
%%IncludeResource: font Times-Roman
%%IncludeResource: font Times-Bold
%%IncludeResource: font Times-Italic
%%IncludeResource: font Courier
grops begin/DEFS 1 dict def DEFS begin/u{.001 mul}bind def end/RES 72
def/PL 792 def/LS false def/ENC0[/asciicircum/asciitilde/Scaron/Zcaron
/scaron/zcaron/Ydieresis/trademark/quotesingle/Euro/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/space/exclam/quotedbl/numbersign/dollar/percent
/ampersand/quoteright/parenleft/parenright/asterisk/plus/comma/hyphen
/period/slash/zero/one/two/three/four/five/six/seven/eight/nine/colon
/semicolon/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M/N/O
/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash/bracketright/circumflex
/underscore/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y
/z/braceleft/bar/braceright/tilde/.notdef/quotesinglbase/guillemotleft
/guillemotright/bullet/florin/fraction/perthousand/dagger/daggerdbl
/endash/emdash/ff/fi/fl/ffi/ffl/dotlessi/dotlessj/grave/hungarumlaut
/dotaccent/breve/caron/ring/ogonek/quotedblleft/quotedblright/oe/lslash
/quotedblbase/OE/Lslash/.notdef/exclamdown/cent/sterling/currency/yen
/brokenbar/section/dieresis/copyright/ordfeminine/guilsinglleft
/logicalnot/minus/registered/macron/degree/plusminus/twosuperior
/threesuperior/acute/mu/paragraph/periodcentered/cedilla/onesuperior
/ordmasculine/guilsinglright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE
/Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex
/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis
/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn
/germandbls/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash
/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]def
/Courier@0 ENC0/Courier RE/Times-Italic@0 ENC0/Times-Italic RE
/Times-Bold@0 ENC0/Times-Bold RE/Times-Roman@0 ENC0/Times-Roman RE
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 122.742(ECE466:Compilers Unit)69.336 60 R(4/pg 1)
2.25 E(\2512012 Jef)126.405 E 2.25(fH)-.225 G(akner)-2.25 E/F1 13
/Times-Bold@0 SF(Semantic Analysis of the C language)166.404 120 Q/F2 13
/Times-Italic@0 SF 1.034(In this unit we be)105.336 156 R 1.033
(gin discussion of semantic analysis with an)-.52 F
(emphasis on the C langua)105.336 171 Q -.13(ge)-.13 G(.)-.065 E F1
(Compile-T)189.934 201 Q(ime vs Run-T)-.234 E(ime)-.234 E/F3 13
/Times-Roman@0 SF 2.217 -1.04(We c)33.336 237 T .137
(an speak of the compiler as e)1.04 F .137(xisting in tw)-.195 F 3.388
(ow)-.13 G .138(orlds: compile-time, when the compiler)-3.518 F 2.68
(is actually e)33.336 252 R -.195(xe)-.195 G 2.679
(cuting, and run-time, when the tar).195 F 2.679(get program will be e)
-.234 F -.195(xe)-.195 G 5.929(cuting. The).195 F .118(compiler perform\
s actions, creates data structures, etc. at compile time which result i\
n the)33.336 267 R 2.417(emission of code which, in turn, when e)33.336
282 R -.195(xe)-.195 G 2.417(cuted at run-time, creates and manipulates)
.195 F -.325(va)33.336 297 S(lues and tak).325 E
(es other actions speci\214ed in the original source code.)-.13 E 2.238
(In contrast, an interpreter e)33.336 318 R 2.239
(xists in only one time, because source code is acted upon)-.195 F
(immediately)33.336 333 Q 7.293(.W)-.845 G 4.043(ec)-8.333 G .792
(ould think of a compiler as an interpreter)-4.043 F 4.042(,t)-.52 G
.792(he actions of which are to)-4.042 F(emit the tar)33.336 348 Q
(get code \(e.g. assembly language on the tar)-.234 E(get machine\).)
-.234 E 5.236(Certain v)33.336 369 R 5.237
(alues can be computed at compile-time, such as the size of v)-.325 F
(ariables,)-.325 E -.195(ex)33.336 384 S 1.409(pressions in).195 F -.26
(vo)-.52 G 1.409(lving constants, etc.).26 F 1.409
(Others, such as the v)7.909 F 1.409(alue inside of a v)-.325 F 1.409
(ariable, are)-.325 F 2.361(indeterminate at compile-time.)33.336 399 R
-.195(Pa)8.861 G 2.361(rt of the optimizer').195 F 5.611(sj)-.715 G
2.362(ob is to trace out the \215o)-5.611 F 5.612(wo)-.325 G(f)-5.612 E
.173
(control and data through the program and attempt to predict, to the e)
33.336 414 R .172(xtent possible, useful)-.195 F(constraints on v)33.336
429 Q(alues which may lead to simpli\214cation or elimination of tar)
-.325 E(get code.)-.234 E F1(Syntax-Dir)188.673 459 Q(ected T)-.234 E
(ranslation)-.962 E F3 2.899(In the pre)33.336 495 R 2.899
(vious unit we ha)-.325 F 3.289 -.195(ve s)-.26 H 2.899
(een the use of embedded \(semantic\) actions within a).195 F 2.179
(yacc/bison grammar)33.336 510 R 5.428(,a)-.52 G 2.178
(nd the passing of synthesized and inherited attrib)-5.428 F 2.178
(utes along the)-.26 F -.325(va)33.336 525 S 1.83(lue stack.).325 F 1.83
(It is possible to use these tools to perform the translation from sour\
ce to)8.33 F(tar)33.336 540 Q 1.68
(get language in one pass, as the source language is being parsed.)-.234
F 1.679(This is kno)8.179 F 1.679(wn as)-.325 F F1(Syntax-Dir)33.336 555
Q 2.744(ected T)-.234 F(ranslation)-.962 E F3 9.244(.T)C 2.744(he e)
-9.244 F 2.744(xample belo)-.195 F 5.994(wc)-.325 G 2.745(ompiles e)
-5.994 F 2.745(xpressions to a simple)-.195 F(intermediate language in \
which there is an unbounded number of temporary re)33.336 570 Q
(gisters:)-.195 E 0 Cg EP
%%Page: 2 2
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 140.742(ECE466:Compilers Unit)33.336 60 R(4/pg 2)
2.25 E(\2512012 Jef)144.405 E 2.25(fH)-.225 G(akner)-2.25 E/F1 8
/Courier@0 SF 1.2(%debug)33.936 117 S 1.2(%error-verbose)33.936 129 S
1.2(%{)33.936 141 S 1.2(#define YYDEBUG 1)33.936 153 S 1.2
(#define YYSTYPE char *)33.936 165 S 1.2(int tmpcounter;)33.936 189 S
1.2(char *tmp\(\))33.936 213 S({)33.936 225 Q 1.2(char buf[256];)39.936
237 S 1.2(sprintf\(buf,"%%TMP%04d",++tmpcounter\);)81.936 249 S 1.2
(return strdup\(buf\);)81.936 261 S(})33.936 273 Q 1.2(%})33.936 297 S
1.2(%token NUM)33.936 309 S 1.2(%token NL)33.936 321 S 1.2
(%left '+' '-')33.936 333 S 1.2(%left '*' '/')33.936 345 S 1.2
(%nonassoc '\(')33.936 357 S 1.2(%%)33.936 369 S 1.2(start:)33.936 381 S
1.2(expr_line)81.936 393 S 1.2(|start expr_line)81.936 405 S(;)81.936
417 Q 1.2(expr_line:)33.936 441 S 1.2(expr NL)81.936 453 S 1.2(|NL)
81.936 465 S(;)81.936 477 Q 12 1.2(expr: NUM)33.936 501 T 1.2({$$=$1;})
78 G 25.2(|e)51.936 513 S 1.2(xpr '+' expr)-24 G 1.2
({printf\("\\t%s=ADD %s,%s\\n",$$=tmp\(\),$1,$3\);})18 G 25.2(|e)51.936
525 S 1.2(xpr '-' expr)-24 G 1.2
({printf\("\\t%s=SUB %s,%s\\n",$$=tmp\(\),$1,$3\);})18 G 25.2(|e)51.936
537 S 1.2(xpr '/' expr)-24 G 1.2
({printf\("\\t%s=DIV %s,%s\\n",$$=tmp\(\),$1,$3\);})18 G 25.2(|e)51.936
549 S 1.2(xpr '*' expr)-24 G 1.2
({printf\("\\t%s=MUL %s,%s\\n",$$=tmp\(\),$1,$3\);})18 G 25.2(|')51.936
561 S 1.2
(-' expr %prec '\(' {printf\("\\t%s=MUL %s,-1\\n",$$=tmp\(\),$2\);})-24
G 25.2(|')51.936 573 S 1.2(\(' expr '\)')-24 G 1.2({$$=$2;})24 G(;)
51.936 585 Q 1.2(%%)33.936 609 S 1.2(main\(\))33.936 621 S({)33.936 633
Q 1.2(yydebug=0;)81.936 645 S 1.2(yyparse\(\);)81.936 657 S(})33.936 669
Q 1.2(yyerror\(char *err\))33.936 693 S({)33.936 705 Q 1.2
(fprintf\(stderr,"syntax error:%s\\n",err\);)81.936 717 S(})33.936 729 Q
0 Cg EP
%%Page: 3 3
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 140.742(ECE466:Compilers Unit)33.336 60 R(4/pg 3)
2.25 E(\2512012 Jef)144.405 E 2.25(fH)-.225 G(akner)-2.25 E/F1 13
/Times-Roman@0 SF(The)33.336 120 Q/F2 13/Courier@0 SF -1.8($$)2.786 G F1
-.325(va)4.586 G .436(lue of each symbol is the temporary re).325 F .435
(gister in which its run-time v)-.195 F .435(alue will be)-.325 F 3.25
(found. E.g.)33.336 135 R/F3 8/Courier@0 SF 1.2(INPUT:)33.936 147 S 1.2
(3*4+10*5)33.936 159 S 1.2(OUTPUT:)33.936 171 S 1.2(%TMP0003=MUL 3,4)
81.936 183 S 1.2(%TMP0004=MUL 10,5)81.936 195 S 1.2
(%TMP0005=ADD %TMP0003,%TMP0004)81.936 207 S F1 2.201
(At one time, a one-pass compiler w)33.336 228 R 2.201(as e)-.13 F 2.202
(xtremely desirable, because memory and disk)-.195 F 5.65(space w)33.336
243 R 5.65(as limited.)-.13 F(Ho)12.149 E(we)-.325 E -.195(ve)-.325 G
6.689 -.52(r, w).195 H 5.649(riting a one-pass compiler).52 F 8.899(,u)
-.52 G 5.649(sing syntax-directed)-8.899 F .379
(translation, constrains us to follo)33.336 258 R .379(wing the e)-.325
F .379(xact parse tree that the syntax generates.)-.195 F(This)6.879 E
.583(becomes cumbersome as language comple)33.336 273 R .583(xity gro)
-.195 F .582(ws, because the structure of the source)-.325 F 2.551
(language grammar might not re\215ect well the order in which tar)33.336
288 R 2.551(get code needs to be)-.234 F(generated.)33.336 303 Q 8.115(\
In modern compilers, the embedded semantic actions create an intermedia\
te)33.336 324 R .377(representation \(IR\) in memory)33.336 339 R 3.627
(,w)-.845 G .377
(hich is then re-processed one or multiple times, re\214ning)-3.627 F
.179(and optimizing it, and \214nally transforming it into the tar)
33.336 354 R .179(get language.)-.234 F -1.04(We)6.679 G -.13('l)1.04 G
3.429(ld).13 G .179(iscuss IR in)-3.429 F .781(more detail in Unit 5.)
33.336 369 R .781(Not all of the IR corresponds to e)7.281 F -.195(xe)
-.195 G .781(cutable \(run-time\) constructs.).195 F .63
(The compiler may use the same techniques to b)33.336 384 R .629
(uild compile-time representations of data)-.26 F(types.)33.336 399 Q/F4
13/Times-Bold@0 SF(Abstract Syntax T)205.833 429 Q -.234(re)-.962 G(es)
.234 E F1(Man)33.336 465 Q 5.046(yc)-.195 G 1.796
(ompilers use a graphical form of representation kno)-5.046 F 1.796
(wn as an)-.325 F F4 1.797(Abstract Syntax)5.047 F -1.56 -.962(Tr e)
33.336 480 T(e).962 E F1 4.834(\(AST\). It)4.834 F 1.584(is called abst\
ract because, while it is related to the parse tree, it is not)4.834 F
4.357(literally the parse tree.)33.336 495 R 4.357
(Certain grammar symbols, which e)10.857 F 4.358
(xist purely for parsing)-.195 F .43
(purposes, might not be re\215ected in the AST)33.336 510 R 3.68(,o)
-.962 G 3.68(rt)-3.68 G .43(he AST may ha)-3.68 F .82 -.195(ve a d)-.26
H(if).195 E .429(ferent ordering or)-.325 F(structure.)33.336 525 Q .855
(An AST consists of nodes and edges.)33.336 546 R .855(Each node may ha)
7.355 F 1.245 -.195(ve a)-.26 H(ttrib).195 E .856
(utes associated with it.)-.26 F .777(In implementing an AST in C, the \
nodes are often held in dynamically allocated structs,)33.336 561 R 2.71
(with the edges being pointers within those structs.)33.336 576 R 2.711
(Each node has a dif)9.211 F 2.711(ferent set of)-.325 F(attrib)33.336
591 Q 2.728(utes, depending on the node type, and this mak)-.26 F 2.728
(es the AST a polymorphic data)-.13 F 1.209(structure, in that edges fr\
om one AST node can point to another AST node of arbitrary)33.336 606 R
(type.)33.336 621 Q 1.749(In man)33.336 642 R 4.999(yc)-.195 G 1.748
(ases, construction of an AST using embedded actions is straightforw)
-4.999 F 1.748(ard and)-.13 F(follo)33.336 657 Q .424
(ws naturally from the actual syntax.)-.325 F .425(As an e)6.925 F .425
(xample, let')-.195 F 3.675(sl)-.715 G .425(ook at a passage from the)
-3.675 F("e)33.336 672 Q(xpression calculator" grammar)-.195 E 3.25(,r)
-.52 G(e-written to generate an AST)-3.25 E(:)-.65 E 0 Cg EP
%%Page: 4 4
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 140.742(ECE466:Compilers Unit)33.336 60 R(4/pg 4)
2.25 E(\2512012 Jef)144.405 E 2.25(fH)-.225 G(akner)-2.25 E/F1 10
/Courier@0 SF(/* Note: some syntax needed to implement a polymorphic AS\
T has been elided */)33.336 117 Q 21.6(expr: NUM)33.336 129 R
({$$=ast_newnode\(AST_NUM\);)97.2 E($$->attributes.num=$1.num;})263.736
141 Q(|expr '+' expr)90.936 153 Q({$$=ast_newnode\(AST_BINOP\);)31.2 E
($$->attributes.binop='+';)263.736 165 Q($$->left=$1;)263.736 177 Q
($$->right=$2;})263.736 189 Q/F2 13/Times-Roman@0 SF .732(In the \214rs\
t rule, an AST node is created for a terminal, and is \214lled in with \
a cop)33.336 216 R 3.981(ya)-.13 G .731(ll of)-3.981 F 2.164
(the information needed re)33.336 231 R -.065(ga)-.195 G 2.164
(rding that terminal.).065 F 2.164(This information had been passed up)
8.664 F 1.312(from the le)33.336 246 R -.195(xe)-.195 G 4.562(ri).195 G
(n)-4.562 E/F3 13/Courier@0 SF -1.8(yylval)3.662 G F2 1.312(and w)5.462
F 1.312(as automatically copied to the yacc/bison v)-.13 F 1.311
(alue stack as)-.325 F F3 -1.8($1)32.436 261 S F2(.).9 E .146
(In the second rule, assume that the semantic v)33.336 282 R .146
(alues from the tw)-.325 F 3.396(oi)-.13 G .147
(nstances of the rhs non-)-3.396 F(terminal)33.336 297 Q F3 -1.8(expr)
3.05 G F2 .699
(are pointers to correct AST representations of those sube)4.85 F 3.949
(xpressions. Then)-.195 F .652(by creating a ne)33.336 312 R 3.902(wA)
-.325 G .653
(ST node to represent the addition operation, and connecting it to the)
-3.902 F(tw)33.336 327 Q 4.012(os)-.13 G(ube)-4.012 E .762
(xpressions, the semantic v)-.195 F .762(alue associated with the lhs)
-.325 F F3 -1.8(expr)3.112 G F2 .761(is, by induction, the)4.912 F
(correct representation of that e)33.336 342 Q(xpression.)-.195 E 0 0
468 655 -182.198 255 33.336 545.199 PBEGIN
%%BeginDocument: astexpr.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Title: astexpr.fig
%%Creator: fig2dev Version 3.2 Patchlevel 4
%%CreationDate: Thu Oct 11 22:31:45 2012
%%For: hak@lex ()
%%BoundingBox: 0 0 655 255
%%Magnification: 1.0000
%%EndComments
/$F2psDict 200 dict def
$F2psDict begin
$F2psDict /mtrx matrix put
/col-1 {0 setgray} bind def
/col0 {0.000 0.000 0.000 srgb} bind def
/col1 {0.000 0.000 1.000 srgb} bind def
/col2 {0.000 1.000 0.000 srgb} bind def
/col3 {0.000 1.000 1.000 srgb} bind def
/col4 {1.000 0.000 0.000 srgb} bind def
/col5 {1.000 0.000 1.000 srgb} bind def
/col6 {1.000 1.000 0.000 srgb} bind def
/col7 {1.000 1.000 1.000 srgb} bind def
/col8 {0.000 0.000 0.560 srgb} bind def
/col9 {0.000 0.000 0.690 srgb} bind def
/col10 {0.000 0.000 0.820 srgb} bind def
/col11 {0.530 0.810 1.000 srgb} bind def
/col12 {0.000 0.560 0.000 srgb} bind def
/col13 {0.000 0.690 0.000 srgb} bind def
/col14 {0.000 0.820 0.000 srgb} bind def
/col15 {0.000 0.560 0.560 srgb} bind def
/col16 {0.000 0.690 0.690 srgb} bind def
/col17 {0.000 0.820 0.820 srgb} bind def
/col18 {0.560 0.000 0.000 srgb} bind def
/col19 {0.690 0.000 0.000 srgb} bind def
/col20 {0.820 0.000 0.000 srgb} bind def
/col21 {0.560 0.000 0.560 srgb} bind def
/col22 {0.690 0.000 0.690 srgb} bind def
/col23 {0.820 0.000 0.820 srgb} bind def
/col24 {0.500 0.190 0.000 srgb} bind def
/col25 {0.630 0.250 0.000 srgb} bind def
/col26 {0.750 0.380 0.000 srgb} bind def
/col27 {1.000 0.500 0.500 srgb} bind def
/col28 {1.000 0.630 0.630 srgb} bind def
/col29 {1.000 0.750 0.750 srgb} bind def
/col30 {1.000 0.880 0.880 srgb} bind def
/col31 {1.000 0.840 0.000 srgb} bind def

end
save
newpath 0 255 moveto 0 0 lineto 655 0 lineto 655 255 lineto closepath clip newpath
-44.3 316.4 translate
1 -1 scale

/cp {closepath} bind def
/ef {eofill} bind def
/gr {grestore} bind def
/gs {gsave} bind def
/sa {save} bind def
/rs {restore} bind def
/l {lineto} bind def
/m {moveto} bind def
/rm {rmoveto} bind def
/n {newpath} bind def
/s {stroke} bind def
/sh {show} bind def
/slc {setlinecap} bind def
/slj {setlinejoin} bind def
/slw {setlinewidth} bind def
/srgb {setrgbcolor} bind def
/rot {rotate} bind def
/sc {scale} bind def
/sd {setdash} bind def
/ff {findfont} bind def
/sf {setfont} bind def
/scf {scalefont} bind def
/sw {stringwidth} bind def
/tr {translate} bind def
/tnt {dup dup currentrgbcolor
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add srgb}
  bind def
/shd {dup dup currentrgbcolor 4 -2 roll mul 4 -2 roll mul
  4 -2 roll mul srgb} bind def
/reencdict 12 dict def /ReEncode { reencdict begin
/newcodesandnames exch def /newfontname exch def /basefontname exch def
/basefontdict basefontname findfont def /newfont basefontdict maxlength dict def
basefontdict { exch dup /FID ne { dup /Encoding eq
{ exch dup length array copy newfont 3 1 roll put }
{ exch newfont 3 1 roll put } ifelse } { pop pop } ifelse } forall
newfont /FontName newfontname put newcodesandnames aload pop
128 1 255 { newfont /Encoding get exch /.notdef put } for
newcodesandnames length 2 idiv { newfont /Encoding get 3 1 roll put } repeat
newfontname newfont definefont pop end } def
/isovec [
8#055 /minus 8#200 /grave 8#201 /acute 8#202 /circumflex 8#203 /tilde
8#204 /macron 8#205 /breve 8#206 /dotaccent 8#207 /dieresis
8#210 /ring 8#211 /cedilla 8#212 /hungarumlaut 8#213 /ogonek 8#214 /caron
8#220 /dotlessi 8#230 /oe 8#231 /OE
8#240 /space 8#241 /exclamdown 8#242 /cent 8#243 /sterling
8#244 /currency 8#245 /yen 8#246 /brokenbar 8#247 /section 8#250 /dieresis
8#251 /copyright 8#252 /ordfeminine 8#253 /guillemotleft 8#254 /logicalnot
8#255 /hyphen 8#256 /registered 8#257 /macron 8#260 /degree 8#261 /plusminus
8#262 /twosuperior 8#263 /threesuperior 8#264 /acute 8#265 /mu 8#266 /paragraph
8#267 /periodcentered 8#270 /cedilla 8#271 /onesuperior 8#272 /ordmasculine
8#273 /guillemotright 8#274 /onequarter 8#275 /onehalf
8#276 /threequarters 8#277 /questiondown 8#300 /Agrave 8#301 /Aacute
8#302 /Acircumflex 8#303 /Atilde 8#304 /Adieresis 8#305 /Aring
8#306 /AE 8#307 /Ccedilla 8#310 /Egrave 8#311 /Eacute
8#312 /Ecircumflex 8#313 /Edieresis 8#314 /Igrave 8#315 /Iacute
8#316 /Icircumflex 8#317 /Idieresis 8#320 /Eth 8#321 /Ntilde 8#322 /Ograve
8#323 /Oacute 8#324 /Ocircumflex 8#325 /Otilde 8#326 /Odieresis 8#327 /multiply
8#330 /Oslash 8#331 /Ugrave 8#332 /Uacute 8#333 /Ucircumflex
8#334 /Udieresis 8#335 /Yacute 8#336 /Thorn 8#337 /germandbls 8#340 /agrave
8#341 /aacute 8#342 /acircumflex 8#343 /atilde 8#344 /adieresis 8#345 /aring
8#346 /ae 8#347 /ccedilla 8#350 /egrave 8#351 /eacute
8#352 /ecircumflex 8#353 /edieresis 8#354 /igrave 8#355 /iacute
8#356 /icircumflex 8#357 /idieresis 8#360 /eth 8#361 /ntilde 8#362 /ograve
8#363 /oacute 8#364 /ocircumflex 8#365 /otilde 8#366 /odieresis 8#367 /divide
8#370 /oslash 8#371 /ugrave 8#372 /uacute 8#373 /ucircumflex
8#374 /udieresis 8#375 /yacute 8#376 /thorn 8#377 /ydieresis] def
/Times-Roman /Times-Roman-iso isovec ReEncode
/Times-Italic /Times-Italic-iso isovec ReEncode
 /DrawEllipse {
	/endangle exch def
	/startangle exch def
	/yrad exch def
	/xrad exch def
	/y exch def
	/x exch def
	/savematrix mtrx currentmatrix def
	x y tr xrad yrad sc 0 0 1 startangle endangle arc
	closepath
	savematrix setmatrix
	} def

/$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def
/$F2psEnd {$F2psEnteredState restore end} def

$F2psBegin
10 setmiterlimit
0 slj 0 slc
 0.06000 0.06000 sc
%
% Fig objects follow
%
% 
% here starts figure with depth 50
% Ellipse
7.500 slw
n 2025 4500 765 765 0 360 DrawEllipse gs col0 s gr

/Times-Roman-iso ff 200.00 scf sf
1800 4200 m
gs 1 -1 sc (NUM) col0 sh gr
/Times-Roman-iso ff 200.00 scf sf
1425 4575 m
gs 1 -1 sc (value=3) col0 sh gr
% Ellipse
n 4650 4500 765 765 0 360 DrawEllipse gs col0 s gr

/Times-Roman-iso ff 200.00 scf sf
4425 4200 m
gs 1 -1 sc (NUM) col0 sh gr
/Times-Roman-iso ff 200.00 scf sf
4050 4575 m
gs 1 -1 sc (value=4) col0 sh gr
% Ellipse
n 10875 4500 765 765 0 360 DrawEllipse gs col0 s gr

/Times-Roman-iso ff 200.00 scf sf
10650 4200 m
gs 1 -1 sc (NUM) col0 sh gr
/Times-Roman-iso ff 200.00 scf sf
10275 4575 m
gs 1 -1 sc (value=4) col0 sh gr
% Ellipse
n 8100 4500 765 765 0 360 DrawEllipse gs col0 s gr

/Times-Roman-iso ff 200.00 scf sf
7875 4200 m
gs 1 -1 sc (NUM) col0 sh gr
/Times-Roman-iso ff 200.00 scf sf
7500 4575 m
gs 1 -1 sc (value=3) col0 sh gr
% Ellipse
n 9375 2700 765 765 0 360 DrawEllipse gs col0 s gr

% Polyline
gs  clippath
1583 3782 m 1595 3723 l 1447 3694 l 1559 3747 l 1435 3752 l cp
eoclip
n 1200 3675 m
 1575 3750 l gs col0 s gr gr

% arrowhead
n 1435 3752 m 1559 3747 l 1447 3694 l  col0 s
% Polyline
gs  clippath
4125 3858 m 4151 3804 l 4016 3737 l 4110 3818 l 3989 3791 l cp
eoclip
n 3825 3675 m
 4125 3825 l gs col0 s gr gr

% arrowhead
n 3989 3791 m 4110 3818 l 4016 3737 l  col0 s
% Polyline
gs  clippath
8443 3739 m 8485 3781 l 8593 3674 l 8487 3738 l 8550 3631 l cp
eoclip
n 9075 3150 m
 8475 3750 l gs col0 s gr gr

% arrowhead
n 8550 3631 m 8487 3738 l 8593 3674 l  col0 s
% Polyline
gs  clippath
10416 3857 m 10456 3812 l 10343 3711 l 10413 3814 l 10303 3756 l cp
eoclip
n 9675 3150 m
 10425 3825 l gs col0 s gr gr

% arrowhead
n 10303 3756 m 10413 3814 l 10343 3711 l  col0 s
% Polyline
gs  clippath
8629 2208 m 8648 2151 l 8504 2103 l 8609 2170 l 8485 2160 l cp
eoclip
n 8175 2025 m
 8625 2175 l gs col0 s gr gr

% arrowhead
n 8485 2160 m 8609 2170 l 8504 2103 l  col0 s
% Polyline
n 750 1050 m 6900 1050 l 6900 3150 l 750 3150 l
 cp gs col0 s gr 
/Times-Roman-iso ff 200.00 scf sf
900 1500 m
gs 1 -1 sc (expr:) col0 sh gr
/Times-Roman-iso ff 200.00 scf sf
1275 1725 m
gs 1 -1 sc (expr '+' expr {$$=ast_new\(BINOP\);) col0 sh gr
/Times-Roman-iso ff 200.00 scf sf
2550 2130 m
gs 1 -1 sc ($$->left=$1;$$->right=$3;$$->op='+';}) col0 sh gr
/Times-Roman-iso ff 200.00 scf sf
1275 2550 m
gs 1 -1 sc (| NUM            {$$=ast_new\(NUMBER\);) col0 sh gr
/Times-Roman-iso ff 200.00 scf sf
1275 2805 m
gs 1 -1 sc (                            $$->value=$1.number;}) col0 sh gr
/Times-Italic-iso ff 250.00 scf sf
2325 3450 m
gs 1 -1 sc (BEFORE REDUCING) col0 sh gr
/Times-Roman-iso ff 200.00 scf sf
900 3750 m
gs 1 -1 sc ($1) col0 sh gr
/Times-Roman-iso ff 200.00 scf sf
3450 3675 m
gs 1 -1 sc ($3) col0 sh gr
/Times-Italic-iso ff 250.00 scf sf
7950 1650 m
gs 1 -1 sc (AFTER REDUCING) col0 sh gr
/Times-Roman-iso ff 200.00 scf sf
9150 2400 m
gs 1 -1 sc (BINOP) col0 sh gr
/Times-Roman-iso ff 200.00 scf sf
8850 3000 m
gs 1 -1 sc (lleft) col0 sh gr
/Times-Roman-iso ff 200.00 scf sf
9450 3000 m
gs 1 -1 sc (right) col0 sh gr
/Times-Roman-iso ff 200.00 scf sf
8850 2700 m
gs 1 -1 sc (op='+') col0 sh gr
/Times-Roman-iso ff 200.00 scf sf
7800 2100 m
gs 1 -1 sc ($$) col0 sh gr
/Times-Italic-iso ff 250.00 scf sf
2250 1350 m
gs 1 -1 sc (RULES AND EMBEDDED ACTIONS) col0 sh gr
% here ends figure;
$F2psEnd
rs
showpage
%%EndDocument
end PEND/F4 13/Times-Bold@0 SF(The Symbol T)217.006 581.199 Q(able)
-1.196 E F2 2.55(Symbolic names are a critical part of an)33.336 617.199
R 5.8(yp)-.195 G 2.55(rogramming language.)-5.8 F 2.551
(The symbol table)9.05 F .856
(subsystem of a compiler is responsible for k)33.336 632.199 R .856
(eeping track of which symbolic names ha)-.13 F -.195(ve)-.26 G 2.333
(been seen, and the attrib)33.336 647.199 R 2.333
(utes associated with each instance.)-.26 F 2.333
(In the C language, these)8.833 F 1.65
(names are called "identi\214ers", and there are 10 dif)33.336 662.199 R
1.65(ferent purposes for which identi\214ers)-.325 F 1.393
(may be used \(not counting pre-processor uses\): v)33.336 677.199 R
1.393(ariable \(the ISO standard calls this an)-.325 F 2.703("object"\)\
 name, function name, struct tag, union tag, enum tag, typedef name, la\
bel,)33.336 692.199 R(enumeration constant, struct member)33.336 707.199
Q 3.25(,u)-.52 G(nion member)-3.25 E(.)-.715 E 2.547
(Note that, from a le)33.336 728.199 R 2.547
(xical standpoint, there is no distinction between these uses.)-.195 F
(The)9.047 E(re)33.336 743.199 Q 1.284(gular e)-.195 F 1.284
(xpression pattern for a v)-.195 F 1.283
(ariable name is clearly the same as that for a function)-.325 F 0 Cg EP
%%Page: 5 5
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 140.742(ECE466:Compilers Unit)33.336 60 R(4/pg 5)
2.25 E(\2512012 Jef)144.405 E 2.25(fH)-.225 G(akner)-2.25 E/F1 13
/Times-Roman@0 SF(name, or a structure tag.)33.336 120 Q 2.882
(The symbol table could be conceptually thought of as ha)33.336 141 R
2.882(ving the follo)-.26 F 2.882(wing abstract)-.325 F(interf)33.336
156 Q(ace:)-.13 E 3.25<8363>33.336 186 S(reate: Create a ne)-3.25 E 1.69
-.845(w, e)-.325 H(mpty symbol table.).845 E 3.25<8364>33.336 201 S
(estro)-3.25 E(y: Destro)-.13 E 3.25(yas)-.13 G
(ymbol table including an)-3.25 E 3.25(ys)-.195 G
(torage which it consumes.)-3.25 E 5.484<836c>33.336 216 S 2.234
(ookup: Gi)-5.484 F -.195(ve)-.325 G 5.484(na).195 G 5.483(ne)-5.484 G
2.233(xisting symbol table and scope, a name, and a namespace class,)
-5.678 F 2.1(return the associated symbol table entry)33.336 231 R 5.35
(,i)-.845 G 5.35(fi)-5.35 G 5.35(te)-5.35 G 2.101
(xists, otherwise return the f)-5.545 F 2.101(act that the)-.13 F 1.202
(symbol does not e)33.336 246 R 4.452(xist. The)-.195 F 1.201
(lookup operation must go through the stack of scopes until)4.452 F
2.437(the outermost \(\214le scope\) before concluding that the entry d\
oes not e)33.336 261 R 5.687(xist. The)-.195 F(entry)5.687 E
(contains attrib)33.336 276 Q(utes, which will be discussed belo)-.26 E
-.845(w.)-.325 G 3.303<8365>33.336 291 S .053(nter: Gi)-3.303 F -.195
(ve)-.325 G 3.303(na).195 G 3.303(ne)-3.303 G .053
(xisting symbol table, a name, a namespace class, and a set of attrib)
-3.498 F(utes,)-.26 E .894(enter this symbol in the table.)33.336 306 R
4.144(Ab)7.394 G .894(oolean parameter can determine whether)-4.144 F
4.145(,i)-.52 G 4.145(fas)-4.145 G(ymbol)-4.145 E .212
(with the same name and namespace already e)33.336 321 R .211
(xists in the table, to replace the de\214nition or)-.195 F
(to return an error)33.336 336 Q(.)-.715 E/F2 13/Times-Bold@0 SF
(Identi\214ers and attrib)198.13 366 Q(utes)-.26 E F1 1.079(The attrib)
33.336 402 R 1.079(utes which are stored with each symbol will v)-.26 F
1.079(ary depending on the use of the)-.325 F 1.741
(identi\214er \(e.g. the 10 identi\214er classes in C\).)33.336 417 R
-.195(Fo)8.241 G 4.991(re).195 G 1.741
(rror reporting purposes, all symbol)-4.991 F .806(table entries should\
 contain the \214le name and line number at which the symbol w)33.336
432 R .806(as \214rst)-.13 F 2.056
(de\214ned \(entered into the symbol table\).)33.336 447 R 2.056
(This will greatly assist in gi)8.556 F 2.056(ving useful error)-.325 F
1.598(messages in the case of duplicate or con\215icting de\214nitions.)
33.336 462 R 1.598(In addition, for discussion)8.098 F 1.761
(purposes, here is an e)33.336 477 R 1.76(xample \(not necessarily e)
-.195 F(xhausti)-.195 E 2.15 -.195(ve o)-.325 H 5.01(rc).195 G 1.76
(omplete\) of the attrib)-5.01 F(utes)-.26 E(which the compiler needs t\
o maintain during compilation for each identi\214er class:)33.336 492 Q
3.25<8376>33.336 507 S(ariable: type, storage class, of)-3.575 E
(fset within stack frame \(for automatic storage class only\))-.325 E
5.622<8366>33.336 522 S 2.372
(unction: type \(includes return type and ar)-5.622 F 2.373
(guments\), storage class \(e)-.234 F 2.373(xtern or static\),)-.195 F
1.335(presence of)33.336 537 R/F3 13/Courier@0 SF -1.8(inline)3.685 G F1
(speci\214er)5.485 E 4.585(,w)-.52 G 1.335
(hether a de\214nition for the function \(the actual code\) has)-4.585 F
(been seen yet.)33.336 552 Q 6.225<8373>33.336 567 S 2.976(truct/union \
tag: symbol table containing member de\214nitions, whether de\214nition\
 is)-6.225 F(complete or not.)33.336 582 Q 3.748<8365>33.336 597 S .498
(num tag: once the de\214nition is complete, nothing.)-3.748 F .498
(One might try to link back to all of)6.998 F(the enum constant names w\
hich are de\214ned under this tag, for error reporting purposes.)33.336
612 Q 3.903<8365>33.336 627 S .653(num constant: v)-3.903 F 3.903
(alue. One)-.325 F .653(might w)3.903 F .653
(ant to link to the enum tag too.)-.13 F .653(In the C language,)7.153 F
.685(identi\214ers which are enum constants simply become ints in the e)
33.336 642 R .685(xpression, i.e. the enum)-.195 F .776
(tag does not propag)33.336 657 R 4.026(ate. If)-.065 F F3(x)3.126 E F1
.776(is of type)3.126 F F3 .777 -1.8(enum e)3.127 H F1 4.027(,t).9 G
.777(he type of the e)-4.027 F(xpression)-.195 E F3 -1.8(\(x\))3.127 G
F1(is)4.927 E F3 -1.8(int)3.127 G F1 4.027(,n).9 G(ot)-4.027 E F3 -1.8
(enum e)32.436 672 S F1(.).9 E 3.783<8373>33.336 687 S .533(tatement la\
bel: Intermediate code or assembly language label of the basic block be)
-3.783 F(gun)-.195 E .35(by the C-language label.)33.336 702 R .35
(\(This will mak)6.85 F 3.6(em)-.13 G .35
(ore sense once code generation is discussed\).)-3.6 F 3.25<8374>33.336
717 S(ypedef name: equi)-3.25 E -.325(va)-.325 G(lent type.).325 E 3.25
<8373>33.336 732 S(truct/union member: type, of)-3.25 E
(fset \(within struct only\), bit \214eld width and bit of)-.325 E
(fset.)-.325 E 0 Cg EP
%%Page: 6 6
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 140.742(ECE466:Compilers Unit)33.336 60 R(4/pg 6)
2.25 E(\2512012 Jef)144.405 E 2.25(fH)-.225 G(akner)-2.25 E/F1 13
/Times-Bold@0 SF(Namespaces)233.399 120 Q/F2 13/Times-Roman@0 SF 1.404(\
It is possible in C for the same identi\214er name, in the same scope, \
to refer to dif)33.336 156 R(ferent)-.325 E 1.361
(things, because that identi\214er use w)33.336 171 R 1.362
(ould be unambiguous based on surrounding syntax.)-.13 F(The follo)
33.336 186 Q(wing are the groups, or)-.325 E F1(name spaces)3.25 E F2
3.25(,w)C(hich C de\214nes:)-3.25 E 4.524<834c>33.336 201 S 1.274
(abels, because the)-4.524 F 4.524(ya)-.195 G 1.273
(re used either with the)-4.524 F/F3 13/Courier@0 SF -1.8(goto)3.623 G
F2 -.13(ke)5.423 G(yw)-.065 E 1.273(ord, or with the syntax)-.13 F F3
-1.8(label)3.623 G -1.8(':' statement)32.436 216 S F2 6.5(.B).9 G
(oth uses are unambiguous.)-6.5 E 4.838<8354>33.336 231 S 4.838
(ags: e.g.)-5.878 F F3 -1.8(foo)3.938 G F2(in)5.739 E F3 1.589 -1.8
(struct foo)3.939 H F2 4.839(,h).9 G -2.925 -.26(av e)-4.839 H 1.589
(their o)5.099 F 1.589(wn namespace.)-.325 F 1.589
(Their use is unambiguous)8.089 F 1.723(because it is al)33.336 246 R
-.13(wa)-.13 G 1.723(ys preceded by the struct, union or enum k).13 F
-.195(ey)-.13 G -.13(wo).195 G 4.973(rd. Ho).13 F(we)-.325 E -.195(ve)
-.325 G 2.763 -.52(r, s).195 H(truct,).52 E
(union and enum tags are all lumped together)33.336 261 Q 6.5(.E)-.715 G
(.g.)-6.5 E/F4 10/Courier@0 SF(int f;)33.336 273 Q(struct f {int f;} g;)
33.336 285 Q(//OK)110.4 E(union f {int h;} u;)33.336 297 Q
(//Not OK, tag f is already used)58.8 E F2 4.623<8345>33.336 312 S 1.373
(ach struct or union de\214nition creates an independent, pri)-4.623 F
-.325(va)-.325 G 1.373(te namespace which is in).325 F(ef)33.336 327 Q
1.616(fect a mini-scope or mini- symbol table.)-.325 F 1.616
(The member names of an)8.116 F 4.865(ys)-.195 G 1.615(truct or union,)
-4.865 F .585(therefore, can not con\215ict with member names of an)
33.336 342 R 3.835(yo)-.195 G .585(ther struct or union, nor with an)
-3.835 F(y)-.195 E .779(of the other identi\214er classes.)33.336 357 R
.779(This is possible because member names can only be used)7.279 F
1.039(as the right-hand operand to a . or -> operator)33.336 372 R 4.289
(,a)-.52 G 1.04(nd the structure or union to which the)-4.289 F(y)-.195
E(belong is then implied by the type of the left-hand operand.)33.336
387 Q 3.777<8341>33.336 402 S .527
(ll other identi\214er classes: enum constants, typedef names, v)-3.777
F .526(ariable or function names.)-.325 F F1(Scopes and V)209.785 432 Q
(isibility)-.481 E F2 6.696(Ap)33.336 468 S 3.447
(articular instance of an identi\214er is not necessarily)-6.696 F F1
(visible)6.697 E F2 3.447(at e)6.697 F -.195(ve)-.325 G 3.447
(ry line of the).195 F 3.25(program. The)33.336 483 R 3.25(Cs)3.25 G
(tandard identi\214es the follo)-3.25 E(wing)-.325 E F3 -1.8(scopes)2.35
G F2(of visibility:)4.15 E 4.095<8346>33.336 513 S .845(ile scope: an i\
denti\214er with \214le scope is visible from its point of declaration \
until the)-4.095 F 3.236(end of that)33.336 528 R F3 -1.8(.c)5.586 G F2
6.486(\214le. File)7.386 F 3.236
(scope applies to declarations seen outside of an)6.486 F 6.486(yf)-.195
G(unction)-6.486 E(de\214nitions, i.e.)33.336 543 Q
("global" declarations.)6.5 E 4.683<8342>33.336 573 S 1.433(lock scope:\
 An opening curly brace within the body of a function introduces a ne)
-4.683 F(w)-.325 E .881(block scope.)33.336 588 R .881(Identi\214ers de\
clared within a block are visible from that point until the end)7.381 F
.39(\(closing curly brace\) of that block.)33.336 603 R .389
(Note that just as blocks are nestable, so too are block)6.889 F 4.259
(scopes. Block)33.336 618 R 1.009(scopes can be thought of as transluce\
nt with the innermost block on top.)4.259 F 4.896(Declarations which ha\
ppen in an inner block obscure the visibility of identi\214ers)33.336
633 R .798(appearing in an outer block, until that inner block is done.)
33.336 648 R .799(Also, declarations in a block)7.298 F
(scope may obscure \214le scope.)33.336 663 Q 4.847<8346>33.336 693 S
1.597(unction scope: Function scope is associated with the outermost bl\
ock of a function.)-4.847 F .558(Function and block scopes are v)33.336
708 R .558(ery similar)-.195 F 3.808(,t)-.52 G .558
(he primary distinction being in the handling)-3.808 F .109
(of statement labels.)33.336 723 R .109(Labels are al)6.609 F -.13(wa)
-.13 G .108(ys placed into the scope of the function in which the).13 F
(y)-.195 E(appear)33.336 738 Q 9.055(.I)-.715 G 5.805(fal)-9.055 G 2.556
(abel is de\214ned inside of an inner block scope, it is nonetheless vi\
sible)-5.805 F 0 Cg EP
%%Page: 7 7
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 140.742(ECE466:Compilers Unit)33.336 60 R(4/pg 7)
2.25 E(\2512012 Jef)144.405 E 2.25(fH)-.225 G(akner)-2.25 E/F1 13
/Times-Roman@0 SF 3.003(throughout the entire function.)33.336 120 R
3.003(Note that in the de\214nition of a function, the formal)9.503 F
.997(parameters \(which appear inside the parentheses, plus the declara\
tors between there and)33.336 135 R .248
(the opening brace in classic C\) ha)33.336 150 R .638 -.195(ve a s)-.26
H .248(cope as if the).195 F 3.498(yh)-.195 G .247
(ad been declared at the be)-3.498 F(ginning)-.195 E
(of the main block of the function.)33.336 165 Q 4.274<8350>33.336 195 S
1.024(rototype scope: The C standard uses this term to handle the case \
of identi\214ers which)-4.274 F
(appear in a prototyped function declarator)33.336 210 Q 3.25(,e)-.52 G
(.g.:)-3.25 E/F2 10/Courier@0 SF(unsigned fu\(int a,double d\);)33.336
222 Q F1 2.17(This is not the same as the)33.336 237 R/F3 13
/Times-Italic@0 SF(de\214nition)5.42 E F1 2.17
(of the function, which includes the actual code)5.42 F .56
(associated with it.)33.336 252 R .56(The identi\214ers which appear in\
 the prototype are not meaningful, just)7.06 F .008
(the list of types of the ar)33.336 267 R .008
(guments, and so the introduction of this term "prototype scope" is)
-.234 F(of dubious v)33.336 282 Q(alue to the compiler)-.325 E(-writer)
-.26 E(.)-.715 E 0 0 357 357 -362 362 88.836 695 PBEGIN
%%BeginDocument: scopes.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Title: scopes.fig
%%Creator: fig2dev Version 3.2 Patchlevel 4
%%CreationDate: Fri Oct 22 20:05:18 2010
%%For: hak@lex ()
%%BoundingBox: 0 0 357 362
%%Magnification: 1.0000
%%EndComments
/$F2psDict 200 dict def
$F2psDict begin
$F2psDict /mtrx matrix put
/col-1 {0 setgray} bind def
/col0 {0.000 0.000 0.000 srgb} bind def
/col1 {0.000 0.000 1.000 srgb} bind def
/col2 {0.000 1.000 0.000 srgb} bind def
/col3 {0.000 1.000 1.000 srgb} bind def
/col4 {1.000 0.000 0.000 srgb} bind def
/col5 {1.000 0.000 1.000 srgb} bind def
/col6 {1.000 1.000 0.000 srgb} bind def
/col7 {1.000 1.000 1.000 srgb} bind def
/col8 {0.000 0.000 0.560 srgb} bind def
/col9 {0.000 0.000 0.690 srgb} bind def
/col10 {0.000 0.000 0.820 srgb} bind def
/col11 {0.530 0.810 1.000 srgb} bind def
/col12 {0.000 0.560 0.000 srgb} bind def
/col13 {0.000 0.690 0.000 srgb} bind def
/col14 {0.000 0.820 0.000 srgb} bind def
/col15 {0.000 0.560 0.560 srgb} bind def
/col16 {0.000 0.690 0.690 srgb} bind def
/col17 {0.000 0.820 0.820 srgb} bind def
/col18 {0.560 0.000 0.000 srgb} bind def
/col19 {0.690 0.000 0.000 srgb} bind def
/col20 {0.820 0.000 0.000 srgb} bind def
/col21 {0.560 0.000 0.560 srgb} bind def
/col22 {0.690 0.000 0.690 srgb} bind def
/col23 {0.820 0.000 0.820 srgb} bind def
/col24 {0.500 0.190 0.000 srgb} bind def
/col25 {0.630 0.250 0.000 srgb} bind def
/col26 {0.750 0.380 0.000 srgb} bind def
/col27 {1.000 0.500 0.500 srgb} bind def
/col28 {1.000 0.630 0.630 srgb} bind def
/col29 {1.000 0.750 0.750 srgb} bind def
/col30 {1.000 0.880 0.880 srgb} bind def
/col31 {1.000 0.840 0.000 srgb} bind def

end
save
newpath 0 362 moveto 0 0 lineto 357 0 lineto 357 362 lineto closepath clip newpath
-143.3 347.2 translate
1 -1 scale

/cp {closepath} bind def
/ef {eofill} bind def
/gr {grestore} bind def
/gs {gsave} bind def
/sa {save} bind def
/rs {restore} bind def
/l {lineto} bind def
/m {moveto} bind def
/rm {rmoveto} bind def
/n {newpath} bind def
/s {stroke} bind def
/sh {show} bind def
/slc {setlinecap} bind def
/slj {setlinejoin} bind def
/slw {setlinewidth} bind def
/srgb {setrgbcolor} bind def
/rot {rotate} bind def
/sc {scale} bind def
/sd {setdash} bind def
/ff {findfont} bind def
/sf {setfont} bind def
/scf {scalefont} bind def
/sw {stringwidth} bind def
/tr {translate} bind def
/tnt {dup dup currentrgbcolor
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add srgb}
  bind def
/shd {dup dup currentrgbcolor 4 -2 roll mul 4 -2 roll mul
  4 -2 roll mul srgb} bind def
/$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def
/$F2psEnd {$F2psEnteredState restore end} def

$F2psBegin
10 setmiterlimit
0 slj 0 slc
 0.06000 0.06000 sc
%
% Fig objects follow
%
% 
% here starts figure with depth 50
% Polyline
7.500 slw
n 5625 4575 m 5775 4575 l 5775 5775 l 5625 5775 l
 cp gs col0 s gr 
% Polyline
n 5625 4575 m 5775 4575 l 5775 4725 l 5625 4725 l
 cp gs col0 s gr 
% Polyline
n 5625 4875 m 5775 4875 l 5775 5025 l 5625 5025 l
 cp gs col0 s gr 
% Polyline
n 5625 5175 m 5775 5175 l 5775 5325 l 5625 5325 l
 cp gs col0 s gr 
% Polyline
n 5625 5475 m 5775 5475 l 5775 5625 l 5625 5625 l
 cp gs col0 s gr 
% Polyline
n 5250 3900 m 6075 3900 l 6075 4425 l 5250 4425 l
 cp gs col0 s gr 
% Polyline
n 4125 825 m 4275 825 l 4275 2025 l 4125 2025 l
 cp gs col0 s gr 
% Polyline
n 4125 825 m 4275 825 l 4275 975 l 4125 975 l
 cp gs col0 s gr 
% Polyline
n 4125 1125 m 4275 1125 l 4275 1275 l 4125 1275 l
 cp gs col0 s gr 
% Polyline
n 4125 1425 m 4275 1425 l 4275 1575 l 4125 1575 l
 cp gs col0 s gr 
% Polyline
n 4125 1725 m 4275 1725 l 4275 1875 l 4125 1875 l
 cp gs col0 s gr 
% Polyline
n 3750 150 m 4575 150 l 4575 675 l 3750 675 l
 cp gs col0 s gr 
% Polyline
n 7425 2175 m 7575 2175 l 7575 3375 l 7425 3375 l
 cp gs col0 s gr 
% Polyline
n 7425 2175 m 7575 2175 l 7575 2325 l 7425 2325 l
 cp gs col0 s gr 
% Polyline
n 7425 2475 m 7575 2475 l 7575 2625 l 7425 2625 l
 cp gs col0 s gr 
% Polyline
n 7425 2775 m 7575 2775 l 7575 2925 l 7425 2925 l
 cp gs col0 s gr 
% Polyline
n 7425 3075 m 7575 3075 l 7575 3225 l 7425 3225 l
 cp gs col0 s gr 
% Polyline
n 7050 1500 m 7875 1500 l 7875 2025 l 7050 2025 l
 cp gs col0 s gr 
% Polyline
n 5550 1650 m 5700 1650 l 5700 2850 l 5550 2850 l
 cp gs col0 s gr 
% Polyline
n 5550 1650 m 5700 1650 l 5700 1800 l 5550 1800 l
 cp gs col0 s gr 
% Polyline
n 5550 1950 m 5700 1950 l 5700 2100 l 5550 2100 l
 cp gs col0 s gr 
% Polyline
n 5550 2250 m 5700 2250 l 5700 2400 l 5550 2400 l
 cp gs col0 s gr 
% Polyline
n 5550 2550 m 5700 2550 l 5700 2700 l 5550 2700 l
 cp gs col0 s gr 
% Polyline
n 5175 975 m 6000 975 l 6000 1500 l 5175 1500 l
 cp gs col0 s gr 
% Polyline
gs  clippath
5982 4021 m 5987 4081 l 6138 4069 l 6017 4049 l 6134 4009 l cp
eoclip
n 6975 3975 m
 6000 4050 l gs col0 s gr gr

% arrowhead
n 6134 4009 m 6017 4049 l 6138 4069 l  col0 s
% Polyline
gs  clippath
7158 1651 m 7105 1622 l 7032 1755 l 7117 1665 l 7085 1784 l cp
eoclip
n 5850 3975 m
 7125 1650 l gs col0 s gr gr

% arrowhead
n 7085 1784 m 7117 1665 l 7032 1755 l  col0 s
% Polyline
gs  clippath
5846 1091 m 5825 1147 l 5965 1202 l 5865 1131 l 5987 1146 l cp
eoclip
n 7200 1650 m
 5850 1125 l gs col0 s gr gr

% arrowhead
n 5987 1146 m 5865 1131 l 5965 1202 l  col0 s
% Polyline
gs  clippath
4434 267 m 4393 312 l 4505 413 l 4437 311 l 4545 369 l cp
eoclip
n 5250 1050 m
 4425 300 l gs col0 s gr gr

% arrowhead
n 4545 369 m 4437 311 l 4505 413 l  col0 s
% Polyline
 [60 24 15 18 15 18 15 24 ] 0 sd
gs  clippath
5105 4083 m 5123 4025 l 4977 3981 l 5084 4045 l 4960 4038 l cp
eoclip
n 3375 3525 m
 5100 4050 l gs col0 s gr gr
 [] 0 sd
% arrowhead
n 4960 4038 m 5084 4045 l 4977 3981 l  col0 s
% Polyline
 [60 24 15 18 15 18 15 24 ] 0 sd
gs  clippath
5178 3933 m 5199 3877 l 5058 3822 l 5160 3894 l 5037 3878 l cp
eoclip
n 4200 3525 m
 5175 3900 l gs col0 s gr gr
 [] 0 sd
% arrowhead
n 5037 3878 m 5160 3894 l 5058 3822 l  col0 s
% Polyline
 [60 24 15 18 15 18 15 24 ] 0 sd
gs  clippath
6924 1673 m 6903 1616 l 6760 1668 l 6884 1656 l 6781 1725 l cp
eoclip
n 2775 3150 m
 6900 1650 l gs col0 s gr gr
 [] 0 sd
% arrowhead
n 6781 1725 m 6884 1656 l 6760 1668 l  col0 s
% Polyline
 [60 24 15 18 15 18 15 24 ] 0 sd
gs  clippath
6850 1822 m 6827 1766 l 6687 1823 l 6810 1806 l 6710 1879 l cp
eoclip
n 2775 3675 m 3000 3375 l
 6825 1800 l gs col0 s gr gr
 [] 0 sd
% arrowhead
n 6710 1879 m 6810 1806 l 6687 1823 l  col0 s
% Polyline
 [60 24 15 18 15 18 15 24 ] 0 sd
gs  clippath
5203 1068 m 5172 1016 l 5042 1095 l 5161 1059 l 5073 1146 l cp
eoclip
n 2550 2625 m
 5175 1050 l gs col0 s gr gr
 [] 0 sd
% arrowhead
n 5073 1146 m 5161 1059 l 5042 1095 l  col0 s
% Polyline
 [60 24 15 18 15 18 15 24 ] 0 sd
gs  clippath
5128 1217 m 5096 1166 l 4968 1246 l 5086 1209 l 4999 1297 l cp
eoclip
n 2400 3750 m 2550 2775 l
 5100 1200 l gs col0 s gr gr
 [] 0 sd
% arrowhead
n 4999 1297 m 5086 1209 l 4968 1246 l  col0 s
/Times-Roman ff 200.00 scf sf
2400 1950 m
gs 1 -1 sc (int i;) col0 sh gr
/Times-Roman ff 200.00 scf sf
2400 2460 m
gs 1 -1 sc (int f\(\)) col0 sh gr
/Times-Roman ff 200.00 scf sf
2400 2715 m
gs 1 -1 sc ({) col0 sh gr
/Times-Roman ff 200.00 scf sf
2400 2970 m
gs 1 -1 sc (     /*...*/) col0 sh gr
/Times-Roman ff 200.00 scf sf
2400 3225 m
gs 1 -1 sc (     {) col0 sh gr
/Times-Roman ff 200.00 scf sf
2400 3480 m
gs 1 -1 sc (            int x\(int a,int b\);) col0 sh gr
/Times-Roman ff 200.00 scf sf
2400 3735 m
gs 1 -1 sc (      }) col0 sh gr
/Times-Roman ff 200.00 scf sf
2400 3990 m
gs 1 -1 sc (}) col0 sh gr
/Times-Italic ff 200.00 scf sf
7125 3975 m
gs 1 -1 sc (current scope) col0 sh gr
/Times-Italic ff 200.00 scf sf
5400 3600 m
gs 1 -1 sc (proto) col0 sh gr
/Times-Italic ff 200.00 scf sf
7275 1275 m
gs 1 -1 sc (block) col0 sh gr
/Times-Italic ff 200.00 scf sf
5475 675 m
gs 1 -1 sc (function) col0 sh gr
/Times-Italic ff 200.00 scf sf
3975 -75 m
gs 1 -1 sc (global) col0 sh gr
/Times-Roman ff 200.00 scf sf
2775 3300 m
gs 1 -1 sc (z:) col0 sh gr
/Times-Roman ff 133.33 scf sf
4196 1225 m
gs 1 -1 sc (i) col0 sh gr
/Times-Roman ff 133.33 scf sf
4189 1518 m
gs 1 -1 sc (f) col0 sh gr
/Times-Roman ff 200.00 scf sf
2647 2830 m
gs 1 -1 sc (int i;) col0 sh gr
/Times-Roman ff 133.33 scf sf
5610 1918 m
gs 1 -1 sc (i) col0 sh gr
/Times-Roman ff 133.33 scf sf
5610 2525 m
gs 1 -1 sc (z) col0 sh gr
/Times-Roman ff 133.33 scf sf
7470 2445 m
gs 1 -1 sc (x) col0 sh gr
/Times-Roman ff 133.33 scf sf
7470 2445 m
gs 1 -1 sc (x) col0 sh gr
/Times-Roman ff 133.33 scf sf
5670 4992 m
gs 1 -1 sc (a) col0 sh gr
/Times-Roman ff 133.33 scf sf
5670 5432 m
gs 1 -1 sc (b) col0 sh gr
% here ends figure;
$F2psEnd
rs
showpage
%%EndDocument
end PEND .56(In implementing a symbol table, one approach might be to c\
reate a stack of scopes, each)33.336 722 R .874
(pointing to its associated symbol table.)33.336 737 R .874
(When looking up an identi\214er)7.374 F 4.124(,t)-.52 G .874
(he symbol table)-4.124 F 0 Cg EP
%%Page: 8 8
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 140.742(ECE466:Compilers Unit)33.336 60 R(4/pg 8)
2.25 E(\2512012 Jef)144.405 E 2.25(fH)-.225 G(akner)-2.25 E/F1 13
/Times-Roman@0 SF 1.544(at the top of the stack, corresponding to the i\
nnermost scope, is consulted \214rst, then if)33.336 120 R .786
(nothing is found, the ne)33.336 135 R .786
(xt one, etc. until the bottom of the stack, representing \214le scope,)
-.195 F 1.169(is reached.)33.336 150 R 3.249 -1.04(To h)7.669 H 1.169
(andle the dif)1.04 F 1.169
(ferent namespaces, one could maintain an array of symbol)-.325 F 3.142
(tables for each scope, one element per name space.)33.336 165 R
(Alternati)9.642 E -.195(ve)-.325 G(ly).195 E 6.392(,o)-.845 G 3.142
(ne could add a)-6.392 F .592(namespace tag to each symbol table entry \
and only consider a match to occur if both the)33.336 180 R
(name and the namespace are identical.)33.336 195 Q/F2 13/Times-Bold@0
SF -.26(Po)184.584 225 S(int of Identi\214er Installation).26 E F1 2.192
(The point at which an identi\214er is installed into the symbol table \
v)33.336 255 R 2.191(aried by identi\214er)-.325 F(class:)33.336 270 Q
3.858<8376>33.336 285 S .609(ariable name: End of declarator \(see belo)
-4.183 F 3.859(w")-.325 G .609
(Declarators and Abstract Declarators"\) in)-3.859 F(which v)33.336 300
Q(ariable name is mentioned.)-.325 E 3.914<8366>33.336 315 S .664(uncti\
on name: End of declarator in which function name is mentioned, or poin\
t of use)-3.914 F(in the case of implicit declaration \(see belo)33.336
330 Q(w\))-.325 E 3.25<8374>33.336 345 S
(ypedef name: End of declarator in which typedef name is mentioned.)
-3.25 E 3.25<8373>33.336 360 S(truct/union tag: See discussion of struc\
ture and union incomplete types.)-3.25 E 7.42<8373>33.336 375 S 4.17
(truct/union member: End of declarator)-7.42 F 7.421(,a)-.52 G 4.171
(ppearing within a declaration within a)-7.421 F
(struct/union de\214nition, in which member name is mentioned.)33.336
390 Q 3.25<8365>33.336 405 S
(num tag: end of enum de\214nition \(closing brace\))-3.25 E 4.86<8365>
33.336 420 S 1.61
(num constant name: after name is mentioned \(possibly with e)-4.86 F
1.61(xplicit v)-.195 F 1.61(alue\) in enum)-.325 F(de\214nition.)33.336
435 Q 3.525<836c>33.336 450 S .275
(abel: de\214nition point at labeled statement, or implicit forw)-3.525
F .275(ard declaration when used in)-.13 F(goto.)33.336 465 Q F2
(Declarators and Abstract Declarators)162.822 495 Q F1 1.089(The term)
33.336 525 R F2(declarator)4.339 E F1 1.088
(is de\214ned in the C standard')4.339 F 4.338(sg)-.715 G 1.088
(rammar as the syntactic element in)-4.338 F .289
(which the identi\214er is mentioned, and resembles a tin)33.336 540 R
3.539(ys)-.195 G .289(ubset of the C e)-3.539 F .289(xpression syntax.)
-.195 F -.195(Fo)33.336 555 S 3.25(re).195 G(xample, in the follo)-3.445
E(wing code:)-.325 E/F3 10/Courier@0 SF(const int a,*pa,*ap[10];)33.336
567 Q F1 1.222(The tok)33.336 582 R(ens)-.13 E/F4 13/Courier@0 SF 1.221
-1.8(const int)3.572 H F1 1.221(form the)5.371 F F2 1.221
(declaration speci\214ers)4.471 F F1 4.471(,a)C 1.221
(nd each of the items delimited)-4.471 F 1.748
(by commas is a declarator)33.336 597 R 8.248(.D)-.715 G 1.748
(eclarators are formed with identi\214ers, pointer constructs,)-8.248 F
2.999
(array constructs, function constructs, and parenthesized declarators.)
33.336 612 R(The)9.498 E 6.248(yf)-.195 G(ollo)-6.248 E 6.248(wt)-.325 G
(he)-6.248 E 4.432(same rules of operator precedence as the C e)33.336
627 R 4.432(xpression grammar)-.195 F 7.682(,a)-.52 G 4.432
(nd indeed C')-7.682 F(s)-.715 E .857
(declaration syntax may informally be described as)33.336 642 R .857
("you declare it lik)7.357 F 4.107(ey)-.13 G .857(ou w)-4.107 F .857
(ould use it)-.13 F 5.358(later on.")33.336 657 R 5.358(There are also)
11.858 F F2 5.358(abstract declarators)8.608 F F1 5.359
(which are identical to "normal")8.608 F .537(declarators e)33.336 672 R
.537(xcept for the ommision of identi\214ers.)-.195 F(The)7.037 E 3.787
(ya)-.195 G .537(re used in abstract type names,)-3.787 F 2.369
(which can appear only in cast and sizeof e)33.336 687 R 2.369
(xpressions, or in function prototypes.)-.195 F -.195(Fo)8.869 G(r).195
E -.195(ex)33.336 702 S(ample).195 E F4 1.973 -1.8(\(int **[]\))4.323 H
F1 1.972(is an abstract type of \(array\(unkno)6.123 F 1.972
(wn size, of \(pointer to\(pointer)-.325 F(to\(int\)\)\)\)\))33.336 717
Q 0 Cg EP
%%Page: 9 9
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 140.742(ECE466:Compilers Unit)33.336 60 R(4/pg 9)
2.25 E(\2512012 Jef)144.405 E 2.25(fH)-.225 G(akner)-2.25 E/F1 13
/Times-Bold@0 SF -.325(Fo)206.301 120 S(rward Declarations).325 E/F2 13
/Times-Roman@0 SF .366(Generally speaking, in the C language, identi\
\214ers must be declared in some visible scope)33.336 156 R .321
(before the)33.336 171 R 3.571(ya)-.195 G .321(re used.)-3.571 F .321
(When a name is used prior to e)6.821 F .32
(xplicit declaration or de\214nition, that)-.195 F 5.201(is kno)33.336
186 R 5.201(wn as a)-.325 F F1 -.325(fo)8.451 G 5.201(rward declaration)
.325 F F2 11.701(.T)C 5.201(his is allo)-11.701 F 5.201
(wed only under these speci\214c)-.325 F(circumstances:)33.336 201 Q
4.615<8373>33.336 231 S 1.364(truct and union tags may be referenced be\
fore their member list is declared.)-4.615 F 1.364(This is)7.864 F(kno)
33.336 246 Q(wn as an incomplete struct/union type.)-.325 E 3.301<8373>
33.336 261 S .051(tatement labels may be used in a)-3.301 F/F3 13
/Courier@0 SF -1.8(goto)2.401 G F2 .051
(before their de\214nition point \(a labeled statement\))4.201 F 2.199
(is seen.)33.336 276 R 2.199(There may be 0 or more)8.699 F F3 -1.8
(goto)4.549 G F2 2.198(uses before the de\214nition point, b)6.348 F
2.198(ut only one)-.26 F(de\214nition point is allo)33.336 291 Q(wed.)
-.325 E 6.344<8366>33.336 306 S 3.095(unctions may be called without \
\214rst declaring the identi\214er to be the name of a)-6.344 F 3.307
(function. When)33.336 321 R .057(this occurs, an)3.307 F F1 .057
(implicit declaration)3.307 F F2 .056
(is made in the current scope, and the)3.307 F 3.106
(identi\214er is assumed to ha)33.336 336 R 3.497 -.195(ve t)-.26 H(ype)
.195 E F3 3.107 -1.8(\(int \(\)\))5.457 H F2 6.357(,af).9 G 3.107
(unction returning int and taking an)-6.357 F(unkno)33.336 351 Q(wn ar)
-.325 E(gument list.)-.234 E F1(Re-declaration of Identi\214ers)188.985
381 Q F2 .636(Generally it is an error when a declaration attempts to i\
nstall a name in the symbol table)33.336 417 R 1.065(when that same nam\
e \(in the same namespace\) is already installed in the current scope.)
33.336 432 R(There are e)33.336 447 Q(xceptions:)-.195 E 4.451<8352>
33.336 462 S 1.201
(edeclaration of a function name is permitted as long as the ne)-4.451 F
4.45(wd)-.325 G 1.2(eclaration matches)-4.45 F .029(the e)33.336 477 R
.03(xisting one in terms of type \(there are complicated rules for dete\
rmining whether tw)-.195 F(o)-.13 E(function prototypes are equi)33.336
492 Q -.325(va)-.325 G(lent\) and storage class.).325 E 3.703<8356>
33.336 507 S .453(ariable declarations with an e)-5.146 F(xplicit)-.195
E F3 -1.8(extern)2.803 G F2 .453
(storage class do not con\215ict with pre)4.603 F(vious)-.325 E 1.611
(or future declarations of the same v)33.336 522 R 1.611
(ariable without the)-.325 F F3 -1.8(extern)3.961 G F2 4.861(,s).9 G
4.861(ol)-4.861 G 1.611(ong as the declared)-4.861 F 1.012
(types are equi)33.336 537 R -.325(va)-.325 G 1.012
(lent, and the subsequent declaration does not ha).325 F 1.401 -.195
(ve s)-.26 H 1.011(torage class).195 F F3 -1.8(static)3.361 G F2(,).9 E
F3 -1.8(auto)32.436 552 S F2(or)4.595 E F3 -1.8(register)2.795 G F2
6.945(.T).9 G .445(his allo)-6.945 F .445
(ws, in a compilation from multiple .c \214les, for the v)-.325 F .446
(ariable to)-.325 F .519(be declared in a header \214le as)33.336 567 R
F3 -1.8(extern)2.869 G F2 3.769(,w).9 G .519
(ith that same header \214le)-3.769 F F3 -1.8(#include)2.869 G F2 1.819
-.65('d i).9 H 3.768(nt).65 G .518(he .c \214le)-3.768 F(in which the v)
33.336 582 Q(ariable is actually declared.)-.325 E 4.67<8356>33.336 597
S 1.42(ariable declarations in global scope without an e)-6.113 F 1.42
(xplicit storage class and without an)-.195 F .287
(initializer may be repeated, so long as the declared types are equi)
33.336 612 R -.325(va)-.325 G 3.536(lent. E.g.).325 F F3 .286 -1.8
(int i; int)2.636 H -1.8(i;)32.436 627 S F2(is a v)4.15 E
(alid C program.)-.325 E(This is kno)17.576 E
(wn as the "Common Block" model.)-.325 E F1(Storage Class and Duration)
190.597 672 Q F2 .218(The scope of a v)33.336 708 R .218
(ariable \(where it is le)-.325 F .219
(xically visible in the program\) is not necessarily the)-.195 F .205
(same as its lifetime.)33.336 723 R -1.443(Va)6.705 G .205
(riables declared in global \(\214le\) scope ha)1.443 F .594 -.195
(ve a d)-.26 H .204(uration which is the).195 F .348
(duration of the entire program.)33.336 738 R -1.443(Va)6.849 G .349
(riables declared inside a function scope generally ha)1.443 F -.195(ve)
-.26 G 0 Cg EP
%%Page: 10 10
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 138.492(ECE466:Compilers Unit)33.336 60 R
(4/pg 10)2.25 E(\2512012 Jef)142.155 E 2.25(fH)-.225 G(akner)-2.25 E/F1
13/Times-Roman@0 SF 5.173(ad)33.336 120 S 1.923
(uration which is that of the function.)-5.173 F(Ho)8.423 E(we)-.325 E
-.195(ve)-.325 G -.52(r,).195 G/F2 13/Courier@0 SF -1.8(static)4.793 G
F1 -.325(va)6.073 G 1.922(riables declared within a).325 F(function ha)
33.336 135 Q .39 -.195(ve l)-.26 H(ocal scope, b).195 E
(ut global duration.)-.26 E 1.675(The C syntax allo)33.336 156 R 1.675
(ws for certain storage class speci\214ers to be gi)-.325 F -.195(ve)
-.325 G 4.926(ni).195 G 4.926(nad)-4.926 G 1.676(eclaration or)-4.926 F
.706(function de\214nition to control duration.)33.336 171 R .705
(These are)7.205 F/F3 13/Times-Bold@0 SF(auto)3.955 E F1(,)A F3 -.234
(re)3.955 G(gister).234 E F1(,)A F3(exter)3.955 E(n)-.195 E F1(and)3.955
E F3(static)3.955 E F1 7.205(.T)C(he)-7.205 E .691(semantics of these s\
torage classes are well documented in the C standard and other te)33.336
186 R(xts)-.195 E 2.368(and will not be co)33.336 201 R -.195(ve)-.195 G
2.368(red here.).195 F 2.368
(Storage class can only be applied to declarations of a)8.868 F -.325
(va)33.336 216 S 2.572(riable or function.).325 F 2.573
(As we shall see in a later unit, all that a storage class does is)9.072
F .184(determine ho)33.336 231 R 3.434(wav)-.325 G .184(ariable is acce\
ssed at run-time, or in the case of a function, whether the)-3.759 F
.726(function name is made visible outside of the local \214le.)33.336
246 R .726(Therefore, it is meaningless, and)7.226 F .044(not allo)
33.336 261 R .044(wed by C, to attach a storage class to a structure, u\
nion or enum de\214nition \(i.e. the)-.325 F 1.495
(de\214nition of the members, as opposed to a declaration of a v)33.336
276 R 1.495(ariable of struct, union or)-.325 F .303(enum type\), to a \
typedef, to a label, or to a structure or union member \(their storage \
class)33.336 291 R
(is "inherited" from the structure or union in which the)33.336 306 Q
3.25(ya)-.195 G(ppear\).)-3.25 E 1.078(When a storage class k)33.336 327
R -.195(ey)-.13 G -.13(wo).195 G 1.078(rd is omitted in a function or v)
.13 F 1.078(ariable declaration, a def)-.325 F(ault)-.13 E .6
(storage class is assumed.)33.336 342 R .599
(In some cases, the lack of a storage class is not quite the same)7.1 F
.599(as when that same def)33.336 357 R .6
(ault storage class is speci\214ed e)-.13 F(xplicitly)-.195 E 7.1(.W)
-.845 G(e')-8.14 E .6(ll see a good e)-.13 F(xample)-.195 E 2.247
(of that in a subsequent unit when the link)33.336 372 R 2.246(er is co)
-.13 F -.195(ve)-.195 G 2.246(red, with re).195 F -.065(ga)-.195 G 2.246
(rd to the dif).065 F(ference)-.325 E(between)33.336 387 Q F2 .649 -1.8
(int i;)2.999 H F1(and)4.799 E F2 .649 -1.8(extern int i;)2.999 H F1
.649(in global scope.)4.799 F .649(Or the reader may refer to H&S or)
7.149 F(the C standard.)33.336 402 Q .886
(The storage class is an attrib)33.336 423 R .886(ute of a v)-.26 F .885
(ariable or function symbol, distinct from the type.)-.325 F(E.g.)33.336
438 Q/F4 10/Courier@0 SF(static int a;)33.336 450 Q F1(The type of a is)
33.336 465 Q F2 -1.8(int)2.35 G F1 3.25(,n).9 G(ot)-3.25 E F2 -1.8
(static int)2.35 G F1(.).9 E F3 -.962(Ty)229.72 510 S(pe Systems).962 E
F1 3.33(Almost all programming languages ha)33.336 546 R 3.72 -.195
(ve t)-.26 H 3.33(ype systems.).195 F -1.04(Ty)9.83 G 3.33
(pe systems are a w)1.04 F 3.331(ay of)-.13 F(allo)33.336 561 Q 1.281
(wing programmer to e)-.325 F 1.281
(xpress intent rather than mechanics.)-.195 F 1.281(The compiler must k)
7.781 F(eep)-.13 E(track of the types of v)33.336 576 Q(ariables, e)
-.325 E(xpressions, etc. in order to generate the proper code.)-.195 E
1.094
(Enforcement of type rules catches certain types of programmer errors.)
33.336 597 R 1.095(Some languages)7.595 F 2.616(are v)33.336 612 R 2.616
(ery strongly typed, to the e)-.195 F 2.616(xtent that the)-.195 F 5.866
(ys)-.195 G 2.616(imply can')-5.866 F 5.866(td)-.234 G 5.865(oc)-5.866 G
2.615(ertain things which)-5.865 F .159(violate their type model.)33.336
627 R .16
(Other languages such as C are more loosely typed: the compiler)6.659 F
(may complain, b)33.336 642 Q(ut the programmer can generally o)-.26 E
-.195(ve)-.195 G(rride type-safety decisions.).195 E 2.479
(Programming languages can ha)33.336 663 R 2.869 -.195(ve b)-.26 H 2.479
(oth static and dynamic typing.).195 F 5.728(Ch)8.978 G 2.478
(as only static.)-5.728 F 2.171
(Dynamic typing requires run-time support, e.g.)33.336 678 R 2.171
(inserting a tag into objects to encode)8.671 F 2.902
(their type and cause the e)33.336 693 R -.195(xe)-.195 G 2.901
(cution of the appropriate method.).195 F 2.901(Interpreted languages)
9.401 F(typically ha)33.336 708 Q .39 -.195(ve g)-.26 H
(reater support for dynamic typing.).195 E -1.04(We)33.336 729 S -.13
('l)1.04 G 3.25(ls).13 G(oon see ho)-3.25 E 3.25(wA)-.325 G
(STs can be used to represent type information.)-3.25 E 0 Cg EP
%%Page: 11 11
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 138.492(ECE466:Compilers Unit)33.336 60 R
(4/pg 11)2.25 E(\2512012 Jef)142.155 E 2.25(fH)-.225 G(akner)-2.25 E/F1
13/Times-Bold@0 SF -.962(Ty)237.839 120 S(pes in C).962 E/F2 13
/Times-Italic@0 SF 1.475(This is not intended to be a compr)33.336 156 R
1.475(ehensive r)-.481 F(efer)-.481 E 1.475(ence on the C langua)-.481 F
1.735 -.13(ge, b)-.13 H 1.475(ut mer)-.13 F 1.476(ely to)-.481 F
(illustr)33.336 171 Q .415
(ate the issues facing the writer of a compiler for C.)-.195 F .414
(The r)6.914 F .414(eader is r)-.481 F(eferr)-.481 E .414(ed to the C)
-.481 F(langua)33.336 186 Q .26 -.13(ge s)-.13 H(tandar).13 E(d, the te)
-.481 E(xtbook, or Harbison & Steele)-.26 E(.)-.195 E/F3 13
/Times-Roman@0 SF 2.615(Central to the compiler')33.336 216 R 5.865(so)
-.715 G 2.615
(peration is the ability to represent C language data types,)-5.865 F
4.23(including potentially complicated types, and to manipulate and ana\
lyze these type)33.336 231 R 5.687(representations. T)33.336 246 R
(ypically)-1.04 E 5.687(,a)-.845 G 5.687(nA)-5.687 G 2.438
(ST is used to represent types as the)-5.687 F 5.688(ya)-.195 G 2.438
(re constructed)-5.688 F 1.571(within declarations or abstract type nam\
es \(used in prototypes and casting\).)33.336 261 R 1.57(ASTs can)8.07 F
(also be used to represent e)33.336 276 Q 3.25(xpressions. The)-.195 F
(AST can be queried in a number of w)3.25 E(ays:)-.13 E 3.25<8343>33.336
291 S(alculate the)-3.25 E/F4 13/Courier@0 SF -1.8(sizeof)2.35 G F3
(an e)4.15 E(xpression or type)-.195 E 7.726<8343>33.336 306 S 4.476
(alculate the resultant type when an operator is applied to a sube)
-7.726 F 4.476(xpression or)-.195 F(sube)33.336 321 Q(xpressions)-.195 E
3.25<8347>33.336 336 S(enerate code to calculate the v)-3.25 E
(alue \(rv)-.325 E(alue\) of an e)-.325 E(xpression)-.195 E 6.55<8347>
33.336 351 S 3.3(enerate code to calculate the lv)-6.55 F 3.299
(alue of an e)-.325 F 6.549(xpression. The)-.195 F(lv)6.549 E 3.299
(alue is a name or)-.325 F -.195(ex)33.336 366 S
(pression that can be used to store a v).195 E(alue.)-.325 E 3.25<8347>
33.336 381 S(enerate code to calculate the run-time address of an e)
-3.25 E(xpression)-.195 E .976(In the pages that follo)33.336 417 R
2.666 -.845(w, w)-.325 H 4.226(ew).845 G .977(ill see ho)-4.226 F 4.227
(wt)-.325 G .977(ypes can be represented with ASTs, and ho)-4.227 F(w)
-.325 E 4.574(some of the abo)33.336 432 R 4.964 -.195(ve a)-.195 H
4.574(nalysis can be performed.).195 F 4.573
(Some analyses, particularly those)11.073 F(in)33.336 447 Q -.26(vo)-.52
G(lving code generation, will be co).26 E -.195(ve)-.195 G
(red in later units.).195 E F1(Scalar types)233.575 477 Q F3 4.92(Cd)
33.336 513 S 1.67
(e\214nes certain basic, scalar arithmetic types: the inte)-4.92 F 1.671
(gers and the reals.)-.195 F 1.671(In C99, the)8.171 F(comple)33.336 528
Q 3.338(xt)-.195 G .088(ype is also de\214ned.)-3.338 F(Inte)6.588 E
.088(gers consist of char)-.195 F 3.337(,s)-.52 G .087
(hort, int, long and long long sizes.)-3.337 F 1.616(Although commonly \
these are represented in 8, 16, 32, 32 and 64 bits, the C standard)
33.336 543 R .746(does not require an)33.336 558 R 3.996(yp)-.195 G .746
(articular number of bits for an)-3.996 F 3.996(yg)-.195 G -2.795 -.325
(iv e)-3.996 H 3.995(nt).325 G 3.995(ype. In)-3.995 F -.13(fa)3.995 G
.745(ct, the int type is).13 F .983
(speci\214cally designed to be the "best" inte)33.336 573 R .983
(ger type for a certain tar)-.195 F .984(get architecture.)-.234 F .984
(On a)7.484 F(nati)33.336 588 Q .57 -.195(ve 6)-.325 H .18(4-bit system\
 this might be 64 bits, while at the other end of the spectrum, it migh\
t).195 F .026(be 16 bits for an embedded system.)33.336 603 R(Inte)6.526
E .026(ger types may be signed or unsigned.)-.195 F .026(By def)6.526 F
(ault,)-.13 E 1.176(all inte)33.336 618 R 1.175
(ger types are signed unless speci\214cally made unsigned by the)-.195 F
F4 -1.8(unsigned)3.525 G F3 -.13(ke)5.325 G(yw)-.065 E(ord)-.13 E .862
(\(or the appearance of a)33.336 633 R F4(U)3.212 E F3(suf)3.212 E .862
(\214x on an inte)-.325 F .862(ger constant\).)-.195 F .863(An e)7.362 F
.863(xception is made for)-.195 F F4 -1.8(char)3.213 G F3(,).9 E .208(w\
hich the C standard says may be either signed or unsigned \(most implem\
entations mak)33.336 648 R(e)-.13 E(it signed by def)33.336 663 Q 3.25
(ault\). The)-.13 F(C99 standard introduces _Bool as an inte)3.25 E
(ger type.)-.195 E 1.66(The C standard de\214nes three le)33.336 684 R
-.195(ve)-.325 G 1.661(ls of precision for non-inte).195 F 1.661
(ger arithmetic types: \215oat,)-.195 F 1.471(double and long double.)
33.336 699 R(Ag)7.971 E 1.471
(ain, the choice of representation and the e)-.065 F 1.471
(xact precision is)-.195 F 6.142(implementation-speci\214c. In)33.336
714 R 2.893(most cases, IEEE-754 \215oating point format is used, and)
6.142 F .523(\215oats are 32 bits long, doubles are 64 bits, and long d\
oubles may be 80 or 128 bits \(long)33.336 729 R 1.076(double w)33.336
744 R 1.076(as added in C99 and is not al)-.13 F -.13(wa)-.13 G 1.076
(ys supported on older systems\).).13 F 1.077(C99 comple)7.577 F(x)-.195
E 0 Cg EP
%%Page: 12 12
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 138.492(ECE466:Compilers Unit)33.336 60 R
(4/pg 12)2.25 E(\2512012 Jef)142.155 E 2.25(fH)-.225 G(akner)-2.25 E/F1
13/Times-Roman@0 SF 1.009(types lik)33.336 120 R -.325(ew)-.13 G 1.009
(ise can ha).325 F 1.399 -.195(ve \215)-.26 H 1.008
(oat, double or long double precision, and are in f).195 F 1.008
(act internally)-.13 F
(handled as a struct with a real and imaginary component.)33.336 135 Q
.299(While the types of v)33.336 156 R .299(ariables are e)-.325 F .299
(xplicitly declared, the compiler needs to kno)-.195 F 3.549(wt)-.325 G
.299(he types)-3.549 F .616(of constants.)33.336 171 R(The)7.116 E 3.866
(ym)-.195 G .616(ay be speci\214ed directly by the programmer using suf)
-3.866 F<8c78>-.325 E .616(es \(e.g. UL,)-.195 F 2.212
(LL\), or the type can be inferred by the v)33.336 186 R 2.213
(alue and kno)-.325 F 2.213(wledge of the ranges of v)-.325 F(alues)
-.325 E(representable in each type.)33.336 201 Q
(This is discussed further in the te)6.5 E(xts.)-.195 E(The)33.336 222 Q
/F2 13/Courier@0 SF -1.8(void)2.35 G F1(type is a special scalar type w\
hich is used to indicate the absence of a v)4.15 E(alue.)-.325 E 1.094
(This \214x)33.336 243 R 1.094
(ed set of arithmetic types suggests that, within the compiler)-.195 F
4.344(,as)-.52 G 1.093(ingle 8-bit w)-4.344 F(ord)-.13 E 1.266
(with bit \214elds could be used to represent them, or alternati)33.336
258 R -.195(ve)-.325 G 1.267(ly a bit-\214eld struct.).195 F(Man)7.767 E
(y)-.195 E 1.644(years ago, when memory w)33.336 273 R 1.643
(as scarce and compilers were v)-.13 F 1.643(ery "hea)-.195 F 1.643
(vy" programs, such)-.26 F(bit-packing tricks were essential.)33.336 288
Q/F3 13/Times-Bold@0 SF(Enum types)234.29 318 Q F1 .494
(enum types are equi)33.336 354 R -.325(va)-.325 G .494
(lent to ints in C.).325 F .495(It is ne)6.995 F -.195(ve)-.325 G 3.745
(ra).195 G 3.745(ne)-3.745 G .495(rror to assign an int to an enum or)
-3.745 F 2.061(vice v)33.336 369 R 2.061
(ersa, and no range checking is required.)-.195 F(Lik)8.561 E 5.311(es)
-.13 G 2.061(tructures and unions, enums are)-5.311 F .656(de\214ned on\
ce, possibly with an associated tag, and can be used later with a typed\
ef name)33.336 384 R 1.246(or the w)33.336 399 R(ord)-.13 E F2 -1.8
(enum)3.595 G F1(follo)5.395 E 1.245(wed by the tag.)-.325 F(Unlik)7.745
E 4.495(es)-.13 G 1.245(tructures or unions, the identi\214ers listed)
-4.495 F .068
(within the enum de\214nition are not in an independent scope, b)33.336
414 R .069(ut instead get placed into the)-.26 F 2.235
(symbol table currently in scope.)33.336 429 R 2.235
(enum constant names are in "e)8.735 F -.195(ve)-.325 G 2.235
(rything else" name).195 F .725(space and must be unique from v)33.336
444 R .725(ariable, function and typedef names visible in the same)-.325
F 5.523(scope. The)33.336 459 R 2.273(only moderately trick)5.523 F
5.522(yt)-.195 G 2.272(hing for the compiler is to k)-5.522 F 2.272
(eep track, during an)-.13 F .167(enum de\214nition, of the last inte)
33.336 474 R .167(ger v)-.195 F .167
(alue associated with the last constant name, so v)-.325 F(alues)-.325 E
(can automatically be assigned if not speci\214ed.)33.336 489 Q F3 -.962
(Ty)224.657 519 S(pe Quali\214ers).962 E F1 -1.04(Ty)33.336 555 S 2.838
(pe quali\214ers were \214rst introduced to the C language in ANSI C \(\
C-89\), with the)1.04 F 1.815(addition of the k)33.336 570 R -.195(ey)
-.13 G -.13(wo).195 G(rds).13 E F2 -1.8(const)4.165 G F1(and)5.965 E F2
-1.8(volatile)4.165 G F1 8.315(.T).9 G 1.816
(hese quali\214ers modify scalar)-8.315 F 5.066(,p)-.52 G(ointer)-5.066
E(,)-.52 E(array)33.336 585 Q 4.025(,s)-.845 G .775
(truct or union types, and must be "carried around" by the compiler)
-4.025 F 7.274(.C)-.715 G .774(99 added a)-7.274 F(ne)33.336 600 Q 4.33
(wq)-.325 G(uali\214er)-4.33 E F2 -1.8(restrict)3.43 G F1 1.081
(which can only be applied to pointer types \(and array types, b)5.23 F
(ut)-.26 E .322(only in prototypes\).)33.336 615 R .321
(Quali\214ers do not change the actual representation of a type, b)6.822
F .321(ut the)-.26 F(y)-.195 E 1.195
(do create compile-time restrictions on ho)33.336 630 R 4.445(wat)-.325
G 1.195(ype can be used, and pro)-4.445 F 1.196(vide hints to the)-.195
F(compiler for optimization.)33.336 645 Q F3(Composite T)219.97 675 Q
(ypes)-.962 E F1 .216(More complicated types are created from the basic\
 scalar types by applying pointer)33.336 705 R 3.466(,a)-.52 G(rray)
-3.466 E(or function declarators.)33.336 720 Q 0 Cg EP
%%Page: 13 13
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 138.492(ECE466:Compilers Unit)33.336 60 R
(4/pg 13)2.25 E(\2512012 Jef)142.155 E 2.25(fH)-.225 G(akner)-2.25 E/F1
13/Times-Bold@0 SF -.26(Po)244.358 120 S(inters).26 E/F2 13
/Times-Roman@0 SF -.52(Wi)33.336 156 S 1.704(thin the compiler).52 F
4.955(,ap)-.52 G 1.705
(ointer type can be represented with an AST node indicating a)-4.955 F
(pointer)33.336 171 Q 3.812(,a)-.52 G .562
(nd then a pointer to the underlying type.)-3.812 F .561
(Pointers can also ha)7.062 F .951 -.195(ve a q)-.26 H(uali\214er).195 E
3.811(,e)-.52 G(.g.)-3.811 E/F3 13/Courier@0 SF 2.856 -1.8
(int * const ip;)32.436 186 T F2 2.856
(declares a ponter which does not change, b)7.006 F 2.857
(ut which points to an)-.26 F(unquali\214ed int \(contrast w/)33.336 201
Q F3 -1.8(const int *ip;)2.35 G F2(\).).9 E F1(Arrays)247.842 231 Q F2
.509(An array type is slightly more complicated.)33.336 267 R .509
(The AST node must contain a pointer to the)7.009 F 2.166
(element type of the array \(the element type can not be a function, v)
33.336 282 R 2.167(oid, or a type of)-.26 F(unkno)33.336 297 Q 1.268(wn\
 size\), and there must be an indication of the array size \(number of \
elements\).)-.325 F 3.009(The size can be a speci\214c constant e)33.336
312 R 3.01(xpression kno)-.195 F 3.01(wn at compile-time, or it can be)
-.325 F(unkno)33.336 327 Q .856
(wn \(e.g. formal parameter to a function or referencing an e)-.325 F
.856(xtern array\).)-.195 F .856(C99 adds)7.356 F(comple)33.336 342 Q
.126(xity by allo)-.195 F .126(wing for v)-.325 F .126
(ariable-length arrays and v)-.325 F .126
(ariably-modi\214ed array types.)-.325 F(The)6.627 E 1.978
(size of the array is then tied to a potentially arbitrary e)33.336 357
R 1.977(xpression and is not kno)-.195 F 1.977(wn at)-.325 F .062
(compile time.)33.336 372 R .063(The compiler must insert run-time phan\
tom statements to compute the size)6.562 F .892(of the array)33.336 387
R 4.142(,a)-.845 G .891
(llocate storage for it \(when declaring an array v)-4.142 F .891
(ariable of v)-.325 F .891(ariable length\),)-.325 F 2.012
(and to perform proper pointer arithmetic.)33.336 402 R -1.443(Va)8.513
G 2.013(riable-length arrays are not permitted for)1.443 F -.195(ex)
33.336 417 S .692(tern or static storage class.).195 F .692
(The reason for this will become apparent when the typical)7.192 F .905
(assembly language and link)33.336 432 R .905(er directi)-.13 F -.195
(ve)-.325 G 4.156(sf).195 G .906(or declaring such v)-4.156 F .906
(ariables are co)-.325 F -.195(ve)-.195 G .906(red in Unit).195 F 4.198
(6. The)33.336 447 R .948(binding or computation of a v)4.198 F .948
(ariable-length type happens when the declarator is)-.325 F
(encountered, and is then \214x)33.336 462 Q 3.25(ed. Therefore:)-.195 F
/F4 10/Courier@0 SF(f\(\))33.336 474 Q({)33.336 486 Q(int x=5;)90.936
498 Q(int a[x];)90.936 510 Q(x=10;)90.936 522 Q
(printf\("%d\\n",sizeof a/sizeof \(int\)\);)90.936 534 Q(})33.336 546 Q
F2(gi)33.336 561 Q -.195(ve)-.325 G 4.429(st).195 G 1.179(he answer 5.)
-4.429 F 1.179(C99 allo)7.679 F 1.179
(ws for quali\214ers within an array declarator)-.325 F 4.43(,b)-.52 G
1.18(ut only when)-4.69 F .535(used in a function prototype, in which c\
ase the array type is automatically con)33.336 576 R -.195(ve)-.52 G
.534(rted to a).195 F(pointer type an)33.336 591 Q(yw)-.195 E(ay)-.13 E
(.)-.845 E F1(Functions)239.886 621 Q F2 4.028(Af)33.336 657 S .778(unc\
tion type needs a pointer to the return type \(functions may return an)
-4.028 F 4.029(yt)-.195 G .779(ype e)-4.029 F(xcept)-.195 E 1.904("arra\
y of..." or "function..."\) and a list of pointers to the types of the \
ar)33.336 672 R 5.154(guments. The)-.234 F .492(latter is the prototype\
 for the function, and is optional to retain compatibility with classic)
33.336 687 R 3.25(C. Therefore,)33.336 702 R(the declaration)3.25 E F4
(int f\(\);)33.336 714 Q F2 2.275
(declares that f is a function which returns int and tak)33.336 729 R
2.275(es an unspeci\214ed ar)-.13 F 2.275(gument list,)-.234 F(while)
33.336 744 Q 0 Cg EP
%%Page: 14 14
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 138.492(ECE466:Compilers Unit)33.336 60 R
(4/pg 14)2.25 E(\2512012 Jef)142.155 E 2.25(fH)-.225 G(akner)-2.25 E/F1
10/Courier@0 SF(int f\(void\);)33.336 117 Q/F2 13/Times-Roman@0 SF 3.576
(declares f speci\214cally as taking no ar)33.336 132 R 6.826
(guments. The)-.234 F 3.576(compiler must also handle the)6.826 F 1.06
(presence of the v)33.336 147 R 1.06(ariable ar)-.325 F 1.06
(gument list speci\214er)-.234 F/F3 13/Courier@0 SF -1.8(...)3.409 G F2
1.059(which may appear at the end of the)8.459 F(ar)33.336 162 Q
(gument list only)-.234 E(.)-.845 E/F4 13/Times-Bold@0 SF(Structur)
206.054 192 Q(es and unions)-.234 E F2 1.532(Structures and unions ha)
33.336 228 R 1.922 -.195(ve t)-.26 H 1.792 -.13(wo a).195 H 4.782
(spects. A).13 F/F5 13/Times-Italic@0 SF(de\214nition)4.782 E F2 1.532
(of a ne)4.782 F 4.782(ws)-.325 G 1.533(truct or union lists the)-4.782
F 1.807(members, and is similar to a list of v)33.336 243 R 1.807
(ariable declarations which might appear within a)-.325 F 4.984
(block. Each)33.336 258 R 1.734(de\214nition introduces a ne)4.984 F
3.424 -.845(w, d)-.325 H 1.734(istinct type.).845 F 1.734
(Once de\214ned, that type can be)8.234 F F5 -.481(re)33.336 273 S(fer)
.481 E(enced)-.481 E F2 2.745(to create v)5.995 F 2.745
(ariables of struct or union type, pointers to such, abstract type)-.325
F 1.598(names, etc.)33.336 288 R 1.598(There are tw)8.098 F 4.848(om)
-.13 G 1.598(echanisms for doing this: either saying the reserv)-4.848 F
1.598(ed w)-.195 F(ord)-.13 E F3 -1.8(struct)32.436 303 S F2(\(or)5.603
E F3 -1.8(union)3.803 G F2 4.703(\)f).9 G(ollo)-4.703 E 1.453
(wed by the tag, or by using a typedef alias.)-.325 F 1.452
(These methods are)7.952 F(equi)33.336 318 Q -.325(va)-.325 G 4.513
(lent. Struct/union).325 F 1.264
(de\214nitions can appear within a declaration, abstract type name)4.513
F .003(or cast, and need not ha)33.336 333 R .393 -.195(ve a t)-.26 H
3.253(ag. Ho).195 F(we)-.325 E -.195(ve)-.325 G 1.043 -.52(r, i).195 H
3.253(ft).52 G .003(he de\214nition has no tag and is not someho)-3.253
F(w)-.325 E(captured with a typedef, there is no w)33.336 348 Q
(ay to get back at it later)-.13 E(.)-.715 E 2.865(So, when the compile\
r encounters a struct or union de\214nition, it must create a ne)33.336
369 R(w)-.325 E .156(symbol table/scope, which can only contain identi\
\214ers of the identi\214er class)33.336 384 R F5(member)3.406 E F2
6.656(.I)C(.e.)-6.656 E .21(other identi\214er uses, such as v)33.336
399 R .21(ariable name, function name, label, etc. can not be installed)
-.325 F 1.823(into this mini-scope.)33.336 414 R 1.823
(The scope will be e)8.323 F 1.823
(xited at the closing brace of the struct/union)-.195 F 5.256
(de\214nition, b)33.336 429 R 5.257
(ut the underlying symbol table will not be destro)-.26 F 11.757
(yed. The)-.13 F(internal)8.507 E 1.779(representation of a struct/unio\
n type includes this symbol table, and also some helpful)33.336 444 R
(information such as the size of the struct/union and the tag \(if an)
33.336 459 Q(y\) which de\214nes it.)-.195 E 3.329(struct or union de\
\214nitions can be incomplete, i.e. there is no member list.)33.336 480
R 3.329(This is)9.829 F
(necessary for self-referential structures, e.g.:)33.336 495 Q F1 12({/)
33.336 507 S 6(/d)-12 G(ef of structs rooted in this scope)-6 E
(struct leaf;)90.936 519 Q(struct node {)90.936 543 Q
(struct leaf *leaf;)148.536 555 Q(struct node *node;)148.536 567 Q
(struct foo {)148.536 579 Q(int a;)206.136 591 Q 6(}b)148.536 603 S(ar;)
-6 E(};)90.936 615 Q(struct leaf {)90.936 639 Q(struct node *node;)
148.536 651 Q(struct leaf *leaf;)148.536 663 Q(struct leaf myself;)
148.536 675 Q(// NOT VALID, INCOMPLETE TYPE)1.2 E(};)90.936 687 Q
(struct foo f1;)90.936 711 Q(// struct foo defined above)146.4 E(})
33.336 723 Q F2 4.979(Incomplete struct/union types are a form of forw)
33.336 744 R 4.979(ard declaration, i.e.)-.13 F 4.979(use before)11.479
F 0 Cg EP
%%Page: 15 15
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 138.492(ECE466:Compilers Unit)33.336 60 R
(4/pg 15)2.25 E(\2512012 Jef)142.155 E 2.25(fH)-.225 G(akner)-2.25 E/F1
13/Times-Roman@0 SF 7.431(de\214nition. The)33.336 120 R 7.431(yc)-.195
G 4.181(an be used in an)-7.431 F 7.431(ys)-.195 G 4.182
(ituation where it is not necessary to kno)-7.431 F(w)-.325 E/F2 13
/Courier@0 SF -1.8(sizeof\(type\))32.436 135 S F1 7.239(.E).9 G .739
(.g. one can al)-7.239 F -.13(wa)-.13 G .738
(ys declare a pointer to an incomplete struct/union type,).13 F -.26(bu)
33.336 150 S 3.254(ti).26 G 3.254(ti)-3.254 G 3.254(sn)-3.254 G -2.795
-.325(ev e)-3.254 H 3.254(rv).325 G .005
(alid to declare an instance of the struct/union itself, whether a v)
-3.579 F .005(ariable or a)-.325 F 1.534(struct/union member)33.336 165
R 4.784(,w)-.52 G 1.534(hen that type is incomplete.)-4.784 F 1.534
(Nor w)8.034 F 1.534(ould an array of incomplete)-.13 F(structs be v)
33.336 180 Q(alid.)-.325 E 2.232(The syntax sho)33.336 201 R 2.232
(wn abo)-.325 F -.195(ve)-.195 G 5.482(,w).195 G 2.232
(ith a struct tag and nothing else, e.g.)-5.482 F F2 2.232 -1.8
(struct leaf;)7.832 H F1 5.483(,i).9 G 5.483(sa)-5.483 G 1.394
(special construction.)33.336 216 R 1.394
(It tells the compiler to hide an)7.894 F 4.644(yp)-.195 G(re-e)-4.644 E
1.394(xisting de\214nition of that tag)-.195 F 4.01(\(i.e. if)33.336 231
R F2 .76 -1.8(struct leaf)3.11 H F1 .761
(were visible outside of the outermost set of braces\) and start a ne)
4.91 F -.845(w,)-.325 G(incomplete de\214nition.)33.336 246 Q
(This construction does not w)6.5 E(ork for enum.)-.13 E .53(Installati\
on of the struct/union type de\214nition into the symbol table be)33.336
267 R .53(gins as soon as the)-.195 F(opening brace is seen.)33.336 282
Q(E.g.)6.5 E/F3 10/Courier@0 SF 12(1s)33.336 294 S(truct A {int a;})-12
E 12(2f)33.336 318 S(\(\))-12 E 12(3{)33.336 330 S 24(4s)33.336 342 S
(truct A {)-24 E 42(5s)33.336 354 S(truct A *p;)-42 E 42(6i)33.336 366 S
(nt b;} A1;)-42 E 24(7A)33.336 378 S(1.p= & A1;)-24 E 24(8A)33.336 390 S
(1.p->a = 1;)-24 E(//error: no such member a)13.2 E 12(9})33.336 402 S
F1 .533(At line 4, a ne)33.336 417 R 3.783(wi)-.325 G .533
(ncomplete de\214nition of struct A is be)-3.783 F .533
(gun in the scope of function f.)-.195 F(At)7.033 E 2.641(line 5, this \
incomplete de\214nition has hidden the de\214nition from line 1, theref\
ore the)33.336 432 R(member p refers to the de\214nition be)33.336 447 Q
3.25(gun on)-.195 F(line 4.)3.25 E 1.473(The de\214nition of a struct o\
r union is considered complete after the closing brace of its)33.336 483
R .708(member list.)33.336 498 R .708(Therefore, the member)7.208 F F2
-1.8(myself)3.058 G F1(abo)4.858 E 1.098 -.195(ve i)-.195 H 3.958(sn)
.195 G .708(ot v)-3.958 F .707(alid, because the de\214nition of)-.325 F
F2 .178 -1.8(struct leaf)32.436 513 T F1 .178(is not yet complete.)4.328
F .179(The compiler must be able to determine the sizeof each)6.678 F
(member)33.336 528 Q 6.883(,b)-.52 G 3.633(ecause it must allocate of)
-6.883 F 6.883(fsets. V)-.325 F 3.633
(ariable-size arrays can not be structure)-1.443 F 4.84(members. C99)
33.336 543 R(allo)4.84 E 1.59
(ws for one array of unspeci\214ed \([], not v)-.325 F 1.591
(ariable\) size to be the last)-.325 F .383(member of a structure.)
33.336 558 R .383(This le)6.883 F .382
(gitimizes a long-standing C programming trick of creating)-.195 F -.325
(va)33.336 573 S 3.457(riably sized structs which ha).325 F 3.847 -.195
(ve a b)-.26 H(uf)-.065 E 3.457(fer at the end.)-.325 F 3.457
(Refer to the te)9.957 F 3.458(xts for more)-.195 F(information.)33.336
588 Q(The "binding" of a particular struct or union type to its tag tak)
33.336 609 Q(es place once.)-.13 E(E.g.)6.5 E F3(f\(\))33.336 621 Q({)
33.336 633 Q(struct A {int a;};)39.336 645 Q(struct B {struct A *ap;};)
39.336 657 Q(/*...*/)39.336 669 Q({)39.336 681 Q(struct A {double z};)
51.336 693 Q(struct B b;)51.336 705 Q
(/* Contains a ptr to the struct A defined)146.4 E
(in the scope of function f\(\), NOT)281.736 717 Q
(the instance of struct A in this block scope */)281.736 729 Q 124.8
(b.ap=0; /*)90.936 741 R(Therefore this line works */)6 E 0 Cg EP
%%Page: 16 16
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 138.492(ECE466:Compilers Unit)33.336 60 R
(4/pg 16)2.25 E(\2512012 Jef)142.155 E 2.25(fH)-.225 G(akner)-2.25 E/F1
10/Courier@0 SF(})39.336 117 Q(})33.336 129 Q/F2 13/Times-Roman@0 SF
1.491(Members of structs and unions can')33.336 150 R 4.741(th)-.234 G
-2.925 -.26(av e)-4.741 H 1.491(storage classes, b)5.001 F 1.491(ut the)
-.26 F 4.741(yc)-.195 G 1.491(an ha)-4.741 F 1.881 -.195(ve q)-.26 H
(uali\214ers,).195 E 2.019(because quali\214ers are part of the type.)
33.336 165 R 2.02(Since only members can be declared within a)8.52 F
1.137(struct/union de\214nition, use of a typedef is not permitted with\
in the de\214nition, nor can a)33.336 180 R .907
(member be de\214ned that has function type.)33.336 195 R(An)7.407 E
4.157(yn)-.195 G .907(ested struct, union or enum de\214nitions)-4.157 F
.522(are placed in the nearest enclosing \(\214le, function, block or p\
rototype\) scope.)33.336 210 R .521(This is true)7.022 F(re)33.336 225 Q
-.065(ga)-.195 G 2.306(rdless of ho).065 F 5.556(wd)-.325 G 2.306
(eeply nested these de\214nitions are.)-5.556 F 2.307
(If this were not the case, the)8.807 F(y)-.195 E -.13(wo)33.336 240 S
.501(uld not be visible outside of the member list, and w).13 F .5
(ould be f)-.13 F .5(airly useless.)-.13 F .5(Note in the)7 F -.195(ex)
33.336 255 S(ample abo).195 E .39 -.195(ve t)-.195 H(he de\214nition of)
.195 E/F3 13/Courier@0 SF -1.8(struct foo)2.35 G F2 6.5(.A).9 G
(nother e)-6.5 E(xample:)-.195 E F1(int f\(struct foo {int a;} *p\))
33.336 279 Q({)33.336 291 Q(struct foo q;)51.336 303 Q(//OK)76.8 E 73.2
(q.a=1; //OK)90.936 315 R(})33.336 327 Q(struct foo z;)33.336 351 Q
(//ERROR)152.4 E(int g\(\))33.336 375 Q({)33.336 387 Q
(struct foo {int a;} b;)81.336 399 Q 140.4(f\(&b\); //UGLY,)81.336 411 R
(WORKS)6 E(})33.336 423 Q F2 2.982(The de\214nition of structure tag)
33.336 456 R F3 -1.8(foo)5.332 G F2 2.983
(occurs inside of a prototype scope.)7.132 F 2.983(Because the)9.483 F
.209(declarator for)33.336 471 R F3(f)2.559 E F2 .208
(is a function de\214nition, this prototype scope, in ef)2.559 F .208
(fect, gets "promoted" to)-.325 F 4.245(af)33.336 486 S .995
(unction scope.)-4.245 F .995(Another w)7.495 F .996
(ay of looking at it is that it w)-.13 F .996
(as a function scope all along,)-.13 F -.26(bu)33.336 501 S 4.124(ti).26
G 4.124(np)-4.124 G .874(ractical terms, it is not possible during pars\
ing to determine whether a particular)-4.124 F .312(function declarator\
 is going to be merely a prototyped declaration of the function')33.336
516 R 3.562(sr)-.715 G(eturn)-3.562 E -.325(va)33.336 531 S .87
(lue and parameter list, or is going to be follo).325 F .869
(wed by a pair of braces gi)-.325 F .869(ving the actual)-.325 F 1.956
(function de\214nition.)33.336 546 R 1.956(Either w)8.456 F(ay)-.13 E
5.206(,t)-.845 G 1.956(he de\214nition of)-5.206 F F3 1.957 -1.8
(struct foo)4.307 H F2 1.957(is v)6.107 F 1.957(alid until the closing)
-.325 F .569(brace of the function)33.336 561 R F3(f)2.919 E F2 7.069
(.I)-.9 G 3.819(ti)-7.069 G 3.819(sn)-3.819 G .569
(ot visible in \214le scope and thus the last line is an error)-3.819 F
7.069(.I)-.715 G(n)-7.069 E .973(addition, there is no v)33.336 576 R
.973(alid w)-.325 F .973
(ay to call function f with a matching prototype, because the)-.13 F
.889(de\214nition of)33.336 591 R F3 .889 -1.8(struct foo)3.239 H F2
4.139(disappears. While)5.039 F .888
(one could lay out another structure with the)4.139 F -.195(ex)33.336
606 S 2.218(act same member list, it is still not the identical type.)
.195 F -.195(Fo)8.718 G 5.468(rt).195 G 2.218(his reason, including a)
-5.468 F 2.774(structure or union de\214nition inside of a prototype is\
 considered bad practice.)33.336 621 R(These)9.274 E .449(peculiarities\
 should illustrate that a compiler must be careful about the nesting of\
 scopes.)33.336 636 R/F4 13/Times-Bold@0 SF(AST type r)162.803 666 Q
(epr)-.234 E(esentation vs parse tr)-.234 E(ee)-.234 E F2(Belo)33.336
702 Q 3.25(wi)-.325 G 3.25(sap)-3.25 G
(ossible AST representation of the follo)-3.25 E(wing code)-.325 E 0 Cg
EP
%%Page: 17 17
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 138.492(ECE466:Compilers Unit)33.336 60 R
(4/pg 17)2.25 E(\2512012 Jef)142.155 E 2.25(fH)-.225 G(akner)-2.25 E/F1
10/Courier@0 SF(struct s1 {)33.336 117 Q(int z;)90.936 129 Q 6(}*\()
33.336 141 S(*p[10]\)\(int, double\);)-6 E 0 0 415 415 -447 447 59.836
615 PBEGIN
%%BeginDocument: typesast.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Title: typesast.fig
%%Creator: fig2dev Version 3.2 Patchlevel 4
%%CreationDate: Thu Oct 16 22:24:07 2008
%%For: hak@lex ()
%%BoundingBox: 0 0 415 447
%%Magnification: 1.0000
%%EndComments
/$F2psDict 200 dict def
$F2psDict begin
$F2psDict /mtrx matrix put
/col-1 {0 setgray} bind def
/col0 {0.000 0.000 0.000 srgb} bind def
/col1 {0.000 0.000 1.000 srgb} bind def
/col2 {0.000 1.000 0.000 srgb} bind def
/col3 {0.000 1.000 1.000 srgb} bind def
/col4 {1.000 0.000 0.000 srgb} bind def
/col5 {1.000 0.000 1.000 srgb} bind def
/col6 {1.000 1.000 0.000 srgb} bind def
/col7 {1.000 1.000 1.000 srgb} bind def
/col8 {0.000 0.000 0.560 srgb} bind def
/col9 {0.000 0.000 0.690 srgb} bind def
/col10 {0.000 0.000 0.820 srgb} bind def
/col11 {0.530 0.810 1.000 srgb} bind def
/col12 {0.000 0.560 0.000 srgb} bind def
/col13 {0.000 0.690 0.000 srgb} bind def
/col14 {0.000 0.820 0.000 srgb} bind def
/col15 {0.000 0.560 0.560 srgb} bind def
/col16 {0.000 0.690 0.690 srgb} bind def
/col17 {0.000 0.820 0.820 srgb} bind def
/col18 {0.560 0.000 0.000 srgb} bind def
/col19 {0.690 0.000 0.000 srgb} bind def
/col20 {0.820 0.000 0.000 srgb} bind def
/col21 {0.560 0.000 0.560 srgb} bind def
/col22 {0.690 0.000 0.690 srgb} bind def
/col23 {0.820 0.000 0.820 srgb} bind def
/col24 {0.500 0.190 0.000 srgb} bind def
/col25 {0.630 0.250 0.000 srgb} bind def
/col26 {0.750 0.380 0.000 srgb} bind def
/col27 {1.000 0.500 0.500 srgb} bind def
/col28 {1.000 0.630 0.630 srgb} bind def
/col29 {1.000 0.750 0.750 srgb} bind def
/col30 {1.000 0.880 0.880 srgb} bind def
/col31 {1.000 0.840 0.000 srgb} bind def

end
save
newpath 0 447 moveto 0 0 lineto 415 0 lineto 415 447 lineto closepath clip newpath
-202.5 441.7 translate
1 -1 scale

/cp {closepath} bind def
/ef {eofill} bind def
/gr {grestore} bind def
/gs {gsave} bind def
/sa {save} bind def
/rs {restore} bind def
/l {lineto} bind def
/m {moveto} bind def
/rm {rmoveto} bind def
/n {newpath} bind def
/s {stroke} bind def
/sh {show} bind def
/slc {setlinecap} bind def
/slj {setlinejoin} bind def
/slw {setlinewidth} bind def
/srgb {setrgbcolor} bind def
/rot {rotate} bind def
/sc {scale} bind def
/sd {setdash} bind def
/ff {findfont} bind def
/sf {setfont} bind def
/scf {scalefont} bind def
/sw {stringwidth} bind def
/tr {translate} bind def
/tnt {dup dup currentrgbcolor
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add srgb}
  bind def
/shd {dup dup currentrgbcolor 4 -2 roll mul 4 -2 roll mul
  4 -2 roll mul srgb} bind def
/$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def
/$F2psEnd {$F2psEnteredState restore end} def

$F2psBegin
10 setmiterlimit
0 slj 0 slc
 0.06000 0.06000 sc
%
% Fig objects follow
%
% 
% here starts figure with depth 50
% Polyline
7.500 slw
n 7200 1725 m 7350 1725 l 7350 2925 l 7200 2925 l
 cp gs col0 s gr 
% Polyline
n 7200 1725 m 7350 1725 l 7350 1875 l 7200 1875 l
 cp gs col0 s gr 
% Polyline
n 7200 2025 m 7350 2025 l 7350 2175 l 7200 2175 l
 cp gs col0 s gr 
% Polyline
n 7200 2325 m 7350 2325 l 7350 2475 l 7200 2475 l
 cp gs col0 s gr 
% Polyline
n 7200 2625 m 7350 2625 l 7350 2775 l 7200 2775 l
 cp gs col0 s gr 
% Polyline
n 6825 1050 m 7650 1050 l 7650 1575 l 6825 1575 l
 cp gs col0 s gr 
% Polyline
n 4125 825 m 4275 825 l 4275 2025 l 4125 2025 l
 cp gs col0 s gr 
% Polyline
n 4125 825 m 4275 825 l 4275 975 l 4125 975 l
 cp gs col0 s gr 
% Polyline
n 4125 1125 m 4275 1125 l 4275 1275 l 4125 1275 l
 cp gs col0 s gr 
% Polyline
n 4125 1425 m 4275 1425 l 4275 1575 l 4125 1575 l
 cp gs col0 s gr 
% Polyline
n 4125 1725 m 4275 1725 l 4275 1875 l 4125 1875 l
 cp gs col0 s gr 
% Polyline
n 8325 5625 m 8475 5625 l 8475 6825 l 8325 6825 l
 cp gs col0 s gr 
% Polyline
n 8325 5625 m 8475 5625 l 8475 5775 l 8325 5775 l
 cp gs col0 s gr 
% Polyline
n 8325 5925 m 8475 5925 l 8475 6075 l 8325 6075 l
 cp gs col0 s gr 
% Polyline
n 8325 6225 m 8475 6225 l 8475 6375 l 8325 6375 l
 cp gs col0 s gr 
% Polyline
n 8325 6525 m 8475 6525 l 8475 6675 l 8325 6675 l
 cp gs col0 s gr 
% Polyline
gs  clippath
5340 930 m 5340 870 l 5188 870 l 5308 900 l 5188 930 l cp
eoclip
n 4200 900 m
 5325 900 l gs col0 s gr gr

% arrowhead
n 5188 930 m 5308 900 l 5188 870 l  col0 s
% Polyline
n 5325 750 m 6225 750 l 6225 1500 l 5325 1500 l
 cp gs col0 s gr 
% Polyline
gs  clippath
6840 1305 m 6840 1245 l 6688 1245 l 6808 1275 l 6688 1305 l cp
eoclip
n 5850 1275 m
 6825 1275 l gs col0 s gr gr

% arrowhead
n 6688 1305 m 6808 1275 l 6688 1245 l  col0 s
% Polyline
n 8250 1725 m 9150 1725 l 9150 2475 l 8250 2475 l
 cp gs col0 s gr 
% Polyline
n 9150 3075 m 10050 3075 l 10050 3825 l 9150 3825 l
 cp gs col0 s gr 
% Polyline
gs  clippath
9510 3105 m 9557 3067 l 9463 2949 l 9515 3062 l 9416 2987 l cp
eoclip
n 8925 2325 m
 9525 3075 l gs col0 s gr gr

% arrowhead
n 9416 2987 m 9515 3062 l 9463 2949 l  col0 s
% Polyline
gs  clippath
8265 1830 m 8265 1770 l 8113 1770 l 8233 1800 l 8113 1830 l cp
eoclip
n 7275 1800 m
 8250 1800 l gs col0 s gr gr

% arrowhead
n 8113 1830 m 8233 1800 l 8113 1770 l  col0 s
% Polyline
gs  clippath
4625 3322 m 4683 3305 l 4639 3160 l 4645 3284 l 4581 3177 l cp
eoclip
n 4200 1800 m
 4650 3300 l gs col0 s gr gr

% arrowhead
n 4581 3177 m 4645 3284 l 4639 3160 l  col0 s
% Polyline
n 4650 3300 m 5550 3300 l 5550 4050 l 4650 4050 l
 cp gs col0 s gr 
% Polyline
n 5400 4725 m 6300 4725 l 6300 5475 l 5400 5475 l
 cp gs col0 s gr 
% Polyline
n 6675 4725 m 7575 4725 l 7575 5475 l 6675 5475 l
 cp gs col0 s gr 
% Polyline
gs  clippath
6703 4818 m 6672 4766 l 6542 4842 l 6661 4808 l 6572 4894 l cp
eoclip
n 5775 5325 m
 6675 4800 l gs col0 s gr gr

% arrowhead
n 6572 4894 m 6661 4808 l 6542 4842 l  col0 s
% Polyline
n 8025 4725 m 8925 4725 l 8925 5475 l 8025 5475 l
 cp gs col0 s gr 
% Polyline
n 9375 4725 m 10275 4725 l 10275 5475 l 9375 5475 l
 cp gs col0 s gr 
% Polyline
gs  clippath
5574 1552 m 5517 1568 l 5559 1714 l 5555 1591 l 5616 1698 l cp
eoclip
n 9975 5175 m 5850 2625 l
 5550 1575 l gs col0 s gr gr

% arrowhead
n 5616 1698 m 5555 1591 l 5559 1714 l  col0 s
% Polyline
gs  clippath
9397 4974 m 9381 4917 l 9235 4956 l 9359 4954 l 9251 5014 l cp
eoclip
n 8550 5175 m
 9375 4950 l gs col0 s gr gr

% arrowhead
n 9251 5014 m 9359 4954 l 9235 4956 l  col0 s
% Polyline
gs  clippath
7977 4819 m 7948 4766 l 7815 4839 l 7935 4808 l 7844 4891 l cp
eoclip
n 7125 5250 m
 7950 4800 l gs col0 s gr gr

% arrowhead
n 7844 4891 m 7935 4808 l 7815 4839 l  col0 s
% Polyline
n 3750 150 m 4575 150 l 4575 675 l 3750 675 l
 cp gs col0 s gr 
% Polyline
gs  clippath
8292 5708 m 8351 5720 l 8380 5572 l 8328 5684 l 8322 5560 l cp
eoclip
n 8400 5325 m
 8325 5700 l gs col0 s gr gr

% arrowhead
n 8322 5560 m 8328 5684 l 8380 5572 l  col0 s
% Polyline
n 9375 5625 m 10275 5625 l 10275 6375 l 9375 6375 l
 cp gs col0 s gr 
% Polyline
n 9375 6600 m 10275 6600 l 10275 7350 l 9375 7350 l
 cp gs col0 s gr 
% Polyline
gs  clippath
9390 5730 m 9390 5670 l 9238 5670 l 9358 5700 l 9238 5730 l cp
eoclip
n 8400 5700 m
 9375 5700 l gs col0 s gr gr

% arrowhead
n 9238 5730 m 9358 5700 l 9238 5670 l  col0 s
% Polyline
gs  clippath
9367 6707 m 9405 6661 l 9289 6563 l 9362 6664 l 9251 6609 l cp
eoclip
n 8400 5850 m
 9375 6675 l gs col0 s gr gr

% arrowhead
n 9251 6609 m 9362 6664 l 9289 6563 l  col0 s
% Polyline
gs  clippath
5455 4752 m 5508 4723 l 5435 4590 l 5467 4710 l 5383 4619 l cp
eoclip
n 5025 3900 m
 5475 4725 l gs col0 s gr gr

% arrowhead
n 5383 4619 m 5467 4710 l 5435 4590 l  col0 s
/Times-Roman ff 200.00 scf sf
5775 975 m
gs 1 -1 sc (STRUCT) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
8700 1950 m
gs 1 -1 sc (MEMB) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
5700 1200 m
gs 1 -1 sc ("s1") dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
8625 2175 m
gs 1 -1 sc ("z") dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
9600 3300 m
gs 1 -1 sc (SCALAR) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
9525 3600 m
gs 1 -1 sc (int) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
5100 3525 m
gs 1 -1 sc (VAR) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
5100 3750 m
gs 1 -1 sc ("p") dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
5775 4950 m
gs 1 -1 sc (ARRAY) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
5700 5175 m
gs 1 -1 sc (#=10) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
7125 4950 m
gs 1 -1 sc (PTR) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
8325 4950 m
gs 1 -1 sc (FN) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
9825 4950 m
gs 1 -1 sc (PTR) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
9825 5850 m
gs 1 -1 sc (SCALAR) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
9825 6825 m
gs 1 -1 sc (SCALAR) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
9750 6225 m
gs 1 -1 sc (int) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
9750 7125 m
gs 1 -1 sc (double) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Italic ff 200.00 scf sf
3375 75 m
gs 1 -1 sc (global scope) col0 sh gr
% here ends figure;
$F2psEnd
rs
showpage
%%EndDocument
end PEND/F2 13/Times-Roman@0 SF .161(One of the challenges in construct\
ing this representation is the nature of the C declaration)33.336 642 R
(syntax, which is "inside-out".)33.336 657 Q 3.25(ACd)6.5 G
(eclaration is of the form:)-3.25 E F1(declaration:)33.336 669 Q 34.8
(declaration_specifiers declarator_list)90.936 681 R(';')6 E F2 3.696(T\
he declaration_speci\214ers may contain simple type speci\214ers, such \
as)33.336 702 R/F3 13/Courier@0 SF -1.8(int)6.047 G F2 6.947(,t).9 G
(ypedef)-6.947 E 2.896(names, or struct/union/enum references \(possibl\
y with an embedded de\214nition\).)33.336 717 R(The)9.396 E .025
(speci\214ers may also be modi\214ed by quali\214ers \(e.g. const, v)
33.336 732 R .025(olatile, restrict\) or storage class.)-.26 F 0 Cg EP
%%Page: 18 18
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 138.492(ECE466:Compilers Unit)33.336 60 R
(4/pg 18)2.25 E(\2512012 Jef)142.155 E 2.25(fH)-.225 G(akner)-2.25 E/F1
13/Times-Roman@0 SF 3.299
(The declarator is a limited subset of the general C e)33.336 120 R
3.299(xpression syntax, as described)-.195 F(pre)33.336 135 Q
(viously \("Declarators and Abstract Declarators"\))-.325 E
(Unfortunately)33.336 156 Q 5.022(,t)-.845 G 1.772(he AST which w)-5.022
F 1.773(ould be b)-.13 F 1.773(uilt "naturally" by e)-.26 F -.325(va)
-.325 G 1.773(luating the declaration).325 F(comes out wrong:)33.336 171
Q 0 0 291 291 -266 266 121.836 458 PBEGIN
%%BeginDocument: parsetree-wrong.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Title: parsetree-wrong.fig
%%Creator: fig2dev Version 3.2 Patchlevel 4
%%CreationDate: Thu Oct 11 21:58:21 2012
%%For: hak@lex ()
%%BoundingBox: 0 0 291 266
%%Magnification: 1.0000
%%EndComments
/$F2psDict 200 dict def
$F2psDict begin
$F2psDict /mtrx matrix put
/col-1 {0 setgray} bind def
/col0 {0.000 0.000 0.000 srgb} bind def
/col1 {0.000 0.000 1.000 srgb} bind def
/col2 {0.000 1.000 0.000 srgb} bind def
/col3 {0.000 1.000 1.000 srgb} bind def
/col4 {1.000 0.000 0.000 srgb} bind def
/col5 {1.000 0.000 1.000 srgb} bind def
/col6 {1.000 1.000 0.000 srgb} bind def
/col7 {1.000 1.000 1.000 srgb} bind def
/col8 {0.000 0.000 0.560 srgb} bind def
/col9 {0.000 0.000 0.690 srgb} bind def
/col10 {0.000 0.000 0.820 srgb} bind def
/col11 {0.530 0.810 1.000 srgb} bind def
/col12 {0.000 0.560 0.000 srgb} bind def
/col13 {0.000 0.690 0.000 srgb} bind def
/col14 {0.000 0.820 0.000 srgb} bind def
/col15 {0.000 0.560 0.560 srgb} bind def
/col16 {0.000 0.690 0.690 srgb} bind def
/col17 {0.000 0.820 0.820 srgb} bind def
/col18 {0.560 0.000 0.000 srgb} bind def
/col19 {0.690 0.000 0.000 srgb} bind def
/col20 {0.820 0.000 0.000 srgb} bind def
/col21 {0.560 0.000 0.560 srgb} bind def
/col22 {0.690 0.000 0.690 srgb} bind def
/col23 {0.820 0.000 0.820 srgb} bind def
/col24 {0.500 0.190 0.000 srgb} bind def
/col25 {0.630 0.250 0.000 srgb} bind def
/col26 {0.750 0.380 0.000 srgb} bind def
/col27 {1.000 0.500 0.500 srgb} bind def
/col28 {1.000 0.630 0.630 srgb} bind def
/col29 {1.000 0.750 0.750 srgb} bind def
/col30 {1.000 0.880 0.880 srgb} bind def
/col31 {1.000 0.840 0.000 srgb} bind def

end
save
newpath 0 266 moveto 0 0 lineto 291 0 lineto 291 266 lineto closepath clip newpath
-155.5 306.0 translate
1 -1 scale

/cp {closepath} bind def
/ef {eofill} bind def
/gr {grestore} bind def
/gs {gsave} bind def
/sa {save} bind def
/rs {restore} bind def
/l {lineto} bind def
/m {moveto} bind def
/rm {rmoveto} bind def
/n {newpath} bind def
/s {stroke} bind def
/sh {show} bind def
/slc {setlinecap} bind def
/slj {setlinejoin} bind def
/slw {setlinewidth} bind def
/srgb {setrgbcolor} bind def
/rot {rotate} bind def
/sc {scale} bind def
/sd {setdash} bind def
/ff {findfont} bind def
/sf {setfont} bind def
/scf {scalefont} bind def
/sw {stringwidth} bind def
/tr {translate} bind def
/tnt {dup dup currentrgbcolor
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add srgb}
  bind def
/shd {dup dup currentrgbcolor 4 -2 roll mul 4 -2 roll mul
  4 -2 roll mul srgb} bind def
/$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def
/$F2psEnd {$F2psEnteredState restore end} def

$F2psBegin
10 setmiterlimit
0 slj 0 slc
 0.06000 0.06000 sc
%
% Fig objects follow
%
% 
% here starts figure with depth 50
% Polyline
7.500 slw
n 4725 900 m
 4200 975 l gs col0 s gr 
% Polyline
n 5400 900 m
 5400 1050 l gs col0 s gr 
% Polyline
n 3600 1275 m
 3375 1650 l gs col0 s gr 
% Polyline
n 5850 1275 m
 6000 1575 l gs col0 s gr 
% Polyline
n 6000 1875 m
 6000 2025 l gs col0 s gr 
% Polyline
n 5850 2250 m
 5250 2475 l gs col0 s gr 
% Polyline
n 5925 2250 m
 5925 2475 l gs col0 s gr 
% Polyline
n 5925 2700 m
 5925 2850 l gs col0 s gr 
% Polyline
n 5475 3000 m
 4950 3150 l gs col0 s gr 
% Polyline
n 5850 3075 m
 5700 3150 l gs col0 s gr 
% Polyline
n 6225 3075 m
 6225 3150 l gs col0 s gr 
% Polyline
n 6450 3075 m
 6900 3225 l gs col0 s gr 
% Polyline
n 4800 3450 m
 4800 3600 l gs col0 s gr 
% Polyline
n 4800 3825 m
 4800 3975 l gs col0 s gr 
% Polyline
n 4275 4275 m
 4200 4425 l gs col0 s gr 
% Polyline
n 4875 4275 m
 4875 4350 l gs col0 s gr 
% Polyline
n 5250 4275 m
 5475 4350 l gs col0 s gr 
% Polyline
n 5850 4200 m
 6300 4350 l gs col0 s gr 
% Polyline
n 4050 4650 m
 4050 4950 l gs col0 s gr 
/Times-Roman ff 200.00 scf sf
5400 825 m
gs 1 -1 sc (declaration) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
3900 1200 m
gs 1 -1 sc (decl_specs) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
5700 1200 m
gs 1 -1 sc (declarator_list) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
7350 1200 m
gs 1 -1 sc (';') dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
3300 1800 m
gs 1 -1 sc (struct_definition) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
3000 2400 m
gs 1 -1 sc (etc) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
6000 1800 m
gs 1 -1 sc (declarator) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
6000 2175 m
gs 1 -1 sc (pointer_declarator) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
5100 2625 m
gs 1 -1 sc ('*') dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
6000 2625 m
gs 1 -1 sc (declarator) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
6000 3000 m
gs 1 -1 sc (func_declarator) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
4800 3375 m
gs 1 -1 sc (declarator) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
5700 3375 m
gs 1 -1 sc ('\(') dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
6300 3375 m
gs 1 -1 sc (prototype) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
7125 3375 m
gs 1 -1 sc ('\)') dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
6300 3750 m
gs 1 -1 sc (etc.) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
4800 3750 m
gs 1 -1 sc (pointer_declarator) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
4800 4200 m
gs 1 -1 sc (array_declarator) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
3975 4575 m
gs 1 -1 sc (declarator) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
4875 4575 m
gs 1 -1 sc ('[') dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
5625 4500 m
gs 1 -1 sc (expr) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
6450 4500 m
gs 1 -1 sc (']') dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
3900 5100 m
gs 1 -1 sc (IDENT) dup sw pop 2 div neg 0 rm  col0 sh gr
% here ends figure;
$F2psEnd
rs
showpage
%%EndDocument
end PEND .785(There are classically a number of dif)33.336 485 R .785
(ferent approaches for rectifying this when writing a)-.325 F 4.29(Cc)
33.336 500 S(ompiler)-4.29 E 7.54(.O)-.715 G 1.04(ne method is to allo)
-7.54 F 4.29(wt)-.325 G 1.04(he AST to be b)-4.29 F 1.04(uilt "backw)
-.26 F 1.04(ards", and then mak)-.13 F 4.29(ea)-.13 G 1.434
(second pass to re)33.336 515 R -.195(ve)-.325 G 1.434(rse it.).195 F
1.434(Another method is to use, as the semantic v)7.934 F 1.434
(alue of the rules)-.325 F(in)33.336 530 Q -.26(vo)-.52 G(lv).26 E .543
(ed in a declaration, a pair of AST node pointers, one of which tracks \
the "deepest")-.195 F 1.813
(node, the other which tracks the "top" frontier)33.336 545 R 5.063(,a)
-.52 G 1.812(nd use these pointers to construct the)-5.063 F
(AST the correct w)33.336 560 Q(ay)-.13 E 6.5(.T)-.845 G
(his is not an e)-6.5 E(xhausti)-.195 E .39 -.195(ve l)-.325 H
(ist of approaches.).195 E/F2 13/Times-Bold@0 SF -.962(Ty)242.538 605 S
(pedefs).962 E F1 1.386(The use of the)33.336 641 R/F3 13/Courier@0 SF
-1.8(typedef)3.736 G F1 -.13(ke)5.536 G(yw)-.065 E 1.387
(ord in a declaration causes an)-.13 F 4.637(yi)-.195 G 1.387
(denti\214ers declared in that)-4.637 F .264
(declaration to be installed into the symbol table as typedef names.)
33.336 656 R .263(The typedef name can)6.763 F 3.256(then be used in a \
subsequent declaration, or abstract type name, and is completely)33.336
671 R(identical to the original type.)33.336 686 Q 4.619(As)33.336 707 S
1.369(torage class k)-4.619 F -.195(ey)-.13 G -.13(wo).195 G 1.369
(rd can not appear in conjunction with).13 F F3 -1.8(typedef)3.718 G F1
-.13(ke)5.518 G(yw)-.065 E 1.368(ord, because)-.13 F 1.65
(typedef names do not ha)33.336 722 R 2.04 -.195(ve a s)-.26 H 1.65
(torage class, nor do the).195 F 4.9(yc)-.195 G 1.651
(apture a storage class for use)-4.9 F(later)33.336 737 Q(.)-.715 E 0 Cg
EP
%%Page: 19 19
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 138.492(ECE466:Compilers Unit)33.336 60 R
(4/pg 19)2.25 E(\2512012 Jef)142.155 E 2.25(fH)-.225 G(akner)-2.25 E/F1
13/Times-Roman@0 SF 1.191(Although one can create a typedef of type fun\
ction, the "function-ness" inherent in that)33.336 120 R
(typedef name can not be used to de\214ne a function.)33.336 135 Q(E.g.)
6.5 E/F2 10/Courier@0 SF(typedef int ftd\(void\);)33.336 147 Q(ftd *fp;)
33.336 171 Q(//OK)9.6 E(ftd f)33.336 195 Q(//ERROR)85.2 E({)33.336 207 Q
(/*...*/)90.936 219 Q(})33.336 231 Q F1 1.28(In C-99, v)33.336 267 R
1.28(ariable-length arrays introduce a ne)-.325 F 4.53(ww)-.325 G 4.53
(rinkle. The)-4.53 F 1.28(dimension of the array is)4.53 F .897
(calculated at the time of the typedef, and remains static thereafter)
33.336 282 R 7.397(.T)-.715 G .897(he array dimension)-7.397 F
(is not recalculated when the typedef name is used to declare a v)33.336
297 Q(ariable.)-.325 E F2(int x=3;)33.336 309 Q(main\(\))33.336 333 Q({)
33.336 345 Q(typedef int a[x];)33.336 357 Q({)81.336 369 Q(int x=5;)
93.336 381 Q 6(aa)93.336 393 S(ry;)-6 E(printf\("%d\\n",sizeof ary\);)
129.336 405 Q(//prints 12)93.6 E(})81.336 417 Q(})33.336 429 Q/F3 13
/Times-Bold@0 SF(Br)156.608 444 Q(eaking the Lexer Abstraction Barrier)
-.234 E F1 .979(In a perfect w)33.336 480 R .979(orld, the le)-.13 F .98
(xical analyzer w)-.195 F .98
(ould stand alone, feeding a sequence of tok)-.13 F(ens)-.13 E 1.268
(as demanded to the parser)33.336 495 R 7.768(.H)-.715 G -.325(ow)-7.768
G -2.795 -.325(ev e).325 H 2.308 -.52(r, i).325 H 4.518(na).52 G 1.658
-.195(ny l)-4.518 H 1.268(anguage, there are often constructs which).195
F(are dif)33.336 510 Q
(\214cult to parse while adhering strictly to this model.)-.325 E
(Consider:)9.75 E F2(typedef int itd;)33.336 522 Q(/*...*/)33.336 534 Q
(f\(\))33.336 546 Q({)33.336 558 Q(itd \(x\);)90.936 570 Q(})33.336 582
Q F1 4.79(Ah)33.336 597 S 1.541(uman reading this code w)-4.79 F 1.541
(ould hopefully recognize that)-.13 F/F4 13/Courier@0 SF -1.8(itd)3.891
G F1 1.541(is a typedef name, and)5.691 F .235(therefore the line of co\
de within the function f is a declaration of a v)33.336 612 R(ariable)
-.325 E F4(x)2.585 E F1 .235(as type)2.585 F F4 -1.8(int)2.585 G F1(.).9
E 1.277(\(the parentheses are redundant b)33.336 627 R 1.278
(ut are in this e)-.26 F 1.278
(xample to force the issue of ambiguity!\))-.195 F(Ho)33.336 642 Q(we)
-.325 E -.195(ve)-.325 G 3.124 -.52(r, i).195 H 5.334(ft).52 G 2.084
(he le)-5.334 F -.195(xe)-.195 G 5.334(rs).195 G 2.084
(imply returns IDENT as the tok)-5.334 F 2.084(en class for)-.13 F F4
-1.8(itd)4.434 G F1 5.333(,t).9 G 2.083(his syntax is)-5.333 F 1.82
(indistinguishable from a function call.)33.336 657 R 1.82
(While stylistically we w)8.32 F 1.82(ould put whitespace in)-.13 F 1.52
(between the declaration speci\214ers and the declarator list, and omit\
 whitespace between)33.336 672 R .503(the function name and its ar)
33.336 687 R .504(guments in an e)-.234 F .504
(xpression, this is not part of the grammar)-.195 F 7.004(.I)-.715 G(n)
-7.004 E 1.168(other w)33.336 702 R 1.167
(ords, the grammar is not conte)-.13 F 1.167
(xt-free, and since after the opening brace either a)-.195 F 1.769
(declaration or a statement \(consisting of a function call e)33.336 717
R 1.769(xpression\) are both v)-.195 F 1.769(alid, we)-.325 F -.13(wo)
33.336 732 S(uld ha).13 E .39 -.195(ve a r)-.26 H
(educe-reduce con\215ict here.).195 E 0 Cg EP
%%Page: 20 20
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 138.492(ECE466:Compilers Unit)33.336 60 R
(4/pg 20)2.25 E(\2512012 Jef)142.155 E 2.25(fH)-.225 G(akner)-2.25 E/F1
13/Times-Roman@0 SF 3.481
(One classic approach to handling this is to ha)33.336 120 R 3.87 -.195
(ve t)-.26 H 3.48(he le).195 F -.195(xe)-.195 G 4.52 -.52(r, r).195 H
3.48(ather than just blindly).52 F 1.076(returning IDENT)33.336 135 R
4.326(,c)-.962 G 1.076(onsult the symbol table.)-4.326 F 1.076
(If the identi\214er in question is visible in the)7.576 F 8.323
(symbol table as a typedef name, the le)33.336 150 R -.195(xe)-.195 G
11.573(rr).195 G 8.323(eturns a dif)-11.573 F 8.323(ferent tok)-.325 F
8.323(en, e.g.)-.13 F(TYPEDEFN)33.336 165 Q 9.767(AME. This)-.455 F
(resolv)9.768 E 6.518(es the ambiguity abo)-.195 F -.195(ve)-.195 G
13.018(.U).195 G(nfortunately)-13.018 E 9.768(,t)-.845 G 6.518(here are)
-9.768 F .753(additional dif)33.336 180 R .753(\214culties with the typ\
edef mechanism \(which is treated with caution by old-)-.325 F 4.353
(time C programmers because of the man)33.336 195 R 7.603(yc)-.195 G
4.353(ompilers which did not implement it)-7.603 F(correctly!\))33.336
210 Q(Consider this e)33.336 231 Q(xample:)-.195 E/F2 10/Courier@0 SF
(typedef int itd;)33.336 243 Q(g\(\))33.336 267 Q({)33.336 279 Q
(itd *itd;)39.336 291 Q(})33.336 303 Q F1 3.086(Upon entry to the block\
 scope attached to function f1, itd is a typedef name.)33.336 324 R(The)
9.586 E 1.651(declaration then creates a ne)33.336 339 R 4.901(ws)-.325
G 1.651(ymbol itd, which is a v)-4.901 F 1.651
(ariable name, within that block)-.325 F 3.881(scope. This)33.336 354 R
.63(de\214nition hides the use of itd as a typedef name within that blo\
ck, therefore)3.88 F .56(the second instance of)33.336 369 R/F3 13
/Courier@0 SF -1.8(itd)2.91 G F1 .56(must be IDENT)4.71 F 3.81(,n)-.962
G .561(ot TYPEDEFN)-3.81 F 3.811(AME. One)-.455 F .561(might think that)
3.811 F .81(we can still w)33.336 384 R .81
(ork this out: after seeing a TYPEDEFN)-.13 F .81
(AME, pass a \215ag back to the le)-.455 F -.195(xe)-.195 G(r).195 E
2.537(to stop translating IDENT to TYPEDEFN)33.336 399 R 2.538
(AME, and reset that \215ag at the end of the)-.455 F
(declaration \(semicolon\).)33.336 414 Q 3.839(In K&R C, type names can\
 only appear in the declaration_speci\214ers portion of a)33.336 435 R
3.026(declaration, so the approach abo)33.336 450 R 3.417 -.195(ve i)
-.195 H 6.277(ss).195 G(uf)-6.277 E 6.277(\214cient. When)-.325 F 3.027
(ANSI C introduced function)6.277 F
(prototypes, things rapidly got ugly:)33.336 465 Q F2(typedef int itd;)
33.336 477 Q(f1\(\))33.336 501 Q({)33.336 513 Q
(itd itd\(itd ij, itd itd\);)39.336 525 Q(})33.336 537 Q F1 .366(This m\
ess declares itd to be, within the scope of f2, the name of a function \
which returns)33.336 558 R .228(int and tak)33.336 573 R .228(es tw)-.13
F 3.478(oi)-.13 G .228(nt ar)-3.478 F .228(guments, which ha)-.234 F
.618 -.195(ve b)-.26 H .228(een gi).195 F -.195(ve)-.325 G 3.478(nt).195
G .229(he \(useless\) names ij and itd.)-3.478 F -1.04(To)6.729 G .684
(clarify this, let us add suf)33.336 588 R<8c78>-.325 E .684
(es to the ambiguous identi\214er sho)-.195 F .683
(wing the scope in which is)-.325 F(is being recognized and its class \
\(T for typedefname, I for identi\214er\).)33.336 603 Q F2
(//scope0==global)33.336 630 Q(typedef int itdT0;)33.336 642 Q(f1\(\))
33.336 666 Q({)33.336 678 Q(//scope1==function)33.336 690 Q
(//scope2==prototype)33.336 702 Q
(itdT0 itdI1\(itdT0 ijI2, itdT0 itdI2\);)39.336 714 Q(})33.336 726 Q 0
Cg EP
%%Page: 21 21
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 138.492(ECE466:Compilers Unit)33.336 60 R
(4/pg 21)2.25 E(\2512012 Jef)142.155 E 2.25(fH)-.225 G(akner)-2.25 E/F1
13/Times-Roman@0 SF 3.7(Note that itdI1 must be recognized as an identi\
\214er which is being declared.)33.336 120 R(That)10.2 E 1.194
(declaration will be rooted in scope 1, b)33.336 135 R 1.193
(ut the C standard says that a declaration doesn')-.26 F(t)-.234 E(tak)
33.336 150 Q 7.859(ee)-.13 G -.325(ff)-7.859 G 4.609
(ect until the end of the).325 F/F2 13/Times-Italic@0 SF(declar)7.859 E
(ator)-.195 E F1 4.609(in which that identi\214er is mentioned.)7.859 F
.401
(Therefore, as we enter the prototype scope, itdT1 is not yet visible.)
33.336 165 R .4(Then itdT0 gi)6.9 F -.195(ve)-.325 G 3.65(st).195 G(he)
-3.65 E 2.147(type of the \214rst prototype parameter)33.336 180 R 8.647
(.i)-.715 G 2.148(tdI2 declares itd to be the name of the second)-8.647
F 1.144(formal parameter)33.336 195 R 4.394(,w)-.52 G 1.144
(hich will obscure the itdT0 declaration.)-4.394 F 1.144
(Note that if we re)7.644 F -.195(ve)-.325 G 1.144(rse the).195 F
(order of the prototype parameter list, we get in trouble:)33.336 210 Q
/F3 10/Courier@0 SF(itdT0 itdI1\(itdT0 itdI2,itdI2 ijI2\);)39.336 222 Q
F1 .3(because the declaration of itdI2 as the \214rst parameter name ob\
scures itdT0, and this tak)33.336 237 R(es)-.13 E(ef)33.336 252 Q 1.159
(fect when the comma is seen, as that ends the declarator in which itdI\
2 is mentioned.)-.325 F 3.045
(Then the second parameter declaration is in)33.336 267 R -.325(va)-.52
G 3.045(lid because itd is not recognized as a).325 F(typedef name.)
33.336 282 Q 1.181(If we turn OFF the IDENT)33.336 303 R(->TYPEDEFN)
-1.196 E 1.181(AME transformation in the le)-.455 F -.195(xe)-.195 G
4.431(ra).195 G 4.431(ss)-4.431 G 1.181(oon as it)-4.431 F .036(perform\
s an instance of this transformation, we must turn it back ON ag)33.336
318 R .037(ain upon reaching)-.065 F .108
(the end of a complete declarator)33.336 333 R 3.357(,o)-.52 G 3.357(rt)
-3.357 G .107(he opening parenthesis of the parameter type list of a)
-3.357 F 3.384(function declarator)33.336 348 R 9.884(.W)-.715 G 6.634
(em)-10.924 G 3.384(ust turn it OFF ag)-6.634 F 3.385
(ain after the closing \) of the function)-.065 F(declarator)33.336 363
Q(.)-.715 E(Ev)33.336 384 Q 1.938
(en this approach is not 100% foolproof.)-.195 F 1.938
(The C standard discusses cases which are)8.438 F 4.282
(truly ambiguous and gi)33.336 399 R -.195(ve)-.325 G 7.532(sa).195 G
7.532(na)-7.532 G 4.282(rbitrary w)-7.532 F 4.283
(ay of resolving the ambiguity)-.13 F 10.783(.T)-.845 G 4.283(he gcc)
-10.783 F(compiler)33.336 414 Q 6.487(,i)-.52 G 6.487(no)-6.487 G 3.237
(rder to comply with this, actually has to resort to splitting the enti\
re)-6.487 F 3.16(declaration grammar into tw)33.336 429 R 6.41(op)-.13 G
3.161(artitions, one in which IDENT)-6.41 F(->TYPEDEFN)-1.196 E 3.161
(AME is)-.455 F -.325(va)33.336 444 S(lid, and one in which it is not.)
.325 E(Consider this e)6.5 E(xample which uses abstract type names:)
-.195 E F3(f4\(\))33.336 456 Q({)33.336 468 Q(itd ff\(itd \(itd\)\);)
90.936 480 Q(})33.336 492 Q F1 2.827(Here f)33.336 507 R 6.077(fi)-.325
G 6.077(sb)-6.077 G 2.827(eing declared as a function.)-6.077 F 2.826
(The return type of f)9.326 F 6.076(fi)-.325 G 6.076(si)-6.076 G 6.076
(nt. That)-6.076 F 2.826(much is)6.076 F .699(perfectly clear)33.336 522
R 7.199(.T)-.715 G .699(he ar)-7.199 F .699(gument which f)-.234 F 3.949
(ft)-.325 G(ak)-3.949 E .699(es is ambiguous.)-.13 F .699
(It could be another function)7.199 F .82(\(you may ask: Ho)33.336 537 R
4.07(wc)-.325 G .82(an a function tak)-4.07 F 4.07(eaf)-.13 G 4.07
(unction? In)-4.07 F(reality)4.07 E 4.07(,a)-.845 G 1.21 -.195(ny a)
-4.07 H -.234(rg).195 G .819(ument of function).234 F 1.743
(or array type is actually passed as a pointer)33.336 552 R 8.244(.B)
-.715 G 1.744(ut ANSI allo)-8.244 F 1.744(ws the [] or \(\) notation in)
-.325 F(prototypes as a syntactic con)33.336 567 Q -.195(ve)-.52 G 3.25
(nience\). So).195 F(this could be equi)3.25 E -.325(va)-.325 G
(lent to:).325 E F3(int ff\(int _DUMMY\(int\)\))33.336 579 Q F1 1.29
-.325(ff t)33.336 594 T(ak).325 E .64(es one ar)-.13 F .639(gument whic\
h is a \(pointer to a \) function returning int and taking one int.)
-.234 F(But it could also be equi)33.336 609 Q -.325(va)-.325 G
(lent to:).325 E F3(int ff\(int itd\))33.336 621 Q F1 .099(i.e., f)
33.336 636 R 3.349(ft)-.325 G(ak)-3.349 E .099(es one inte)-.13 F .099
(ger ar)-.195 F .1(gument which we gi)-.234 F .49 -.195(ve t)-.325 H .1
(he \(useless\) name itd and surround with).195 F 1.99
(redundant parentheses.)33.336 651 R 1.99
(Section 6.7.5.3 of the C standard, item #11, states that if in a)8.49 F
.733(parameter declaration the identi\214er could be either a typedef n\
ame or a parameter name,)33.336 666 R(it must be recognized as a typede\
f name, so the \214rst interpretation is correct.)33.336 681 Q(But w)
33.336 702 Q(ait, there')-.13 E 3.25(sm)-.715 G(ore!)-3.25 E F3
(typedef int t;)33.336 714 Q(struct s {)33.336 738 Q 0 Cg EP
%%Page: 22 22
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 138.492(ECE466:Compilers Unit)33.336 60 R
(4/pg 22)2.25 E(\2512012 Jef)142.155 E 2.25(fH)-.225 G(akner)-2.25 E/F1
10/Courier@0 SF(unsigned t:4;)90.936 117 Q
(//bit field named t is unsigned int)94.8 E(const t:5;)90.936 129 Q
(//unnamed bit field of type t)112.8 E(};)33.336 141 Q/F2 13
/Times-Roman@0 SF -.52(Wi)33.336 162 S .602
(thin the structure de\214nition abo).52 F -.195(ve)-.195 G 3.852(,w)
.195 G .602(hich uses the bit \214eld syntax, the \214rst occurrence)
-3.852 F .235
(of the identi\214er t declares a structure member named t.)33.336 177 R
.236(But in the ne)6.735 F .236(xt line, t is a typedef)-.195 F 1.99
(name, which is quali\214ed by const, and the declarator is :5, an anon)
33.336 192 R 1.989(ymous bit \214eld of)-.195 F 1.779(width 5.)33.336
207 R(Ag)8.279 E 1.779
(ain, stylistically whitespace should appear between t and :, b)-.065 F
1.78(ut this is not)-.26 F(rele)33.336 222 Q -.325(va)-.325 G 4.541
(nt. The).325 F 1.291(\214rst instance of t does not obscure the typede\
f declaration t \(from global)4.541 F .038(scope\), because structure m\
embers are not in the same namespace class as typedef names.)33.336 237
R 1.705(If these typedef e)33.336 258 R 1.705
(xamples seem insane, it should be tak)-.195 F 1.705
(en as a lesson in programming)-.13 F 1.808(language "creep.")33.336 273
R(Man)8.308 E 5.058(yp)-.195 G 1.808
(rogramming languages, such as C, start out simple, ele)-5.058 F -.065
(ga)-.195 G(nt,).065 E 1.349(and suitable for the purpose for which the)
33.336 288 R 4.599(yw)-.195 G 1.348(ere designed.)-4.599 F 1.348
(As time goes by)7.848 F 4.598(,e)-.845 G -.325(ff)-4.598 G 1.348
(orts to).325 F("impro)33.336 303 Q -.195(ve)-.195 G 5.842("t).195 G
2.592(he language result in ne)-5.842 F 5.842(ws)-.325 G 5.842
(yntax. Often,)-5.842 F 2.593(complicated interactions among)5.842 F
2.727(these added features, and the original structure of the language,\
 can lead to dif)33.336 318 R(\214cult)-.325 E
(situations which were not anticipated as each ne)33.336 333 Q 3.25(wf)
-.325 G(eature w)-3.25 E(as added.)-.13 E/F3 13/Times-Bold@0 SF -.962
(Ty)229.72 378 S(pe Algebra).962 E F2 3.143 -1.04(We w)33.336 414 T
1.063(ill no)1.04 F 4.313(wc)-.325 G 1.063(onsider ho)-4.313 F 4.313(wt)
-.325 G 1.063(ypes interact with e)-4.313 F 1.063(xpression operators.)
-.195 F 3.143 -1.04(We c)7.563 H 1.063(an vie)1.04 F 4.313(wt)-.325 G
(hese)-4.313 E .725(rules as a sort of type algebra, and we can systema\
tically code routines to e)33.336 429 R -.325(va)-.325 G .724
(luate these).325 F(rules, using the AST representation of types.)33.336
444 Q F3 -.962(Ty)165.916 474 S(pe Equi).962 E -.13(va)-.13 G
(lence and Compatibility).13 E F2 .585(The C standard uses the term "co\
mpatible types" in a slightly confusing w)33.336 510 R(ay)-.13 E 7.085
(.T)-.845 G .845 -.13(wo t)-8.125 H(ypes).13 E .91
(are compatible if the)33.336 525 R 4.159(ya)-.195 G .909
(re identical, or if the)-4.159 F 4.159(ya)-.195 G .909
(re "close enough" to be equi)-4.159 F -.325(va)-.325 G 4.159
(lent. This).325 F .958(concept is used whene)33.336 540 R -.195(ve)
-.325 G 4.208(rt).195 G 1.218 -.13(wo t)-4.208 H .958
(ypes interact with each other).13 F 4.208(,e)-.52 G .958
(.g. in assignment.)-4.208 F(When)10.708 E(tw)33.336 555 Q 3.989(on)-.13
G .739(on-identical types are compatible, the result is a)-3.989 F/F4 13
/Times-Italic@0 SF .739(composite type)3.989 F F2 .739
(which represents a)3.989 F 1.887(compromise, of sorts, between the tw)
33.336 570 R 5.137(ot)-.13 G 5.137(ypes. Determination)-5.137 F 1.888
(of type compatibility for)5.138 F
(complicated types can be performed recursi)33.336 585 Q -.195(ve)-.325
G(ly).195 E 3.25(,u)-.845 G(sing simple rules:)-3.25 E 1.308
(Arithmetic types are compatible only if the)33.336 606 R 4.557(ya)-.195
G 1.307(re the same type.)-4.557 F 1.307(long is not compatible)7.807 F
1.942(with short.)33.336 621 R 1.942
(signed int is not compatible with unsigned int.)8.442 F -1.04(Ty)8.442
G 1.942(pe quali\214ers also break)1.04 F
(compatibility: const int is not compatible with int.)33.336 636 Q 2.245
(Each enum de\214nition is a distinct type and is not compatible with o\
ther enum types.)33.336 657 R(Ho)33.336 672 Q(we)-.325 E -.195(ve)-.325
G 4.636 -.52(r, a).195 H 3.986 -.195(ny e).52 H 3.596
(num type is compatible with int, and the result is that enum type.).195
F .618(Furthermore, since enums generally get con)33.336 687 R -.195(ve)
-.52 G .618(rted to ints in an).195 F 3.868(ye)-.195 G .618
(xpression, this is rarely)-4.063 F(an issue.)33.336 702 Q -1.3 -1.04
(Tw o)33.336 723 T 1.355(array types are compatible if their element ty\
pes are compatible, and if their sizes)5.644 F .87(are compatible too.)
33.336 738 R .869(The latter is de\214ned as follo)7.37 F .869
(ws: if both array types de\214ne a speci\214c)-.325 F 0 Cg EP
%%Page: 23 23
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 138.492(ECE466:Compilers Unit)33.336 60 R
(4/pg 23)2.25 E(\2512012 Jef)142.155 E 2.25(fH)-.225 G(akner)-2.25 E/F1
13/Times-Roman@0 SF 2.867(size, the)33.336 120 R 6.117(ym)-.195 G 2.867
(ust be equal.)-6.117 F(Ho)9.368 E(we)-.325 E -.195(ve)-.325 G 3.908
-.52(r, i).195 H 6.118(fe).52 G 2.868
(ither or both sizes are not de\214ned, the)-6.118 F 6.118(ya)-.195 G
(re)-6.118 E 5.741(compatible. The)33.336 135 R 2.491
(composite of the tw)5.741 F 5.741(oa)-.13 G 2.49
(rray types has an element type which is the)-5.741 F .687
(composite of the tw)33.336 150 R 3.937(oe)-.13 G .687(lement types.)
-3.937 F .687(If either type de\214ned a size, the composite has that)
7.187 F(de\214ned size.)33.336 165 Q(In C99, the array types can be qua\
li\214ed and if so the quali\214ers must match.)6.5 E -1.3 -1.04(Tw o)
33.336 186 T 1.159(function types are compatible if their return types \
are compatible, and furthermore)5.45 F .084(their ar)33.336 201 R .084
(gument lists must be compatible.)-.234 F .085
(The latter introduces some complicated rules for)6.584 F 2.665(mixing \
prototype and non-prototype forms of function type speci\214ers.)33.336
216 R 2.665(The reader is)9.165 F 1.306(referred to the C standard.)
33.336 231 R 1.306
(If both function types are in prototype form, the number of)7.806 F(ar)
33.336 246 Q .056(guments must be equal, the use of v)-.234 F .055
(ariable ar)-.325 F .055(guments must be the same, and each of the)-.234
F(ar)33.336 261 Q(guments' types must be compatible.)-.234 E 1.809(Each\
 structure or union de\214nition creates a distinct type which is not c\
ompatible with)33.336 282 R(an)33.336 297 Q(ything else.)-.195 E
(It is the tag, or a typedef alias, which captures this.)6.5 E(Thus:)6.5
E/F2 10/Courier@0 SF(struct {int a;int b;} x;)33.336 309 Q
(struct {int a; int b;} y;)33.336 321 Q F1 .739
(the types of x and y are not compatible, e)33.336 336 R -.195(ve)-.325
G 3.988(nt).195 G .738(hough the elements are declared the same)-3.988 F
-.13(wa)33.336 351 S 4.94 -.845(y. O).13 H 3.25(fc).845 G(ourse, when C\
 programs are compiled from separate source \214les, the compiler')-3.25
E(s)-.715 E 2.288(type checking systems are bypassed.)33.336 366 R 2.287
(If x and y abo)8.787 F 2.677 -.195(ve w)-.195 H 2.287
(ere in separate .c \214les, it is).195 F 1.266
(important that the code w)33.336 381 R 1.266(ork as intended.)-.13 F
1.266(The C standard guarantees that the compiler)7.766 F 1.482(will al)
33.336 396 R -.13(wa)-.13 G 1.481
(ys lay out structure and union types in a consistent w).13 F(ay)-.13 E
4.731(,s)-.845 G 4.731(ot)-4.731 G 1.481(he members will)-4.731 F(al)
33.336 411 Q -.13(wa)-.13 G(ys be in consistent places.).13 E -1.3 -1.04
(Tw o)33.336 432 T .164
(pointer types are compatible if their pointed-to types are compatible.)
4.453 F .164(The composite)6.664 F .412
(type is a pointer to the composite of the pointed-to types.)33.336 447
R .411(Pointers may be quali\214ed \(e.g.)6.911 F 4.012(ac)33.336 462 S
.762(onst pointer to an int, as opposed to a pointer to a const int\) a\
nd if so those quali\214ers)-4.012 F(must agree e)33.336 477 Q
(xactly for compatibility to hold.)-.195 E/F3 13/Times-Bold@0 SF(Con)
233.354 507 Q -.13(ve)-.52 G(rsions).13 E F1 -1.443(Va)33.336 537 S
(lues of a certain type can be con)1.443 E -.195(ve)-.52 G
(rted to another type in se).195 E -.195(ve)-.325 G(ral w).195 E(ays:)
-.13 E 3.25<8341>33.336 552 S 3.25(ne)-3.25 G(xplicit cast e)-3.445 E
(xpression)-.195 E 4.518<8349>33.336 567 S 1.268(mplicit con)-4.518 F
-.195(ve)-.52 G 1.268(rsions which happen to the ar).195 F 1.267
(guments of man)-.234 F 4.517(yo)-.195 G 1.267(perators \(unary)-4.517 F
4.517(,b)-.845 G(inary)-4.517 E(and assignment con)33.336 582 Q -.195
(ve)-.52 G(rsions\)).195 E 3.25<8354>33.336 597 S(he con)-3.25 E -.195
(ve)-.52 G(rsion of array and function types to pointer types in most e)
.195 E(xpressions)-.195 E 3.25<8349>33.336 612 S(mplicit con)-3.25 E
-.195(ve)-.52 G(rsions of actual ar).195 E(guments to a function call)
-.234 E 3.25<8349>33.336 627 S(mplicit con)-3.25 E -.195(ve)-.52 G
(rsion of return v).195 E(alue from function \(as if by assignment\))
-.325 E 3.579<8341>33.336 642 S 3.579(na)-3.579 G .329
(rea of memory which contains a v)-3.579 F .329(alue of one type is vie)
-.325 F .33(wed as being of a dif)-.325 F(ferent)-.325 E
(type, either by mistak)33.336 657 Q 3.25(eo)-.13 G 3.25(ro)-3.25 G 3.25
(np)-3.25 G(urpose.)-3.25 E(Con)33.336 693 Q -.195(ve)-.52 G .77
(rsions between inte).195 F .77(ger types do not in)-.195 F -.26(vo)-.52
G(lv).26 E 4.02(ea)-.195 G 1.16 -.195(ny c)-4.02 H .77
(hange to the actual bit v).195 F .769(alues, as)-.325 F
(long as the types are the same size.)33.336 708 Q 3.25(E.g. the)6.5 F
-.195(ex)3.25 G(pression).195 E F2(a=\(unsigned int\)b;)33.336 732 Q 0
Cg EP
%%Page: 24 24
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 138.492(ECE466:Compilers Unit)33.336 60 R
(4/pg 24)2.25 E(\2512012 Jef)142.155 E 2.25(fH)-.225 G(akner)-2.25 E/F1
13/Times-Roman@0 SF 2.8(where b w)33.336 120 R 2.8
(as de\214ned as just int, does nothing dif)-.13 F 2.8
(ferent from simply)-.325 F/F2 13/Courier@0 SF -1.8(a=b)5.15 G F1 9.3
(.W).9 G 2.8(hen the)-9.3 F .526
(destination type is smaller than the source, the higher)33.336 135 R
.526(-order bits are discarded.)-.26 F .526(This may)7.026 F 1.434
(create a loss of information if the source v)33.336 150 R 1.434(alue w)
-.325 F 1.434(as outside of the smaller range of the)-.13 F 3.442
(destination. When)33.336 165 R .192
(the destination is wider than the source, the higher)3.442 F .192
(-order bits are \214lled)-.26 F 1.014
(with 0 if the source is unsigned, b)33.336 180 R 1.015
(ut if the source is signed, the most signi\214cant bit \(the)-.26 F
1.004(sign bit\) of the source is e)33.336 195 R 1.004
(xtended to \214ll the higher)-.195 F 1.003(-order bits.)-.26 F 1.003
(Most processors ha)7.503 F 1.393 -.195(ve a)-.26 H(n).195 E
(instruction to do this automatically)33.336 210 Q(.)-.845 E(Con)33.336
231 Q -.195(ve)-.52 G 1.874(rsion of a \215oating point type to an inte)
.195 F 1.874(ger results in truncation of the fractional)-.195 F .974
(portion, e.g. 3.5 becomes 3 and -1.7 becomes -1.)33.336 246 R .974
(The \215oating point source may e)7.474 F(xceed)-.195 E 1.281
(the range of the inte)33.336 261 R 1.281
(ger destination \(e.g. 1e+20 can be represented in a 32-bit \215oat, b)
-.195 F(ut)-.26 E 2.159
(not a 32-bit int\) and the results are then unde\214ned.)33.336 276 R
(Con)8.659 E -.195(ve)-.52 G 2.159(rsion of an inte).195 F 2.158
(ger type to)-.195 F 1.902(\215oating point generally w)33.336 291 R
1.902(orks out, b)-.13 F 1.902
(ut it is possible that the \215oating point type is not)-.26 F .114
(precise enough to represent the inte)33.336 306 R .114(ger e)-.195 F
(xactly)-.195 E 6.614(.A)-.845 G .113
(32-bit \215oat can hold the entire range of)-3.25 F 3.382(a6)33.336 321
S .133(4-bit long long \(2**64 is approximately 16e+18\),)-3.382 F -.26
(bu)6.633 G 3.383(tt).26 G .133(he mantissa is not lar)-3.383 F .133
(ge enough)-.234 F 1.025(to hold it e)33.336 336 R(xactly)-.195 E 7.525
(.S)-.845 G 1.025(imilar rules hold for con)-7.525 F -.195(ve)-.52 G
1.025(rsions between \215oating types of dif).195 F(ferent)-.325 E
(size.)33.336 351 Q .446(Pointers may be con)33.336 372 R -.195(ve)-.52
G .446(rted to inte).195 F .447(gers and vice-v)-.195 F 3.697(ersa. It)
-.195 F .447(is not guaranteed that a memory)3.697 F .291
(address \(pointer\) will \214t into an int, or e)33.336 387 R -.195(ve)
-.325 G 3.541(nal).195 G 3.541(ong. E.g.)-3.541 F .291
(the model might be that ints and)3.541 F 2.568(longs are 32 bits, b)
33.336 402 R 2.569(ut addresses are 64.)-.26 F(Ho)9.069 E(we)-.325 E
-.195(ve)-.325 G 3.609 -.52(r, i).195 H 5.819(na).52 G 2.569
(lmost all cases, there is some)-5.819 F(inte)33.336 417 Q .107
(ger type which can hold the pointer \(long long in the pre)-.195 F .106
(vious e)-.325 F 3.356(xample\). Pointers)-.195 F(and)3.356 E(inte)
33.336 432 Q 4.09
(gers are not "compatible types", though, so implicit con)-.195 F -.195
(ve)-.52 G 4.09(rsions between them).195 F .998(generate a w)33.336 447
R .998(arning, b)-.13 F .998(ut e)-.26 F .998(xplicit casts are OK.)
-.195 F .997(An e)7.498 F .997(xception is made for the constant 0,)
-.195 F 1.997(which can al)33.336 462 R -.13(wa)-.13 G 1.997
(ys be implicitly con).13 F -.195(ve)-.52 G 1.997(rted to an).195 F
5.247(yp)-.195 G 1.998(ointer type because it is the NULL)-5.247 F
(pointer)33.336 477 Q(.)-.715 E 1.916(Pointers to dif)33.336 498 R 1.915
(ferent types may generally be con)-.325 F -.195(ve)-.52 G 1.915
(rted without an).195 F 5.165(ya)-.195 G 1.915(ctual changing of)-5.165
F 3.425(bits. De-referencing)33.336 513 R 3.425(ap)3.425 G .175
(ointer of one type as another type may produce unde\214ned results,)
-3.425 F(e.g.)33.336 528 Q/F3 10/Courier@0 SF(f\(\))33.336 540 Q({)
33.336 552 Q(int a;)33.336 564 Q(float *fp;)33.336 576 Q(a=1;)90.936 588
Q(fp=\(float *\)&a;)90.936 600 Q(printf\("%g\\n",*fp\);)90.936 612 Q(})
33.336 624 Q F1 .227(Additional comple)33.336 639 R .227(xity is introd\
uced on architectures which impose alignment restrictions)-.195 F 1.526
(on certain operations.)33.336 654 R 1.526(In the follo)8.026 F 1.526
(wing e)-.325 F 1.527(xample, the de-referencing of the pointer may)
-.195 F .885(result in a run-time f)33.336 669 R .885
(atal error because the v)-.13 F .885(alue of b)-.325 F(uf)-.26 E .885
(fer is not necessarily aligned to a)-.325 F(4-byte boundary)33.336 684
Q(.)-.845 E F3(g\(char *buffer\))33.336 696 Q({)33.336 708 Q(long *lp;)
39.336 720 Q(lp=\(long *\)buffer;)90.936 732 Q 0 Cg EP
%%Page: 25 25
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 138.492(ECE466:Compilers Unit)33.336 60 R
(4/pg 25)2.25 E(\2512012 Jef)142.155 E 2.25(fH)-.225 G(akner)-2.25 E/F1
10/Courier@0 SF(printf\("%d0,*lp\);)90.936 117 Q(})33.336 129 Q/F2 13
/Times-Roman@0 SF 1.232(The C standard imposes an additional restrictio\
n that a pointer to a function can not be)33.336 144 R(con)33.336 159 Q
-.195(ve)-.52 G .587(rted to a pointer to a v).195 F .587
(ariable or vice-v)-.325 F 3.837(ersa. This)-.195 F .587
(is because on some architectures,)3.837 F 3.388(function and v)33.336
174 R 3.388(ariable pointers may ha)-.325 F 3.778 -.195(ve v)-.26 H
3.388(astly dif)-.13 F 3.389(ferent representations \(e.g. a PIC)-.325 F
5.056(microcontroller\). Ho)33.336 189 R(we)-.325 E -.195(ve)-.325 G
2.846 -.52(r, a f).195 H 1.806(unction pointer can still be con).52 F
-.195(ve)-.52 G 1.806(rted to an inte).195 F(ger)-.195 E 5.055(,a)-.52 G
(nd)-5.055 E 2.251(that inte)33.336 204 R 2.251(ger con)-.195 F -.195
(ve)-.52 G 2.251(rted to a v).195 F 2.251(ariable pointer)-.325 F 5.501
(,s)-.52 G 5.501(ot)-5.501 G 2.251
(he reasoning behind this restriction is)-5.501 F(dubious.)33.336 219 Q
/F3 13/Times-Bold@0 SF(Casts)252.171 279 Q F2 4.388(At)33.336 315 S
1.138(ype cast e)-4.388 F 1.138(xpression is used to force an e)-.195 F
1.138(xplicit con)-.195 F -.195(ve)-.52 G 1.138
(rsion from one type to another).195 F(.)-.715 E 1.041
(Arithmetic types can be freely cast among each other)33.336 330 R 7.542
(.P)-.715 G 1.042(ointers can be cast to and from)-7.542 F(inte)33.336
345 Q 2.314(ger types.)-.195 F 2.313(Pointers to one type can be cast t\
o pointers to another type, including)8.813 F .658(pointers to v)33.336
360 R .658(oid, e)-.26 F .659
(xcept that restrictions are imposed to pre)-.195 F -.195(ve)-.325 G
.659(nt casting between function).195 F 1.137(and v)33.336 375 R 1.137
(ariable pointers \(b)-.325 F 1.137(ut this can be circumv)-.26 F 1.137
(ented by casting through an inte)-.195 F 1.137(ger type\).)-.195 F
3.163(Casting an)33.336 390 R 6.413(yt)-.195 G 3.163(ype to)-6.413 F/F4
13/Courier@0 SF -1.8(void)5.513 G F2 3.163(means discarding its v)7.313
F 6.413(alue. structures,)-.325 F 3.164(unions, arrays and)6.413 F
(functions can not be cast.)33.336 405 Q -1.04(Ty)6.5 G
(pe quali\214ers can also be cast a)1.04 E -.13(wa)-.195 G -.845(y.).13
G F3(Function/Array P)166.124 435 Q(ointer Equi)-.26 E -.13(va)-.13 G
(lence).13 E F2(An e)33.336 471 Q(xpression of type array of E is con)
-.195 E -.195(ve)-.52 G(rted to a pointer to E in e).195 E -.195(ve)
-.325 G(ry conte).195 E(xt e)-.195 E(xcept:)-.195 E 3.25<8357>33.336 486
S(hen the array is the ar)-3.25 E
(gument to the & \(address-of\) operator)-.234 E 3.25<8357>33.336 501 S
(hen the array is the ar)-3.25 E(gument to the sizeof operator)-.234 E
3.25<8357>33.336 516 S(hen a string literal \(which is really an array \
of char\) is used as an initializer)-3.25 E(.)-.715 E .408(This con)
33.336 537 R -.195(ve)-.52 G .408(rsion could be stated in another w)
.195 F .408(ay: in most conte)-.13 F .408(xts, the name of an array is)
-.195 F(really the address of its \214rst element.)33.336 552 Q 2.339
(An e)33.336 573 R 2.339(xpression of type function is con)-.195 F -.195
(ve)-.52 G 2.339(rted to a pointer to function in e).195 F -.195(ve)
-.325 G 2.34(ry conte).195 F(xt)-.195 E -.195(ex)33.336 588 S 2.266(cep\
t as the operand to the & or sizeof operators \(furthermore it is in)
.195 F -.325(va)-.52 G 2.265(lid to apply).325 F 1.144
(sizeof to a function name\).)33.336 603 R 1.145
(One could also say that this con)7.645 F -.195(ve)-.52 G 1.145
(rsion does not tak).195 F 4.395(ep)-.13 G(lace)-4.395 E 2.122(when the\
 function name is used to call the function, or one could say the con)
33.336 618 R -.195(ve)-.52 G(rsion).195 E .705(happens and that')33.336
633 R 3.955(sO)-.715 G 3.955(Kb)-3.955 G .705
(ecause a function can be called with a pointer to a function too.)
-3.955 F(Ag)33.336 648 Q 1.12(ain, another w)-.065 F 1.119(ay of saying\
 all this is that a function name is really the address of its)-.13 F
(\214rst machine-language instruction.)33.336 663 Q 3.115
(The "shielding" ef)33.336 684 R 3.115(fect of sizeof and & e)-.325 F
3.115(xtends only to the e)-.195 F 3.116(xpression which is the)-.195 F
.523(immediate operand of the operator)33.336 699 R 7.023(.I)-.715 G
3.773(td)-7.023 G .523(oes not recurse to deeper le)-3.773 F -.195(ve)
-.325 G .522(ls of the e).195 F(xpression)-.195 E(or the type.)33.336
714 Q(Let us e)33.336 735 Q(xamine some cases:)-.195 E 0 Cg EP
%%Page: 26 26
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 138.492(ECE466:Compilers Unit)33.336 60 R
(4/pg 26)2.25 E(\2512012 Jef)142.155 E 2.25(fH)-.225 G(akner)-2.25 E/F1
10/Courier@0 SF(main\(\))33.336 117 Q({)33.336 129 Q(int a[7];)33.336
141 Q(printf\("%d %d\\n",sizeof a,sizeof\(a+0\)\);)90.936 153 Q(})33.336
165 Q/F2 13/Times-Roman@0 SF .111(The v)33.336 186 R .111
(ariable a has type array\(7,int\).)-.325 F .112
(In the \214rst case, a is the direct operand of sizeof, and)6.611 F
.088(thus its type is not con)33.336 201 R -.195(ve)-.52 G .087
(rted to a pointer).195 F 6.587(.s)-.715 G .087
(izeof\(int [7]\) is 7*sizeof\(int\), or 28 on a 32-bit)-6.587 F 4.402
(architecture. In)33.336 216 R 1.152
(the second case, a appears as the operand of the + operator)4.402 F
7.652(.I)-.715 G 1.153(ts type is)-7.652 F 2.515(therefore con)33.336
231 R -.195(ve)-.52 G 2.515(rted to pointer\(int\).).195 F 2.515(As we')
9.015 F 2.515(ll see later in this unit, when the addition)-.13 F 1.27(\
operator has operands of types pointer and int, the result is the point\
er type.)33.336 246 R(Therefore)7.771 E(the second printf output is siz\
eof\(int *\), or 4 on a 32-bit architecture.)33.336 261 Q .414
(The type of the e)33.336 282 R(xpression)-.195 E/F3 13/Courier@0 SF
-1.8(&a)2.764 G F2 .413(is pointer\(array\(7,int\)\), not pointer\(poin\
ter\(int\)\), because a,)4.564 F 1.203
(as the operand to the address-of operator)33.336 297 R 4.453(,d)-.52 G
1.204(oes not get con)-4.453 F -.195(ve)-.52 G 4.454(rted. This).195 F
1.204(is important for)4.454 F
(multi-dimensional array pointer arithmetic:)33.336 312 Q F1
(int b[8][10];)33.336 324 Q(int c[4][5][6];)33.336 336 Q(main\(\))33.336
348 Q({)33.336 360 Q(printf\("%p %p %p %p\\n",b,&b+1,b+1,*b+1\);)81.336
372 Q(printf\("%p %p\\n",c,*c+1\);)81.336 384 Q(})33.336 396 Q F2 .655
(The type of v)33.336 417 R .655
(ariable b is array\(8,array\(10,int\)\).)-.325 F .654
(Consider the four uses of b in the printf.)7.154 F 1.223
(In the \214rst case, b is subject to con)33.336 432 R -.195(ve)-.52 G
1.224(rsion, and the outer array type becomes a pointer:).195 F 5.106
(pointer\(array\(10,int\)\). T)33.336 447 R 5.106(oa)-1.04 G 1.856
(nalyze the ne)-5.106 F 1.856
(xt use, recall \(or read ahead to learn\) that the)-.195 F -.195(ex)
33.336 462 S 3.724(pression p+i, with operands i and p of type inte).195
F 3.725(ger and pointer\(T\), respecti)-.195 F -.195(ve)-.325 G(ly).195
E(,)-.845 E 2.869(computes p+i*sizeof\(T\).)33.336 477 R 2.869(In the e)
9.369 F 2.869(xpression &b, the v)-.195 F 2.869
(ariable b is not subject to type)-.325 F(con)33.336 492 Q -.195(ve)-.52
G 4.314(rsion as the operand of the address-of operator).195 F 10.814
(.T)-.715 G 4.314(herefore it has a type of)-10.814 F .914
(pointer\(array\(8,array\(10,int\)\), and the v)33.336 507 R .913
(alue computed is 8*10*sizeof\(int\)*1 greater than)-.325 F .681
(the base address of b)33.336 522 R 7.181(.I)-.52 G 3.932(no)-7.181 G
.682(ther w)-3.932 F .682
(ords, it correctly computes the address of the "ne)-.13 F .682(xt" int)
-.195 F([8][10] array be)33.336 537 Q(yond b)-.195 E(.)-.52 E .522
(In the third case, b')33.336 558 R 3.772(st)-.715 G .522
(ype does get con)-3.772 F -.195(ve)-.52 G .522
(rted to pointer\(array\(10,int\)\), and the e).195 F(xpression)-.195 E
-.325(va)33.336 573 S .472(lue is 10*sizeof\(int\) be).325 F .472
(yond the base address, i.e.)-.195 F .473(the address of the second ro)
6.972 F 3.723(wo)-.325 G 3.723(ft)-3.723 G(he)-3.723 E(array b)33.336
588 Q(.)-.52 E .151(In the fourth case, b')33.336 609 R 3.401(st)-.715 G
.151(ype is con)-3.401 F -.195(ve)-.52 G .151
(rted to pointer\(array\(10,int\)\), and is the operand of the).195 F
.537(dereference \(*\) operator)33.336 624 R 3.787(,w)-.52 G .537
(hich tak)-3.787 F .538
(es operands of type pointer\(T\) and results in a type T)-.13 F(.)-.962
E 1.553(Therefore the sube)33.336 639 R 1.553
(xpression *b has type array\(10,int\).)-.195 F -.13(BU)8.053 G 3.477
-.962(T, t).13 H 1.553(his sube).962 F 1.553(xpression is also)-.195 F
2.406(subject to array type con)33.336 654 R -.195(ve)-.52 G 2.407
(rsion, and therefore the operands to + are of type int and).195 F
(pointer\(int\), and the address is incremented by just one element.)
33.336 669 Q 4.644(In the second printf, c is of type array\(4,array\(5\
,array\(6,int\)\)\).)33.336 690 R 7.894(ci)11.144 G 7.894(sc)-7.894 G
(on)-7.894 E -.195(ve)-.52 G 4.644(rted to).195 F 3.408
(pointer\(array\(5,array\(6,int\)\). After)33.336 705 R .159
(the * operator the type is array\(5,array\(6,int\)\).)3.408 F .159
(This is)6.659 F(no)33.336 720 Q 4.253(ws)-.325 G 1.003(ubject to con)
-4.253 F -.195(ve)-.52 G 1.003(rsion ag).195 F 1.003(ain, b)-.065 F
1.003(ut note that only the outermost array type is af)-.26 F(fected,)
-.325 E(and the type becomes pointer\(array\(6,int\)\).)33.336 735 Q
(The address is incremented by 6*sizeof\(int\).)6.5 E 0 Cg EP
%%Page: 27 27
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 138.492(ECE466:Compilers Unit)33.336 60 R
(4/pg 27)2.25 E(\2512012 Jef)142.155 E 2.25(fH)-.225 G(akner)-2.25 E/F1
13/Times-Roman@0 SF .839(Array/pointer con)33.336 120 R -.195(ve)-.52 G
.839(rsion does not tak).195 F 4.089(ep)-.13 G .84
(lace when a string literal is used to initialize an)-4.089 F(array v)
33.336 135 Q(ariable)-.325 E/F2 10/Courier@0 SF(char a[]="hello";)33.336
147 Q(char *p="goodbye";)33.336 159 Q F1 1.679
(The array dimension of a is unspeci\214ed, b)33.336 174 R 1.679
(ut because of the initializer)-.26 F 4.928(,t)-.52 G 1.678
(he type of a is)-4.928 F 1.709(\(char [6]\), allo)33.336 189 R 1.709
(wing an e)-.325 F 1.709(xtra byte for the NUL terminator)-.195 F 8.21
(.I)-.715 G 4.96(nt)-8.21 G 1.71(he second e)-4.96 F 1.71(xample, the)
-.195 F 1.107(string does not initialize an array v)33.336 204 R 1.107
(ariable, and is promoted to a pointer)-.325 F 7.606(.I)-.715 G 4.356
(nK)-7.606 G 1.106(&R C, an)-4.356 F 2.918
(initialized array declaration w)33.336 219 R 2.918(as allo)-.13 F 2.918
(wed only when the v)-.325 F 2.919(ariable has e)-.325 F 2.919
(xtern or static)-.195 F .764(storage class, b)33.336 234 R .764
(ut C-89 and C-99 allo)-.26 F 4.014(wt)-.325 G .763
(he initialization in all cases.)-4.014 F .763(This leads to some)7.263
F(unfortunate inconsistenc)33.336 249 Q(y:)-.195 E F2(f\(\))33.336 261 Q
({)33.336 273 Q(char a[]="allowed";)39.336 285 Q(char b[8];)39.336 297 Q
(b="denied";)90.936 309 Q(})33.336 321 Q F1 2.399(Both a and b are v)
33.336 336 R 2.4(ariables of)-.325 F/F3 13/Courier@0 SF -1.8(auto)4.75 G
F1 2.4(storage class.)6.55 F 2.4(The initialization of a requires the)
8.9 F(compiler to generate code similar to:)33.336 351 Q F2
(char a[8];strcpy\(a,"allowed"\);)33.336 363 Q F1 .78(But if we miss th\
e opportunity to initialize the array during declaration, that opportun\
ity)33.336 378 R 1.696(is lost fore)33.336 393 R -.195(ve)-.325 G 4.946
(r! The).195 F 1.697
(string "denied" is promoted to \(char *\), and the v)4.946 F 1.697
(ariable b is also)-.325 F(promoted, b)33.336 408 Q
(ut since array names are ne)-.26 E -.195(ve)-.325 G 3.25(rl).195 G
-.325(va)-3.25 G(lues, the assignment is an error).325 E(.)-.715 E/F4 13
/Times-Bold@0 SF(Assignment Con)199.229 453 Q -.13(ve)-.52 G(rsions).13
E F1 3.459(When the types of the left and right side of an assignment \
\(including the implicit)33.336 489 R 1.904
(assignment in a return statement\) are not identical, a con)33.336 504
R -.195(ve)-.52 G 1.904(rsion will tak).195 F 5.154(ep)-.13 G 5.154
(lace. This)-5.154 F(con)33.336 519 Q -.195(ve)-.52 G .938
(rsion is the same as if an e).195 F .938(xplicit cast were made, e)
-.195 F .937(xcept certain combinations are)-.195 F .287(not allo)33.336
534 R 3.537(wed. An)-.325 F 3.538(ya)-.195 G .288
(rithmetic type can be assigned to an)-3.538 F 3.538(yo)-.195 G .288
(ther arithmetic type, unless the)-3.538 F .902
(destination type is quali\214ed with)33.336 549 R F3 -1.8(const)3.252 G
F1 7.402(.s).9 G .902(tructs and unions can only be assigned if both)
-7.402 F .088(sides are of identical type.)33.336 564 R(An)6.589 E 3.339
(yp)-.195 G .089(ointer to a v)-3.339 F .089
(ariable can be assigned to a v)-.325 F .089(oid * and vice-)-.26 F
-.195(ve)33.336 579 S 3.499(rsa. An).195 F 3.499(yp)-.195 G .249
(ointer can be assigned to an)-3.499 F 3.499(yo)-.195 G .249
(ther pointer if the)-3.499 F 3.498(yp)-.195 G .248
(oint to compatible types.)-3.498 F(The inte)33.336 594 Q
(ger constant 0 \(NULL pointer\) can be assigned to an)-.195 E 3.25(yp)
-.195 G(ointer)-3.25 E(.)-.715 E .476(If the abo)33.336 615 R .867 -.195
(ve c)-.195 H .477(riteria are not met, a w).195 F .477
(arning is generally gi)-.13 F -.195(ve)-.325 G .477
(n, and then the assignment is).195 F 3.966(attempted as if an e)33.336
630 R 3.966(xplicit cast were used.)-.195 F 3.966
(If such a cast is not permissible, the)10.466 F
(assignment is in error \(e.g.)33.336 645 Q
(attempt to assign a struct into an int\).)6.5 E F4
(Unary and Binary Arithmetic pr)151.538 675 Q(omotions)-.234 E F1 1.532
(In most cases, v)33.336 711 R 1.532(alues of inte)-.325 F 1.532
(ger type smaller than int \(short, char\) are promoted to int.)-.195 F
5.199(This reduces the comple)33.336 726 R 5.199
(xity of the code which the compiler must generate for)-.195 F -.195(ex)
33.336 741 S 4.716(pressions. Generally).195 F 4.716(,i)-.845 G 1.466
(nt is the natural re)-4.716 F 1.466
(gister size of an architecture, so it isn')-.195 F 4.717(ta)-.234 G
-.195(ny)-4.717 G 0 Cg EP
%%Page: 28 28
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 138.492(ECE466:Compilers Unit)33.336 60 R
(4/pg 28)2.25 E(\2512012 Jef)142.155 E 2.25(fH)-.225 G(akner)-2.25 E/F1
13/Times-Roman@0 SF -.13(fa)33.336 120 S
(ster or cheaper to do 8-bit inte).13 E
(ger operations if the machine is naturally 32 bit.)-.195 E 1.497
(One thing which ANSI C "brok)33.336 141 R 1.497(e" in)-.13 F -.26(vo)
-.52 G(lv).26 E 1.497(es promotions of unsigned short and unsigned)-.195
F(char)33.336 156 Q 9.277(.I)-.715 G 6.027(nK)-9.277 G 2.778
(&R C, these were promoted to unsigned int, b)-6.027 F 2.778
(ut in Standard C, the)-.26 F 6.028(ya)-.195 G(re)-6.028 E 2.913(promot\
ed to int, as long as int is strictly wider than the original type and \
can thus)33.336 171 R 2.029(represent the entire range.)33.336 186 R
2.03(The problem with this is that the e)8.53 F 2.03
(xpression then loses its)-.195 F
(unsignedness, which can sometimes be a problem.)33.336 201 Q 2.342
(K&R C promoted \215oats to doubles, b)33.336 222 R 2.342
(ut ANSI C doesn')-.26 F 5.592(tr)-.234 G 2.342(equire this.)-5.592 F
(Unlik)8.842 E 5.592(ei)-.13 G(nte)-5.592 E(ger)-.195 E .296
(operations, it is quite lik)33.336 237 R .297
(ely that single-precision \215oating point operators are indeed f)-.13
F(aster)-.13 E(than double, so if the programmer isn')33.336 252 Q 3.25
(ta)-.234 G(sking for the additional precision, wh)-3.25 E 3.25(yd)-.065
G 3.25(oi)-3.25 G(t?)-3.25 E .168(When an e)33.336 273 R .168
(xpression operator is presented with tw)-.195 F 3.418(os)-.13 G(ube)
-3.418 E .168(xpressions of dif)-.195 F .168(fering types, one)-.325 F
1.572(of them must be promoted before the operation mak)33.336 288 R
1.572(es sense.)-.13 F 1.572(So, after performing the)8.072 F 2.439
(unary promotions described abo)33.336 303 R -.195(ve)-.195 G 5.689(,i)
.195 G 5.689(ft)-5.689 G 2.439(he types are still dif)-5.689 F 2.439
(ferent, the "lesser" type is)-.325 F 3.251(promoted. E.g. when)33.336
318 R .002(adding a double to an int, the int is promoted to double.)
3.251 F .002(Adding an)6.502 F
(int to a long long results in promotion to long long.)33.336 333 Q
1.907(The rules of binary promotions are some)33.336 354 R 1.906
(what complicated.)-.325 F 1.906(\(unsigned int\) OP \(signed)8.406 F
.31(int\) results in \(unsigned int\).)33.336 369 R .31
(But \(unsigned int\) OP \(signed long\) results in \(signed long\))6.81
F 2.715(because the latter is a "bigger" or "higher ranking" inte)33.336
384 R 2.715(ger type.)-.195 F 2.715(This beha)9.215 F 2.715(vior also)
-.26 F .569(changed from K&R to ISO C or C99.)33.336 399 R(Man)7.069 E
-7.068 3.819(yC p)-.195 H .57(rogrammers do not fully understand the)
-3.819 F(promotion rules.)33.336 414 Q
(If uncertain, it is best to use e)6.5 E(xplicit casts.)-.195 E .042
(In classic C without prototypes, the actual types of the ar)33.336 435
R .041(guments are not kno)-.234 F .041(wn when the)-.325 F 1.629
(compiler sees the function call.)33.336 450 R 3.71 -1.04(To s)8.13 H
1.63(implify ar)1.04 F 1.63(gument marshalling, classic C promotes)-.234
F .488
(\215oats to doubles, and promotes char and short as described abo)
33.336 465 R -.195(ve)-.195 G 6.988(.I).195 G 3.738(nS)-6.988 G .488
(tandard C, with a)-3.738 F 1.55(prototype in ef)33.336 480 R 1.551
(fect, these promotions are not required to be performed.)-.325 F 1.551
(This is a good)8.051 F .151
(optimization for \215oats, as discussed abo)33.336 495 R -.195(ve)-.195
G 3.401(,b).195 G .15(ut not so important for inte)-3.661 F .15
(ger types.)-.195 F .15(In f)6.65 F(act,)-.13 E .121
(most implementations will promote char and short ar)33.336 510 R .121
(guments an)-.234 F(yw)-.195 E(ay)-.13 E 6.622(.I)-.845 G 3.372(ft)
-6.622 G .122(he function has)-3.372 F 4.074(ap)33.336 525 S .824
(rototype that speci\214es v)-4.074 F .824(ariable ar)-.325 F .824
(guments, those ar)-.234 F .824(guments must al)-.234 F -.13(wa)-.13 G
.823(ys be promoted).13 F(because their type is not kno)33.336 540 Q
(wn.)-.325 E/F2 13/Times-Bold@0 SF(Expr)234.225 585 Q(essions)-.234 E F1
.523(The C language has an unusually rich e)33.336 621 R .523
(xpression syntax.)-.195 F .523(There are 16 le)7.023 F -.195(ve)-.325 G
.523(ls of operator).195 F 3.296(precedence de\214ned.)33.336 636 R
(Belo)9.796 E 6.546(wi)-.325 G 6.546(sa)-6.546 G 6.546(no)-6.546 G 3.296
(utline of the e)-6.546 F 3.296(xpression syntax and some of the)-.195 F
1.506(semantic analysis issues.)33.336 651 R 3.586 -1.04(We w)8.006 H
1.506(ill look at the type algebra of each operator)1.04 F 4.757(,a)-.52
G 4.757(sw)-4.757 G 1.507(ell as)-4.757 F .154(some issues in e)33.336
666 R -.325(va)-.325 G .154(luating rv).325 F .154(alues and lv)-.325 F
3.404(alues. W)-.325 F(e')-1.04 E .154(ll ha)-.13 F .544 -.195(ve t)-.26
H 3.403(oc).195 G .153(ome back to this in the ne)-3.403 F(xt)-.195 E
(unit as we discuss code generation.)33.336 681 Q 1.022(An e)33.336 702
R 1.022(xpression is said to produce)-.195 F/F3 13/Times-Italic@0 SF
(side-ef)4.272 E(fects)-.234 E F1 1.022(if it can modify the v)4.272 F
1.022(alue of an object, i.e.)-.325 F .928(includes pre or post increme\
nt or decrement operators, assignment operators or function)33.336 717 R
3.587(calls. If)33.336 732 R .337(the e)3.587 F .337
(xpression produces no side-ef)-.195 F .337(fects, then a w)-.325 F .337
(arning may be generated unless)-.13 F 0 Cg EP
%%Page: 29 29
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 138.492(ECE466:Compilers Unit)33.336 60 R
(4/pg 29)2.25 E(\2512012 Jef)142.155 E 2.25(fH)-.225 G(akner)-2.25 E/F1
13/Times-Roman@0 SF(the e)33.336 120 Q(xpression v)-.195 E(alue is e)
-.325 E(xplicitly cast to)-.195 E/F2 13/Courier@0 SF -1.8(\(void\))2.35
G F1(.).9 E 1.311(Some e)33.336 141 R 1.311(xpressions ha)-.195 F 1.701
-.195(ve e)-.26 H(qui).195 E -.325(va)-.325 G 1.311
(lent forms, e.g. a+=b is identical to a=a+b; The compiler).325 F 1.893
(writer may choose, during AST construction, to transform some e)33.336
156 R 1.894(xpressions into their)-.195 F(equi)33.336 171 Q -.325(va)
-.325 G(lent form, so as to simplify the number of cases needed in late\
r analysis.).325 E/F3 13/Times-Bold@0 SF(Primary Expr)180.054 201 Q
(essions \(Le)-.234 E -.13(ve)-.195 G 3.25(l1).13 G(6\))-3.25 E F1<83>
33.336 231 Q F2 -1.8(IDENT)2.792 G F1 3.692(:i).9 G 3.692(ft)-3.692 G
.442(he name of a v)-3.692 F .442(ariable, this is an lv)-.325 F .441
(alue, unless the v)-.325 F .441(ariable is of array type, in)-.325 F
2.047(which case the e)33.336 246 R 2.047(xpression is con)-.195 F -.195
(ve)-.52 G 2.048(rted to a pointer to the element type and is not an)
.195 F(lv)33.336 261 Q 5.285(alue. This)-.325 F(con)5.285 E -.195(ve)
-.52 G 2.035(rsion doesn').195 F 5.285(th)-.234 G 2.035
(appen if this primary e)-5.285 F 2.035(xpression is the operand of a)
-.195 F 1.949(sizeof or & operator)33.336 276 R 8.449(.T)-.715 G
(echnically)-9.359 E 5.199(,av)-.845 G 1.949
(ariable of array type is an lv)-5.524 F 1.95(alue \(it has storage)
-.325 F .286(associated with it and we can tak)33.336 291 R 3.536(ei)
-.13 G .286(ts address\), b)-3.536 F .286(ut because of this def)-.26 F
.286(ault con)-.13 F -.195(ve)-.52 G .286(rsion to a).195 F
(pointer type, this distinction really doesn')33.336 306 Q 3.25(tm)-.234
G(atter)-3.25 E(.)-.715 E .122(The name of a function is also con)33.336
327 R -.195(ve)-.52 G .122(rted to a pointer to a function e).195 F .123
(xcept when applied to)-.195 F .899(sizeof or &.)33.336 342 R(Ag)7.399 E
.899(ain, this distinction is a hair)-.065 F(-splitter)-.26 E 4.149(,s)
-.52 G .898(ince sizeof a function is not v)-4.149 F(alid,)-.325 E
(and there is no reason to use & on a function name.)33.336 357 Q .119
(If the identi\214er is the name of an enum constant, then this e)33.336
378 R .12(xpression has the v)-.195 F .12(alue of that)-.325 F 3.301
(constant, and an inte)33.336 393 R 3.301(ger type of the compiler')
-.195 F 6.551(sc)-.715 G 3.301(hoosing \(generally just int\).)-6.551 F
(enum)9.8 E(constants can')33.336 408 Q 3.25(tb)-.234 G 3.25(el)-3.25 G
-.325(va)-3.25 G(lues.).325 E 2.674(Other uses of an identi\214er \(tag\
s, members, labels, typedef names\) are not a primary)33.336 429 R -.195
(ex)33.336 444 S(pression.).195 E 4.634<836c>33.336 459 S 1.384
(iteral: Inte)-4.634 F(ger)-.195 E 4.634<2c8d>-.52 G 1.384
(oating-point, character and string literals are all primary e)-4.634 F
(xpressions.)-.195 E .902(Their type is inferred from their le)33.336
474 R .902(xical pattern, including possible modi\214ers such as)-.195 F
F2 -1.8(UL)3.252 G F1(,).9 E .377(and \(in the case of inte)33.336 489 R
.376(gers\) by their v)-.195 F .376(alue in relation to the range of v)
-.325 F .376(alues representable)-.325 F 1.761(by each scalar type.)
33.336 504 R 1.761(string literals are of type array of char)8.261 F
5.012(,b)-.52 G 1.762(ut the)-5.272 F 5.012(ya)-.195 G 1.762(re con)
-5.012 F -.195(ve)-.52 G 1.762(rted to).195 F .218
(pointer to char in all cases e)33.336 519 R .217
(xcept as the operand to a sizeof, operand to &, or when being)-.195 F
.377(used to initialize an array of char)33.336 534 R 6.878(.T)-.715 G
(echnically)-7.788 E 3.628(,as)-.845 G .378(tring literal is an lv)
-3.628 F .378(alue, b)-.325 F .378(ut because of)-.26 F .655(the def)
33.336 549 R .655(ault con)-.13 F -.195(ve)-.52 G .655
(rsion to a pointer type, do we really care?).195 F .655
(It is implementation-speci\214c)7.155 F
(whether a string literal can be modi\214ed.)33.336 564 Q<83>33.336 579
Q F2 8.023(\(e)6.173 G 3.823 -1.8(xpr \))-9.823 H F1 7.074(:P)10.723 G
3.824(arentheses do nothing, the v)-7.269 F 3.824
(alue and type is that of the enclosed)-.325 F -.195(ex)33.336 594 S
3.842(pression. The).195 F 3.842(ya)-.195 G .592
(re used for style or to escape the normal precedence and associati)
-3.842 F(vity)-.325 E 4.515(rules. T)33.336 609 R 1.265(ypically in b)
-1.04 F 1.266(uilding an AST for an e)-.26 F 1.266(xpression, one w)
-.195 F 1.266(ould not e)-.13 F -.195(ve)-.325 G 4.516(nb).195 G 1.266
(other with)-4.516 F(parenthesized e)33.336 624 Q(xpressions.)-.195 E F3
-.26(Po)173.859 654 S(st\214x expr).26 E(essions \(also Le)-.234 E -.13
(ve)-.195 G 3.25(l1).13 G(6\))-3.25 E F1<83>33.336 684 Q F2 -1.8(e1[e2])
3.458 G F1 4.358(:A).9 G 4.358(na)-4.358 G 1.108(rray subscripting e)
-4.358 F 1.108(xpression is de\214ned as e)-.195 F 1.107(xactly equi)
-.195 F -.325(va)-.325 G 1.107(lent to).325 F F2 -1.8(*\(e1+e2\))3.457 G
F1(.).9 E 1.49(Since addition is commutati)33.336 699 R -.195(ve)-.325 G
4.74(,t).195 G 1.49(his imples that)-4.74 F F2 -1.8(e2[e1])3.84 G F1
1.491(is also equi)5.641 F -.325(va)-.325 G 1.491(lent, although that)
.325 F -.13(wo)33.336 714 S .43(uld be stylistically strange.).13 F .43
(e1 must be a pointer type, and e2 must be an inte)6.93 F .429
(ger type,)-.195 F .95(or vice-v)33.336 729 R 4.2(ersa. As)-.195 F 4.201
(ar)4.201 G .951(esult of the implicit binary + operator)-4.201 F 4.201
(,t)-.52 G .951(he usual binary promotions)-4.201 F 1.274(and con)33.336
744 R -.195(ve)-.52 G 1.274(rsions are applied to e1 and e2.).195 F
1.274(See discussion of the + operator and pointer)7.774 F 0 Cg EP
%%Page: 30 30
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 138.492(ECE466:Compilers Unit)33.336 60 R
(4/pg 30)2.25 E(\2512012 Jef)142.155 E 2.25(fH)-.225 G(akner)-2.25 E/F1
13/Times-Roman@0 SF 4.34(arithmetic. If)33.336 120 R 1.09
(the pointer type is "pointer to T", the result of the subscript e)4.34
F 1.091(xpression is)-.195 F(type "T".)33.336 135 Q(The result is al)6.5
E -.13(wa)-.13 G(ys an lv).13 E(alue.)-.325 E<83>33.336 150 Q/F2 13
/Courier@0 SF -1.8(e1.IDENT)4.082 G F1 4.982(:e).9 G 4.982(1m)-4.982 G
1.732(ust be of struct or union type and the de\214nition of that type \
must be)-4.982 F 4.607(complete. IDENT)33.336 165 R 1.357
(must be a member within that type.)4.607 F 1.358
(The result is of the type of the)7.858 F(member)33.336 180 Q 7.245(.I)
-.715 G 3.995(fe)-7.245 G .745(ither the member or e1 ha)-3.995 F 1.134
-.195(ve q)-.26 H .744(uali\214ers, the result type is the inclusi).195
F -.195(ve)-.325 G .744(-or of).195 F .21(those quali\214ers.)33.336 195
R .21(The result is an lv)6.71 F .21(alue if)-.325 F 3.46(fe)-.325 G
3.46(1i)-3.46 G 3.46(sa)-3.46 G 3.46(nl)-3.46 G -.325(va)-3.46 G .211
(lue \(struct and unions returned by a).325 F(function are not lv)33.336
210 Q(alues\).)-.325 E<83>33.336 225 Q F2 -1.8(e1->IDENT)2.35 G F1 3.25
(:T).9 G(his is e)-3.25 E(xactly equi)-.195 E -.325(va)-.325 G(lent to)
.325 E F2 -1.8(\(*e1\).IDENT)2.35 G F1(.).9 E 3.567<8346>33.336 240 S
.317(unction Call: The type of the e)-3.567 F .316
(xpression appearing to the left of the parentheses which)-.195 F .251
(surround the \(possibly empty\) actual ar)33.336 255 R .251
(gument list must be "pointer to function...".)-.234 F(Since)6.752 E
1.807(an e)33.336 270 R 1.807(xpression of function type gets con)-.195
F -.195(ve)-.52 G 1.807(rted to a pointer to a function, this w).195 F
1.807(orks as)-.13 F 3.293(intended. It)33.336 285 R .043
(also means that gi)3.293 F -.195(ve)-.325 G 3.293(naf).195 G .043
(unction pointer)-3.293 F 3.293(,i)-.52 G 3.294(ti)-3.293 G 3.294(sn)
-3.294 G .044(ot necessary to use)-3.294 F F2(*)2.394 E F1 -.195(ex)
2.394 G(plicitly).195 E 3.147
(to call the function, although it is usually good style to do so.)
33.336 300 R 3.146(The ar)9.647 F 3.146(guments are)-.234 F(con)33.336
315 Q -.195(ve)-.52 G .228
(rted as if by assignment to the types speci\214ed in the prototype, b)
.195 F .228(ut ar)-.26 F .228(guments in the)-.234 F -.325(va)33.336 330
S .782(riable portion of the prototype are subject to the usual promoti\
ons discussed abo).325 F -.195(ve)-.195 G 4.032(,a).195 G(s)-4.032 E
1.732(are an)33.336 345 R 4.982(ya)-.195 G -.234(rg)-4.982 G 1.732
(uments of a function called without a prototype visible.).234 F 1.732
(Calling a function)8.232 F 1.108(using an unde\214ned symbol F results\
 in implicit declaration of that symbol as int F\(\), as)33.336 360 R
1.065(discussed in an earlier section.)33.336 375 R 1.065
(The result type is the return type of the function, and is)7.565 F(ne)
33.336 390 Q -.195(ve)-.325 G 3.25(ra).195 G 3.25(nl)-3.25 G -.325(va)
-3.25 G(lue.).325 E<83>33.336 405 Q F2 -1.8(e++)3.085 G F1 3.985(:em).9
G .735(ust be a modi\214able lv)-3.985 F .734(alue of inte)-.325 F(ger)
-.195 E 3.984(,e)-.52 G .734(num, real or pointer type.)-3.984 F .734
(The ef)7.234 F .734(fect of)-.325 F 5.445(this e)33.336 420 R 5.445
(xpression is similar to)-.195 F F2 -1.8(\(temp=e,e=e+1,temp\))7.795 G
F1 11.946(.e).9 G 5.446(is subjected to the binary)-3.25 F(con)33.336
435 Q -.195(ve)-.52 G 1.188
(rsions because of the increment, and the assignment con).195 F -.195
(ve)-.52 G 1.187(rsions when storing the).195 F .486(result back in e.)
33.336 450 R .487(The result type is the type of e \(before an)6.986 F
3.737(yc)-.195 G(on)-3.737 E -.195(ve)-.52 G .487(rsions\) and is ne)
.195 F -.195(ve)-.325 G 3.737(ra).195 G(n)-3.737 E(lv)33.336 465 Q 3.25
(alue. E.g.)-.325 F/F3 10/Courier@0 SF
(char c; printf\("%d",sizeof\(c++\)\);)33.336 477 Q F1 .814
(prints 1, because the result type is char)33.336 492 R 4.064(,n)-.52 G
.814(ot int, e)-4.064 F -.195(ve)-.325 G 4.064(nt).195 G .814
(hough the increment occurs in the)-4.064 F(int type.)33.336 507 Q F2
-1.8(e--)32.436 537 S F1 3.25(:s).9 G(ee abo)-3.25 E -.195(ve)-.195 G
6.016<8343>33.336 552 S 2.766(ompound literals: C99 introduces a w)
-6.016 F 2.766(ay to create a literal of an)-.13 F 6.017(ya)-.195 G
(ggre)-6.017 E -.065(ga)-.195 G 2.767(te type).065 F 4.114
(including struct, union or array)33.336 567 R 10.614(.T)-.845 G 4.113
(his is actually some)-10.614 F 4.113(what handy)-.325 F 10.613(.T)-.845
G 4.113(he syntax is)-10.613 F 2.216
(documented in the C standard and Harbison & Steele.)33.336 582 R 2.216
(The result is an lv)8.716 F 2.216(alue and is)-.325 F 4.77
(modi\214able unless a const quali\214er is used.)33.336 597 R 4.769
(Compound literals are approximately)11.27 F(equi)33.336 612 Q -.325(va)
-.325 G 2.158(lent to ha).325 F 2.158(ving declared a v)-.26 F 2.158
(ariable of the same type with an initializer and then)-.325 F(for)
33.336 627 Q(getting the name of that v)-.234 E
(ariable after it is used in an e)-.325 E(xpression.)-.195 E/F4 13
/Times-Bold@0 SF(Unary Expr)165.598 657 Q(essions \(Le)-.234 E -.13(ve)
-.195 G 3.25(l1).13 G 3.25(5a)-3.25 G(nd 14\))-3.25 E F1<83>33.336 687 Q
F2 1.246 -1.8(\(type_name\) e)3.596 H F1 4.496(:A).9 G 4.496(ne)-4.496 G
1.246(xplicit cast con)-4.691 F -.195(ve)-.52 G 1.246(rsion, as pre).195
F 1.246(viously described.)-.325 F F2 -1.8(type_name)6.846 G F1 1.246
(is an)5.396 F/F5 13/Times-Italic@0 SF(abstr)33.336 702 Q 1.736
(act declar)-.195 F(ation)-.195 E F1 4.986(,w)C 1.736
(hich has the same syntax as a re)-4.986 F 1.736(gular declaration b)
-.195 F 1.736(ut omits the)-.26 F 5.601(identi\214er which w)33.336 717
R 5.6(ould normally be declared.)-.13 F 5.6
(Abstract declarations may contain)12.1 F .957
(quali\214ers such as const, b)33.336 732 R .957(ut the)-.26 F 4.207(yc)
-.195 G .958(an not include storage class speci\214ers, or the)-4.207 F
F2 -1.8(typedef)3.308 G 0 Cg EP
%%Page: 31 31
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 138.492(ECE466:Compilers Unit)33.336 60 R
(4/pg 31)2.25 E(\2512012 Jef)142.155 E 2.25(fH)-.225 G(akner)-2.25 E/F1
13/Times-Roman@0 SF -.13(ke)33.336 120 S(yw)-.065 E 4.87(ord. The)-.13 F
1.62(result is ne)4.87 F -.195(ve)-.325 G 4.87(ra).195 G 4.87(nl)-4.87 G
-.325(va)-4.87 G 1.62(lue and has the type).325 F/F2 13/Courier@0 SF
-1.8(type_name)3.97 G F1 8.12(.c).9 G 1.62(asts are listed at)-8.12 F
1.967(precedence 14, while all other Unary Expressions are at 15.)33.336
135 R 1.967(This resolv)8.467 F 1.967(es a potential)-.195 F
(parsing ambiguity:)33.336 150 Q/F3 10/Courier@0 SF(sizeof\(int\)*p)
33.336 162 Q(is NOT sizeof \( \(int\)*p\)\))90.936 174 Q(it IS)90.936
186 Q(\(sizeof\(int\)\)*p)12 E F1<83>33.336 216 Q F2 -1.8
(sizeof \( type_name \))2.35 G F1(:).9 E F2 .245 -1.8(sizeof expr)32.436
231 T F1 3.495(:T)7.145 G .244
(he sizeof operator returns the size, in bytes, of the gi)-3.495 F -.195
(ve)-.325 G 3.494(ne).195 G .244(xpression or of)-3.689 F .77(the gi)
33.336 246 R -.195(ve)-.325 G 4.02(nt).195 G .77(ype name.)-4.02 F .77
(The return type is)7.27 F F2 -1.8(size_t)3.12 G F1 4.02(,w).9 G .77
(hich is a typedef de\214ned in)-4.02 F F2 -1.8(stddef.h)3.12 G F1(.).9
E 1.445(This type is an inte)33.336 261 R 1.445(ger lar)-.195 F 1.445
(ge enough to represent the lar)-.234 F 1.445(gest possible object.)
-.234 F 1.444(On 64-bit)7.944 F(architectures,)33.336 276 Q F2 -1.8
(size_t)4.13 G F1 1.78(is going to be a)5.93 F F2 1.78 -1.8(long long)
4.13 H F1 5.03(,A).9 G 5.03(to)-5.03 G 1.78
(ne time, the thought of a single)-5.03 F .521(array e)33.336 291 R .521
(xceeding 2GB w)-.195 F .521(as some)-.13 F .521(what scary)-.325 F
3.771(,b)-.845 G .521(ut today might be seen in lar)-4.031 F .521
(ge applications.)-.234 F F2 -1.8(size_t)32.436 306 S F1 1.096
(is not a ne)5.245 F 4.346(ws)-.325 G 1.096
(calar type, and its correspondence to an actual type such as)-4.346 F
F2 -1.8(int)3.446 G F1(is)5.246 E .266(something which is \214x)33.336
321 R .265(ed into the compiler when the compiler is b)-.195 F .265
(uilt for a speci\214c tar)-.26 F(get)-.234 E 3.859(architecture. The)
33.336 336 R .609(result of sizeof is ne)3.859 F -.195(ve)-.325 G 3.859
(ra).195 G 3.859(nl)-3.859 G -.325(va)-3.859 G 3.859(lue. As).325 F .609
(with casts, the type_name could)3.859 F .487(include struct, union or \
enum de\214nitions which could be referenced later as long as a tag)
33.336 351 R -.13(wa)33.336 366 S 7.006(sg).13 G -2.795 -.325(iv e)
-7.006 H 3.756(n, b).325 F 3.757(ut this is considered poor style.)-.26
F(If)10.257 E F2 -1.8(expr)6.107 G F1 3.757(is gi)7.907 F -.195(ve)-.325
G 3.757(n, it must be a v).195 F(alid)-.325 E -.195(ex)33.336 381 S
1.995(pression, b).195 F 1.995(ut it is NO)-.26 F 5.245(Te)-.52 G -.325
(va)-5.57 G 1.994(luated \(b).325 F 1.994(ut see belo)-.26 F 5.244(wa)
-.325 G 1.994(bout v)-5.244 F 1.994(ariable-length arrays\).)-.325 F
(The)8.494 E 3.671(usual con)33.336 396 R -.195(ve)-.52 G 3.671
(rsions do not apply to the top-le).195 F -.195(ve)-.325 G 6.922(lo).195
G 3.672(perand, b)-6.922 F 3.672(ut the)-.26 F 6.922(yd)-.195 G 6.922
(ot)-6.922 G 6.922(oa)-6.922 G 4.062 -.195(ny i)-6.922 H(nner).195 E
-.195(ex)33.336 411 S(pressions:).195 E F3(char c;)33.336 423 Q
(int i1,i2;)33.336 435 Q(i1=sizeof\(c\);)90.936 447 Q(i2=sizeof\(c+1\);)
90.936 459 Q F1 1.014(i1 has the v)33.336 474 R 1.014(alue 1, b)-.325 F
1.014(ut i2 has the v)-.26 F 1.014(alue 4, because c is promoted.)-.325
F 1.014(Note that parentheses)7.514 F 4.104(are not required when the)
33.336 489 R F2 -1.8(expr)6.454 G F1 4.105(form is used.)8.255 F(Ho)
10.605 E(we)-.325 E -.195(ve)-.325 G 5.145 -.52(r, m).195 H(an).52 E
7.355(yp)-.195 G 4.105(rogrammers ha)-7.355 F -.195(ve)-.26 G(dif)33.336
504 Q .529(\214culty remembering all 16 precedence le)-.325 F -.195(ve)
-.325 G .529(ls and use them for clarity).195 F 7.028(.I)-.845 G 3.778
(ti)-7.028 G 3.778(sa)-3.778 G 3.778(ne)-3.778 G .528(rror to)-3.778 F
1.798(apply sizeof to an e)33.336 519 R 1.799
(xpression or type name with an incomplete type.)-.195 F 1.799
(Before C99, the)8.299 F -.325(va)33.336 534 S .174(lue of sizeof w).325
F .174(as truly constant and kno)-.13 F .174(wn at compile-time.)-.325 F
.174(When C99 v)6.674 F .174(ariable length)-.325 F
(arrays are used with sizeof, the length control e)33.336 549 Q
(xpression will be e)-.195 E -.325(va)-.325 G(luated:).325 E F3
(main\(\))33.336 567 Q({)33.336 579 Q(int i,j;)33.336 591 Q(i=1;)81.336
615 Q(j=sizeof\(char [i++]\);)81.336 627 Q
(printf\("i=%d j=%d\\n",i,j\);)81.336 639 Q(})33.336 651 Q F1
(this prints)33.336 672 Q F2 -1.8(i=2 j=1)2.35 G F1(.).9 E<83>33.336 687
Q F2 -1.8(+e)2.35 G -1.8(-e)32.436 702 S F1 3.876(:U).9 G .626
(nary plus and unary ne)-3.876 F -.065(ga)-.195 G .627
(tion require an operand of an).065 F 3.877(ya)-.195 G .627
(rithmetic type.)-3.877 F .627(The result)7.127 F .42
(has the same type as the operand and is ne)33.336 717 R -.195(ve)-.325
G 3.67(ra).195 G 3.67(nl)-3.67 G -.325(va)-3.67 G 3.67(lue. The).325 F
.42(usual unary promotions are)3.67 F(applied to the operand.)33.336 732
Q 0 Cg EP
%%Page: 32 32
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 138.492(ECE466:Compilers Unit)33.336 60 R
(4/pg 32)2.25 E(\2512012 Jef)142.155 E 2.25(fH)-.225 G(akner)-2.25 E/F1
13/Times-Roman@0 SF<83>33.336 120 Q/F2 13/Courier@0 SF -1.8(!e)3.36 G F1
4.26(:L).9 G 1.01(ogical NO)-4.26 F 4.26(Tp)-.52 G 1.01
(erforms the usual unary promotions and is identical to \(e\)==0.)-4.26
F(and)7.511 E .605
(therefore the result is of type int, and the operand may be an)33.336
135 R 3.854(ya)-.195 G .604(rithmetic or pointer type.)-3.854 F
(The result is ne)33.336 150 Q -.195(ve)-.325 G 3.25(ra).195 G 3.25(nl)
-3.25 G -.325(va)-3.25 G(lue.).325 E<83>33.336 165 Q F2 -1.8(~e)2.978 G
F1 3.878(:B).9 G .628(itwise NO)-3.878 F 3.878(Tr)-.52 G .628
(equires an operand of inte)-3.878 F .629(gral type.)-.195 F .629
(The usual unary promotions are)7.129 F 4.134(performed. The)33.336 180
R .883
(result is of the \(possibly promoted\) type of the operand and is ne)
4.134 F -.195(ve)-.325 G 4.133(ra).195 G(n)-4.133 E(lv)33.336 195 Q
(alue.)-.325 E<83>33.336 210 Q F2 -1.8(&e)2.395 G F1 3.295(:T).9 G .045
(he operand must either be an lv)-3.295 F .045
(alue or a function or array type.)-.325 F .045(If the operand is of)
6.545 F 1.049(type T)33.336 225 R 4.299(,t)-.962 G 1.048
(he result is of type pointer to T)-4.299 F 7.548(.T)-.962 G 1.048
(he usual con)-7.548 F -.195(ve)-.52 G 1.048
(rsions and promotions are not).195 F .564(applied to the top-le)33.336
240 R -.195(ve)-.325 G 3.814(lo).195 G 3.814(perand. Note)-3.814 F .564
(that if v)3.814 F .565(ariable a is of type array of int, taking &a)
-.325 F 2.579(yields type "pointer to array of int".)33.336 255 R 2.578
(This does mak)9.078 F 5.828(ead)-.13 G(if)-5.828 E 2.578
(ference when it comes to)-.325 F 1.315(pointer arithmetic. It is in)
33.336 270 R -.325(va)-.52 G 1.316
(lid to apply the address-of operator to a v).325 F 1.316(ariable of re)
-.325 F(gister)-.195 E 1.571(storage class, although man)33.336 285 R
4.82(yc)-.195 G 1.57(ompilers will allo)-4.82 F 4.82(wi)-.325 G 4.82(tw)
-4.82 G 1.57(ith a w)-4.82 F 4.82(arning. Applying)-.13 F 4.82(&t)4.82 G
4.82(oa)-4.82 G .46(function is some)33.336 300 R .461
(what super\215uous since function types are normally con)-.325 F -.195
(ve)-.52 G .461(rted to pointers).195 F(an)33.336 315 Q(yw)-.195 E(ay)
-.13 E(.)-.845 E<83>33.336 330 Q F2 -1.8(*e)2.379 G F1 3.279(:T).9 G
.029(he operand must be of type pointer to T)-3.279 F 3.278(,a)-.962 G
.028(nd the result is of type T)-3.278 F 6.528(.T)-.962 G .028
(he result is an)-6.528 F(lv)33.336 345 Q 1.615
(alue unless T is a function or array type.)-.325 F 1.616
(But, since the usual unary con)8.116 F -.195(ve)-.52 G 1.616
(rsions are).195 F(applied to the operand, if a is an array type,)33.336
360 Q F2 -1.8(*a)2.35 G F1(is equi)4.15 E -.325(va)-.325 G(lent to).325
E F2 -1.8(a[0])2.35 G F1(.).9 E<83>33.336 375 Q F2 -1.8(--e)2.35 G -1.8
(++e)32.436 390 S F1 7.84(:T).9 G 4.59(hese pre-increment and pre-decre\
ment operators require a modi\214able lv)-7.84 F(alue)-.325 E
(operand and their result is ne)33.336 405 Q -.195(ve)-.325 G 3.25(ra)
.195 G 3.25(nl)-3.25 G -.325(va)-3.25 G 3.25(lue. The).325 F 3.25(ya)
-.195 G(re equi)-3.25 E -.325(va)-.325 G(lent to).325 E F2 -1.8(e-=1)
2.35 G F1(and)4.15 E F2 -1.8(e+=1)2.35 G F1(.).9 E/F3 13/Times-Bold@0 SF
(Multiplicati)166.098 435 Q .26 -.13(ve e)-.13 H(xpr).13 E(essions \(Le)
-.234 E -.13(ve)-.195 G 3.25(l1).13 G(3\))-3.25 E F1<83>33.336 465 Q F2
-1.8(e1 * e2)2.35 G 4.2<8365>32.436 480 S 4.2(1/e)-6 G(2)-6 E 5.015
<8365>32.436 495 S 5.015(1%e)-6.815 G(2)-6.815 E F1 4.065(:E)-.9 G .815
(ach operand must be of arithmetic type.)-4.065 F .816
(The unary promotion con)7.316 F -.195(ve)-.52 G(rsions).195 E .644
(are performed on e1 and e2 to widen inte)33.336 510 R .644
(gers small than int, then the binary con)-.195 F -.195(ve)-.52 G
(rsions).195 E .422
(are performed to promote e1 or e2 to the greater common type if the)
33.336 525 R 3.672(ya)-.195 G .423(re not already the)-3.672 F
(same type.)33.336 540 Q(The result is of this type and is ne)6.5 E
-.195(ve)-.325 G 3.25(ra).195 G 3.25(nl)-3.25 G -.325(va)-3.25 G(lue.)
.325 E F3(Additi)181.263 570 Q .26 -.13(ve e)-.13 H(xpr).13 E
(essions \(Le)-.234 E -.13(ve)-.195 G 3.25(l1).13 G(2\))-3.25 E F1<83>
33.336 600 Q F2 -1.8(e1 + e2)2.35 G F1<83>33.336 615 Q F2 4.574 -1.8
(e1 - e2)6.924 H F1 7.824(:T).9 G 4.573(he same unary and binary con)
-7.824 F -.195(ve)-.52 G 4.573(rsions are applied as discused for).195 F
(multiplicati)33.336 630 Q .884 -.195(ve o)-.325 H .494
(perators immediately abo).195 F -.195(ve)-.195 G 6.994(.T).195 G .494
(he operands may both be arithmetic types,)-6.994 F .727(or one operand\
 may be of pointer type \(it can not be a pointer to a function, a poin\
ter to)33.336 645 R -.26(vo)33.336 660 S .337(id, or a pointer to an).26
F .337(ything else whose size is not kno)-.195 F .338
(wn\) and the other of inte)-.325 F .338(ger type.)-.195 F .005
(In the latter case,)33.336 675 R/F4 13/Times-Italic@0 SF .005
(pointer arithmetic)3.255 F F1 .005(is performed.)3.255 F .004
(Let us say e1 is the pointer type and e2)6.505 F 2.372(is the inte)
33.336 690 R 2.373(ger type.)-.195 F -.195(Fo)8.873 G 5.623(ra).195 G
2.373(ddition, the actual v)-5.623 F 2.373(alue of the pointer)-.325 F
5.623(,w)-.52 G 2.373(hich is a memory)-5.623 F 2.892
(address, is incremented by)33.336 705 R F2 -1.8(e2*sizeof\(*e1\))5.242
G F1 9.392(.F).9 G 2.892(or subtraction, it is decremented.)-9.587 F
(The)9.391 E(resulting type is the pointer type.)33.336 720 Q -.195(Fo)
33.336 741 S 3.68(rs).195 G .43(ubtraction only)-3.68 F 3.68(,B)-.845 G
-.52(OT)-3.68 G 3.68(Ho).52 G .43
(perands may be pointers to the same \(or compatible\) types.)-3.68 F 0
Cg EP
%%Page: 33 33
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 138.492(ECE466:Compilers Unit)33.336 60 R
(4/pg 33)2.25 E(\2512012 Jef)142.155 E 2.25(fH)-.225 G(akner)-2.25 E/F1
13/Times-Roman@0 SF .477(Then the resulting memory address is)33.336 120
R/F2 13/Courier@0 SF -1.8(\(e1-e2\)/sizeof\(*e1\))2.826 G F1 6.976(.T).9
G .476(his is not e)-6.976 F .476(xactly ho)-.195 F 3.726(wt)-.325 G(he)
-3.726 E .04(standard de\214nes it, b)33.336 135 R .041(ut it is ho)-.26
F 3.291(wt)-.325 G .041(he compiler will probably implement it.)-3.291 F
.041(If either pointer)6.541 F .343(is not really pointing at an object\
 of the appropriate type, the results are not de\214ned.)33.336 150 R
(The)6.842 E 2.284(result type of subtracting tw)33.336 165 R 5.534(op)
-.13 G 2.285(ointers is of type)-5.534 F F2 -1.8(ptrdiff_t)4.635 G F1
5.535(,w).9 G 2.285(hich is going to be an)-5.535 F(inte)33.336 180 Q
.558(ger type lar)-.195 F .558(ge enough to hold an)-.234 F 3.808(ym)
-.195 G .558(emory address.)-3.808 F .558(As with)7.058 F F2 -1.8
(size_t)2.908 G F1(,).9 E F2 -1.8(ptrdiff_t)2.908 G F1 .558(is an)4.708
F(architecture-speci\214c typedef.)33.336 195 Q(The result of an additi)
6.5 E .39 -.195(ve ex)-.325 H(pression is ne).195 E -.195(ve)-.325 G
3.25(ra).195 G 3.25(nl)-3.25 G -.325(va)-3.25 G(lue.).325 E/F3 13
/Times-Bold@0 SF(Shift expr)191.604 225 Q(essions \(Le)-.234 E -.13(ve)
-.195 G 3.25(l1).13 G(1\))-3.25 E F1<83>33.336 255 Q F2 -1.8(e1 << e2)
2.35 G F1<83>33.336 270 Q F2 .191 -1.8(e1 >> e2)2.541 H F1 3.441(:E).9 G
.191(ach operand must ha)-3.441 F .581 -.195(ve i)-.26 H(nte).195 E .192
(ger type and the unary promotions are applied to)-.195 F .323
(each separately)33.336 285 R 6.823(.T)-.845 G .323
(here is no need to perform binary con)-6.823 F -.195(ve)-.52 G .323
(rsions to promote the operands).195 F 1.049(to a common type.)33.336
300 R 1.05(The result type is ne)7.549 F -.195(ve)-.325 G 4.3(ra).195 G
4.3(nl)-4.3 G -.325(va)-4.3 G 1.05(lue and is of the \(possibly con).325
F -.195(ve)-.52 G(rted\)).195 E(type of the left operand.)33.336 315 Q
(Results are unde\214ned if e2 is ne)6.5 E -.065(ga)-.195 G(ti).065 E
-.195(ve)-.325 G(.).195 E F3(Relational expr)176.44 345 Q(essions \(Le)
-.234 E -.13(ve)-.195 G 3.25(l1).13 G(0\))-3.25 E F1<83>33.336 375 Q F2
-1.8(e1 < e2)2.35 G F1<83>33.336 390 Q F2 -1.8(e1 > e2)2.35 G F1<83>
33.336 405 Q F2 -1.8(e1 <= e2)2.35 G F1<83>33.336 420 Q F2 2.66 -1.8
(e1 >= e2)5.01 H F1 5.91(:T).9 G 2.66(he operands must be inte)-5.91 F
2.659(ger or real types, or pointers to the same or)-.195 F .107
(compatible types.)33.336 435 R .107(The binary con)6.607 F -.195(ve)
-.52 G .108(rsions are applied.).195 F .108
(The result is an int which is either)6.608 F 4.17(0o)33.336 450 S 4.17
(r1a)-4.17 G .92(nd is ne)-4.17 F -.195(ve)-.325 G 4.169(ra).195 G 4.169
(nl)-4.169 G -.325(va)-4.169 G 4.169(lue. F).325 F .919
(or comparisons between inte)-.195 F .919(gers, signedness matters, as)
-.195 F 3.254(we shall see when we study the assembly language which mu\
st be emitted.)33.336 465 R(Some)9.754 E 2.086
(compilers will catch an error such as)33.336 480 R F2 2.086 -1.8
(if \(ui<0\))4.436 H F1(where)6.236 E F2 -1.8(ui)4.436 G F1 2.085
(is an unsigned int.)6.236 F 2.085(The C)8.585 F 6.687(standard e)33.336
495 R 6.688
(xplains rules for comparisons between pointers which are some)-.195 F
(what)-.325 E 5.232(theoretical. In)33.336 510 R 1.981
(most architectures, the pointers are compared as if the)5.232 F 5.231
(yw)-.195 G 1.981(ere unsigned)-5.231 F(inte)33.336 525 Q
(gers of the appropriate width.)-.195 E F3(Equality expr)184.376 555 Q
(essions \(Le)-.234 E -.13(ve)-.195 G 3.25(l9).13 G(\))-3.25 E F1<83>
33.336 585 Q F2 -1.8(e1 == e2)2.35 G F1<83>33.336 600 Q F2 .787 -1.8
(e1 != e2)3.137 H F1 4.037(:T).9 G .787(he usual binary con)-4.037 F
-.195(ve)-.52 G .788(rsions are performed on the operands, which may be)
.195 F .541(of an)33.336 615 R 3.791(ya)-.195 G .541
(rithmetic type, or pointers to compatible types.)-3.791 F .54
(Pointers of an)7.04 F 3.79(yt)-.195 G .54(ype may al)-3.79 F -.13(wa)
-.13 G(ys).13 E 1.45(be compared ag)33.336 630 R 1.45(ainst a v)-.065 F
1.45(oid *, or ag)-.26 F 1.45(ainst the constant 0.)-.065 F 1.451
(structs and unions can not be)7.95 F .8(compared, although the)33.336
645 R 4.05(yc)-.195 G .8(an be assigned.)-4.05 F .8
(\(The reason is that because of padding issues)7.3 F .188(\(to be co)
33.336 660 R -.195(ve)-.195 G .189(red in a later unit\) tw).195 F 3.439
(os)-.13 G .189(tructures or unions may ha)-3.439 F .579 -.195(ve i)-.26
H .189(dentical member v).195 F(alues,)-.325 E -.26(bu)33.336 675 S
4.704(tt).26 G 1.454(heir memory images may dif)-4.704 F 1.453
(fer in the padding re)-.325 F 4.703(gions.\) The)-.195 F 1.453
(result of an equality)4.703 F -.195(ex)33.336 690 S
(pression is an int which is either 0 or 1 and is ne).195 E -.195(ve)
-.325 G 3.25(ra).195 G 3.25(nl)-3.25 G -.325(va)-3.25 G(lue.).325 E F3
(Bitwise expr)172.468 720 Q(essions \(Le)-.234 E -.13(ve)-.195 G
(ls 8, 7, 6\)).13 E 0 Cg EP
%%Page: 34 34
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 138.492(ECE466:Compilers Unit)33.336 60 R
(4/pg 34)2.25 E(\2512012 Jef)142.155 E 2.25(fH)-.225 G(akner)-2.25 E/F1
13/Times-Roman@0 SF<83>33.336 120 Q/F2 13/Courier@0 SF -1.8(e1 & e2)2.35
G F1<83>33.336 135 Q F2 -1.8(e1 ^ e2)2.35 G F1<83>33.336 150 Q F2 3.853
-1.8(e1 | e2)6.203 H F1 7.104(:T).9 G 3.854
(hese are listed in decreasing order of precedence.)-7.104 F 3.854
(The usual binary)10.354 F(con)33.336 165 Q -.195(ve)-.52 G .547
(rsions are applied to the operands, which must be of inte).195 F .547
(ger type.)-.195 F .546(The result is not)7.047 F 1.096(an lv)33.336 180
R 4.346(alue. In)-.325 F 1.096(the author')4.346 F 4.346(so)-.715 G
1.096(pinion, the bitwise operators should ha)-4.346 F 1.486 -.195(ve b)
-.26 H 1.096(een placed abo).195 F -.195(ve)-.195 G .166
(the relational and equality operators.)33.336 195 R(Consider:)6.665 E
F2 .165 -1.8(if \(i&0x0F==3\))2.515 H F1 3.415(,t).9 G .165
(his compares 0x0F to 3)-3.415 F .405(and then bitwise AND')33.336 210 R
3.655(st)-.715 G .405(he resulting 1 or 0 with the inte)-3.655 F .405
(ger i.)-.195 F .406(This is almost ne)6.906 F -.195(ve)-.325 G 3.656
(rw).195 G(hat)-3.656 E .14(is desired!)33.336 225 R .14
(Unfortunately it w)6.64 F .139
(ould be a little late and cause a lot of confusion to change it)-.13 F
(no)33.336 240 Q -.845(w.)-.325 G/F3 13/Times-Bold@0 SF(Logical expr)
178.604 270 Q(essions \(Le)-.234 E -.13(ve)-.195 G(ls 5, 4\)).13 E F1
<83>33.336 300 Q F2 -1.8(e1 && e2)2.35 G F1<83>33.336 315 Q F2 1.993
-1.8(e1 || e2)4.343 H F1 5.243(:T).9 G 1.994
(he && operator has higher precedence.)-5.243 F 1.994
(These operators are sometimes)8.494 F 1.1(called "short-circuit" opera\
tors because it is possible that e2 will not be e)33.336 330 R -.325(va)
-.325 G 1.099(luated if the).325 F .238(result can be determined solely\
 from e1 \(i.e. e1 is zero for && or non-zero for ||\).)33.336 345 R
.239(This is)6.739 F(put to good use with C idioms such as)33.336 360 Q
/F4 10/Courier@0 SF(char *p;)33.336 372 Q(/*...*/)33.336 384 Q
(if \(p && p[0]!='A'\))33.336 396 Q F1 .74(The operands to && and || ar\
e each subject to the usual unary promotions and can be of)33.336 411 R
(an)33.336 426 Q 4.66(ya)-.195 G 1.411(rithmetic or pointer type.)-4.66
F(The)7.911 E 4.661(ya)-.195 G 1.411
(re compared to 0 as if by the == or != operator)-4.661 F(.)-.715 E .549
(Note the implicit comparison between a pointer and NULL abo)33.336 441
R -.195(ve)-.195 G 7.049(.T).195 G .548(he result of the &&)-7.049 F
(or || operators is an int and is ne)33.336 456 Q -.195(ve)-.325 G 3.25
(ra).195 G 3.25(nl)-3.25 G -.325(va)-3.25 G(lue.).325 E F3 -1.196(Te)
188.335 486 S -.195(rn)1.196 G(ary expr).195 E(ession \(Le)-.234 E -.13
(ve)-.195 G 3.25(l3).13 G(\))-3.25 E F1<83>33.336 516 Q F2 -1.8
(e1?e2:e3)4.68 G F1 5.58(:N).9 G 5.58(oo)-5.58 G 2.331
(ther language before C had an)-5.58 F 2.331(ything lik)-.195 F 5.581
(et)-.13 G 2.331(he ternary)-5.581 F 5.581(,o)-.845 G 5.581(rc)-5.581 G
(onditional)-5.581 E 4.92(operator! e1)33.336 531 R 1.669(must be arith\
metic or pointer type, and is compared to 0 as if by the ==)4.92 F
(operator)33.336 546 Q 9.39(.I)-.715 G 6.14(fe)-9.39 G 6.14(1i)-6.14 G
6.14(sn)-6.14 G 2.89(on-zero, then e2 is e)-6.14 F -.325(va)-.325 G
2.891(luated and that becomes the result of the).325 F -.195(ex)33.336
561 S .238(pression, otherwise e3 is e).195 F -.325(va)-.325 G 3.488
(luated. e2).325 F .238(and e3 can be of an)3.488 F 3.488(yt)-.195 G
.237(ype and are subject to the)-3.488 F 3.267(usual unary con)33.336
576 R -.195(ve)-.52 G 6.517(rsions. If).195 F(the)6.517 E 6.517(ya)-.195
G 3.268(re not of the same type, the rules are some)-6.517 F(what)-.325
E(comple)33.336 591 Q 6.076(x-b)-.195 G 2.826(asically the)-6.076 F
6.076(ym)-.195 G 2.826(ust be compatible as if by assignment, so the e)
-6.076 F(xpression)-.195 E F2 -1.8(a=b?c:d)32.436 606 S F1 .656
(has to w)4.806 F 3.906(ork. Refer)-.13 F .657(to the C standard or)
3.906 F/F5 13/Times-Italic@0 SF .657(Harbison & Steele)3.907 F 3.907(,p)
-.13 G 1.047 -.195(g. 2)-3.907 H(45).195 E F1 7.157(.T)C .657(he result)
-7.157 F 1.453(of the ternary e)33.336 621 R 1.453
(xpression is not an lv)-.195 F 1.452(alue, although C++ allo)-.325 F
(ws)-.325 E F2 -1.8(\(c?a:b\)=v)3.802 G F1 4.702(,a).9 G 4.702(sd)-4.702
G 4.702(os)-4.702 G(ome)-4.702 E(GCC C compilers.)33.336 636 Q F3
(Assignment expr)175.718 666 Q(essions \(Le)-.234 E -.13(ve)-.195 G 3.25
(l2).13 G(\))-3.25 E F1<83>33.336 696 Q F2 -1.8(e1=e2)2.35 G F1<83>
33.336 711 Q F2 -1.8(e1 += e2)2.35 G F1<83>33.336 726 Q F2 -1.8
(e1 -= e2)2.35 G F1<83>33.336 741 Q F2 -1.8(e1 *= e2)2.35 G 0 Cg EP
%%Page: 35 35
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 138.492(ECE466:Compilers Unit)33.336 60 R
(4/pg 35)2.25 E(\2512012 Jef)142.155 E 2.25(fH)-.225 G(akner)-2.25 E/F1
13/Times-Roman@0 SF<83>33.336 120 Q/F2 13/Courier@0 SF -1.8(e1 /= e2)
2.35 G F1<83>33.336 135 Q F2 -1.8(e1 %= e2)2.35 G F1<83>33.336 150 Q F2
-1.8(e1 ^= e2)2.35 G F1<83>33.336 165 Q F2 -1.8(e1 |= e2)2.35 G F1<83>
33.336 180 Q F2 -1.8(e1 &= e2)2.35 G F1<83>33.336 195 Q F2 -1.8
(e1 <<= e2)2.35 G F1<83>33.336 210 Q F2 1.245 -1.8(e1 >>= e2)3.595 H F1
4.495(:A)5.395 G 1.245
(ll of the assignment operators are at the same precedence le)-4.495 F
-.195(ve)-.325 G 4.495(la).195 G 1.246(nd are)-4.495 F(right-associati)
33.336 225 Q -.195(ve)-.325 G 11.492(.T).195 G 4.992
(he compound assignment operators are equi)-11.492 F -.325(va)-.325 G
4.992(lent to a simple).325 F 1.734
(assignment combined with the binary operator)33.336 240 R 4.984(,e)-.52
G 4.984(.g. a+=b)-4.984 F 1.735(is equi)4.985 F -.325(va)-.325 G 1.735
(lent to a=a+b).325 F 8.235(.T)-.52 G(he)-8.235 E 2.557(types of e1 and\
 e2 must be compatible, after applying the usual promotions and the)
33.336 255 R 2.5(assignment con)33.336 270 R -.195(ve)-.52 G 5.75
(rsions. e1).195 F 2.5(must be a modi\214able lv)5.75 F 2.5
(alue and can not be quali\214ed by)-.325 F F2 -1.8(const)32.436 285 S
F1 7.776(.I).9 G 4.525(ti)-7.776 G 4.525(sn)-4.525 G 1.275
(ot possible to "assign a)-4.525 F -.13(wa)-.195 G 1.275
(y" quali\214ers under a pointer type.).13 F 1.275(E.g. it is not)7.775
F -.325(va)33.336 300 S .726(lid to assign a \(const int *\) to a v).325
F .727(ariable of type \(int *\), because doing so w)-.325 F .727
(ould allo)-.13 F(w)-.325 E .187
(the underlying \(const int\) to be modi\214ed.)33.336 315 R .187
(Of course, the programmer can circumv)6.687 F .187(ent this)-.195 F
(with an e)33.336 330 Q(xplicit cast.)-.195 E 1.932
(The resulting type of an assignment is the original type of e1.)33.336
351 R 1.932(The result is ne)8.432 F -.195(ve)-.325 G 5.183(ra).195 G(n)
-5.183 E(lv)33.336 366 Q 3.952(alue. In)-.325 F -.195(ve)3.952 G .702
(ry early v).195 F .702
(ersions of C, structs and unions could not be assigned.)-.195 F .702
(This is no)7.202 F .94(longer the case, b)33.336 381 R .94
(ut the assignment operator still can not be used to cop)-.26 F 4.19
(yaw)-.13 G .941(hole array)-4.19 F(.)-.845 E 2.307
(This is because if e1 is of array type, the usual con)33.336 396 R
-.195(ve)-.52 G 2.306(rsions are applied, making it a).195 F
(pointer type which is not an lv)33.336 411 Q(alue.)-.325 E/F3 13
/Times-Bold@0 SF(Comma Expr)184.747 441 Q(essions \(Le)-.234 E -.13(ve)
-.195 G 3.25(l1).13 G(\))-3.25 E F1<83>33.336 471 Q F2 -1.8(e1,e2)5.73 G
F1 6.63(:T).9 G 3.38(he comma, or sequential operator is also an in)
-6.63 F -.195(ve)-.52 G 3.38(ntion of C.).195 F 3.381(e1 is fully)9.881
F -.325(eva)33.336 486 S 5.012(luated. An).325 F 5.012(yv)-.195 G 1.762
(alue which it may produce is discarded, then e2 is e)-5.337 F -.325(va)
-.325 G 1.761(luated and the).325 F .377(result is the v)33.336 501 R
.378(alue of the o)-.325 F -.195(ve)-.195 G .378(rall e).195 F 3.628
(xpression. There)-.195 F .378(is no requirement that e1 and e2 be of)
3.628 F 1.92(compatible types.)33.336 516 R 1.919
(The result type is the type of e2 and is not an lv)8.42 F 5.169
(alue. Harbison)-.325 F(&)5.169 E 1.003(Steele says that unary con)
33.336 531 R -.195(ve)-.52 G 1.004(rsions are applied, b).195 F 1.004
(ut the current ISO C standard does not,)-.26 F .097
(and gcc seems to follo)33.336 546 R 3.347(wt)-.325 G .097(he latter)
-3.347 F 3.346(,e)-.52 G(.g.)-3.346 E F2 .096 -1.8(sizeof \(i,c\))2.446
H F1 .096(where i is an int and c is a char)4.246 F 3.346(,i)-.52 G
3.346(s1)-3.346 G(.)-3.346 E 2.129(Note that syntactically)33.336 567 R
5.379(,ac)-.845 G 2.129(omma e)-5.379 F 2.129
(xpression is at the top le)-.195 F -.195(ve)-.325 G 5.38(lo).195 G 5.38
(ft)-5.38 G 2.13(he de\214nition of an)-5.38 F -.195(ex)33.336 582 S
4.724(pression. There).195 F 1.474(are places in the grammar where an e)
4.724 F 1.474(xpression is permitted b)-.195 F 1.474(ut this)-.26 F .609
(could cause confusion with other uses of the comma tok)33.336 597 R
.609(en, and therefore in those places)-.13 F 1.222
(the grammar speci\214es an assignment_e)33.336 612 R 1.222
(xpression \(i.e. starting at Le)-.195 F -.195(ve)-.325 G 4.472(l2).195
G 4.472(\). These)-4.472 F(places)4.472 E .035
(are function calls, enumeration v)33.336 627 R .036
(alue declarations, initializers, bit \214eld length speci\214ers in)
-.325 F(struct/union de\214nitions.)33.336 642 Q 0 Cg EP
%%Trailer
end
%%EOF
