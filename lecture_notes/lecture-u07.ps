%!PS-Adobe-3.0
%%Creator: groff version 1.19.1
%%CreationDate: Mon Dec 10 23:43:49 2012
%%DocumentNeededResources: font Times-Roman
%%+ font Times-Bold
%%+ font Courier
%%+ font Times-Italic
%%DocumentSuppliedResources: procset grops 1.19 1
%%Pages: 13
%%PageOrder: Ascend
%%DocumentMedia: Default 612 792 0 () ()
%%Orientation: Portrait
%%EndComments
%%BeginDefaults
%%PageMedia: Default
%%EndDefaults
%%BeginProlog
%%BeginResource: procset grops 1.19 1
%!PS-Adobe-3.0 Resource-ProcSet
/setpacking where{
pop
currentpacking
true setpacking
}if
/grops 120 dict dup begin
/SC 32 def
/A/show load def
/B{0 SC 3 -1 roll widthshow}bind def
/C{0 exch ashow}bind def
/D{0 exch 0 SC 5 2 roll awidthshow}bind def
/E{0 rmoveto show}bind def
/F{0 rmoveto 0 SC 3 -1 roll widthshow}bind def
/G{0 rmoveto 0 exch ashow}bind def
/H{0 rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/I{0 exch rmoveto show}bind def
/J{0 exch rmoveto 0 SC 3 -1 roll widthshow}bind def
/K{0 exch rmoveto 0 exch ashow}bind def
/L{0 exch rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/M{rmoveto show}bind def
/N{rmoveto 0 SC 3 -1 roll widthshow}bind def
/O{rmoveto 0 exch ashow}bind def
/P{rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/Q{moveto show}bind def
/R{moveto 0 SC 3 -1 roll widthshow}bind def
/S{moveto 0 exch ashow}bind def
/T{moveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/SF{
findfont exch
[exch dup 0 exch 0 exch neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/MF{
findfont
[5 2 roll
0 3 1 roll
neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/level0 0 def
/RES 0 def
/PL 0 def
/LS 0 def
/MANUAL{
statusdict begin/manualfeed true store end
}bind def
/PLG{
gsave newpath clippath pathbbox grestore
exch pop add exch pop
}bind def
/BP{
/level0 save def
1 setlinecap
1 setlinejoin
72 RES div dup scale
LS{
90 rotate
}{
0 PL translate
}ifelse
1 -1 scale
}bind def
/EP{
level0 restore
showpage
}bind def
/DA{
newpath arcn stroke
}bind def
/SN{
transform
.25 sub exch .25 sub exch
round .25 add exch round .25 add exch
itransform
}bind def
/DL{
SN
moveto
SN
lineto stroke
}bind def
/DC{
newpath 0 360 arc closepath
}bind def
/TM matrix def
/DE{
TM currentmatrix pop
translate scale newpath 0 0 .5 0 360 arc closepath
TM setmatrix
}bind def
/RC/rcurveto load def
/RL/rlineto load def
/ST/stroke load def
/MT/moveto load def
/CL/closepath load def
/Fr{
setrgbcolor fill
}bind def
/setcmykcolor where{
pop
/Fk{
setcmykcolor fill
}bind def
}if
/Fg{
setgray fill
}bind def
/FL/fill load def
/LW/setlinewidth load def
/Cr/setrgbcolor load def
/setcmykcolor where{
pop
/Ck/setcmykcolor load def
}if
/Cg/setgray load def
/RE{
findfont
dup maxlength 1 index/FontName known not{1 add}if dict begin
{
1 index/FID ne{def}{pop pop}ifelse
}forall
/Encoding exch def
dup/FontName exch def
currentdict end definefont pop
}bind def
/DEFS 0 def
/EBEGIN{
moveto
DEFS begin
}bind def
/EEND/end load def
/CNT 0 def
/level1 0 def
/PBEGIN{
/level1 save def
translate
div 3 1 roll div exch scale
neg exch neg exch translate
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[]0 setdash
/setstrokeadjust where{
pop
false setstrokeadjust
}if
/setoverprint where{
pop
false setoverprint
}if
newpath
/CNT countdictstack def
userdict begin
/showpage{}def
/setpagedevice{}def
}bind def
/PEND{
clear
countdictstack CNT sub{end}repeat
level1 restore
}bind def
end def
/setpacking where{
pop
setpacking
}if
%%EndResource
%%EndProlog
%%BeginSetup
%%BeginFeature: *PageSize Default
<< /PageSize [ 612 792 ] /ImagingBBox null >> setpagedevice
%%EndFeature
%%IncludeResource: font Times-Roman
%%IncludeResource: font Times-Bold
%%IncludeResource: font Courier
%%IncludeResource: font Times-Italic
grops begin/DEFS 1 dict def DEFS begin/u{.001 mul}bind def end/RES 72
def/PL 792 def/LS false def/ENC0[/asciicircum/asciitilde/Scaron/Zcaron
/scaron/zcaron/Ydieresis/trademark/quotesingle/Euro/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/space/exclam/quotedbl/numbersign/dollar/percent
/ampersand/quoteright/parenleft/parenright/asterisk/plus/comma/hyphen
/period/slash/zero/one/two/three/four/five/six/seven/eight/nine/colon
/semicolon/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M/N/O
/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash/bracketright/circumflex
/underscore/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y
/z/braceleft/bar/braceright/tilde/.notdef/quotesinglbase/guillemotleft
/guillemotright/bullet/florin/fraction/perthousand/dagger/daggerdbl
/endash/emdash/ff/fi/fl/ffi/ffl/dotlessi/dotlessj/grave/hungarumlaut
/dotaccent/breve/caron/ring/ogonek/quotedblleft/quotedblright/oe/lslash
/quotedblbase/OE/Lslash/.notdef/exclamdown/cent/sterling/currency/yen
/brokenbar/section/dieresis/copyright/ordfeminine/guilsinglleft
/logicalnot/minus/registered/macron/degree/plusminus/twosuperior
/threesuperior/acute/mu/paragraph/periodcentered/cedilla/onesuperior
/ordmasculine/guilsinglright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE
/Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex
/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis
/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn
/germandbls/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash
/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]def
/Times-Italic@0 ENC0/Times-Italic RE/Courier@0 ENC0/Courier RE
/Times-Bold@0 ENC0/Times-Bold RE/Times-Roman@0 ENC0/Times-Roman RE
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 122.742(ECE466:Compilers Unit)69.336 60 R(7/pg 1)
2.25 E(\2512012 Jef)126.405 E 2.25(fH)-.225 G(akner)-2.25 E/F1 13
/Times-Bold@0 SF(The Back End)227.601 120 Q/F2 13/Times-Roman@0 SF 2.557
(The role of the "back end" is to translate architecture-neutral interm\
ediate code \(e.g.)33.336 156 R .135("quads"\) into pure assembly langu\
age which can be passed on to the assembler and link)33.336 171 R(er)
-.13 E(to produce an e)33.336 186 Q -.195(xe)-.195 G(cutable program.)
.195 E 3.099(Prior to reaching the back end, the quads may ha)33.336 216
R 3.489 -.195(ve b)-.26 H 3.099(een subjected to architecture-).195 F
2.526(independent optimizations, e.g. using data \215o)33.336 231 R
5.776(wa)-.325 G 2.526(nalysis to eliminate computations of)-5.776 F
(constants, eliminating unreachable code, etc.)33.336 246 Q
(This will be the subject of the ne)6.5 E(xt unit.)-.195 E 5.281(The ba\
ck end must generate assembly language which correctly implements the)
33.336 276 R(programmer')33.336 291 Q 4.794(ss)-.715 G 1.545
(ource intent, as represented by the quads, b)-4.794 F 1.545(ut moreo)
-.26 F -.195(ve)-.195 G 4.795(rs).195 G 1.545(hould produce)-4.795 F
("optimal" assembly language.)33.336 306 Q(There are three basic tasks:)
6.5 E 1.148(1\) Instruction selection: mapping IR operations to a)33.336
351 R -.325(va)-.26 G 1.148(ilable assembly language opcodes).325 F
(and addressing modes)33.336 366 Q 8.182(2\) Instruction scheduling: re\
-ordering assembly language opcodes to impro)33.336 396 R -.195(ve)-.195
G(performance, especially on architectures with multiple e)33.336 411 Q
-.195(xe)-.195 G(cution units.).195 E 1.586(3\) Re)33.336 441 R 1.586
(gister assignment: deciding when v)-.195 F 1.586(alues \(v)-.325 F
1.586(ariables, temporaries\) should occup)-.325 F 4.836(ya)-.13 G(re)
33.336 456 Q(gister)-.195 E 3.25(,a)-.52 G(nd which re)-3.25 E(gister)
-.195 E(.)-.715 E(Generally)33.336 486 Q 3.666(,")-.845 G .416
(optimal" is understood to mean speed of e)-3.666 F -.195(xe)-.195 G
.416(cution, b).195 F .416(ut other criteria, such as)-.26 F
(code size or cache performance, may also be weighed.)33.336 501 Q
(Unfortunately)33.336 531 Q 7.11(,t)-.845 G 3.86
(hese three steps are interdependent, making the back end the most)-7.11
F(dif)33.336 546 Q .282(\214cult part of the compiler)-.325 F 6.782(.E)
-.715 G .282(.g. assigning a v)-6.782 F .282(alue to a re)-.325 F .282
(gister as opposed to a memory)-.195 F 1.844(location changes instructi\
on selection, which in turn changes scheduling.)33.336 561 R 1.843
(At the same)8.343 F 7.502
(time, reordering the instructions may change re)33.336 576 R 7.503
(gister con\215icts and require a)-.195 F(reassignment.)33.336 591 Q
1.453(The characteristics of processors continue to change as processor\
 technology adv)33.336 621 R(ances,)-.325 E .848(so the algorithms whic\
h made sense ten years ago may no longer be suitable.)33.336 636 R .848
(Back end)7.348 F .277(optimization continues to be an acti)33.336 651 R
.666 -.195(ve a)-.325 H .276(rea of compiler research and de).195 F
-.195(ve)-.325 G 3.526(lopment. These).195 F(problems are almost al)
33.336 666 Q -.13(wa)-.13 G(ys NP-complete.).13 E F1
(Instruction Selection)209.739 726 Q 0 Cg EP
%%Page: 2 2
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 140.742(ECE466:Compilers Unit)33.336 60 R(7/pg 2)
2.25 E(\2512012 Jef)144.405 E 2.25(fH)-.225 G(akner)-2.25 E/F1 13
/Times-Roman@0 SF .451
(It is not necessarily the case that the IR is strictly more po)33.336
120 R .451(werful or strictly less po)-.325 F(werful)-.325 E .213
(than the tar)33.336 135 R .213(get assembly language.)-.234 F(In)6.712
E -.325(va)-.52 G(riably).325 E 3.462(,s)-.845 G .212
(ome IR operations will not be e)-3.462 F(xpressible)-.195 E .467(in a \
single assembly instruction, and at the same time, some sequences of IR\
 instructions)33.336 150 R(may be coalesced into a single instruction.)
33.336 165 Q 2.308(There are tw)33.336 186 R 5.558(ob)-.13 G 2.307
(asic approaches to instruction selection: linear and tree-based.)-5.558
F 2.307(In the)8.807 F(latter)33.336 201 Q 3.466(,t)-.52 G .216(he inte\
rmediate representation is placed into a tree form where the nodes repr\
esent)-3.466 F 1.014(operations and the edges represent the \215o)33.336
216 R 4.264(wo)-.325 G 4.264(fv)-4.264 G 4.264(alues. The)-4.589 F -.26
(av)4.264 G 1.014(ailable assembly language)-.065 F 2.038(instructions \
are also represented as miniature trees or "tiles" which illustrate ho)
33.336 231 R 5.288(wt)-.325 G(hat)-5.288 E .855
(particular instruction transforms v)33.336 246 R 4.105(alues. Each)
-.325 F .855(of these tiles may ha)4.105 F 1.244 -.195(ve a)-.26 H 4.104
(na).195 G .854(ssociated cost)-4.104 F 4.431(metric. The)33.336 261 R
1.181(process of instruction selection is then the `)4.431 F 1.181
(`tree tiling')-.962 F 4.431('p)-.962 G 1.181(roblem: paste the)-4.431 F
.058(tiles o)33.336 276 R -.195(ve)-.195 G 3.308(rt).195 G .057
(he original tree in a manner which preserv)-3.308 F .057
(es its form, using the "optimal" tiling)-.195 F
(which reduces the total cost metric.)33.336 291 Q 1.061(In the linear \
method, the intermediate representation is a linear sequence of instruc\
tions)33.336 321 R .145
(\(quads\) and the assembly instructions are linear patterns.)33.336 336
R -1.443(Va)6.645 G .145(rious methods can be used to)1.443 F(re)33.336
351 Q 3.108(write the IR into assembly through pattern matching.)-.325 F
3.109(E.g. the "Dragon" compiler)9.608 F(te)33.336 366 Q 1.684
(xtbook discusses a theoretical w)-.195 F 1.684(ay to use a parser)-.13
F 4.934(,w)-.52 G 1.684(here the instruction patterns are)-4.934 F
(akin to grammar rules, and the IR is analogous to tok)33.336 381 Q
(en sequences.)-.13 E -.455(Tr)33.336 411 S .066
(ee-based vs linear methods of instruction selection, as may be e).455 F
.066(xpected, each ha)-.195 F .456 -.195(ve t)-.26 H(heir).195 E(adv)
33.336 426 Q 2.747(antages and dra)-.325 F 5.997(wbacks. Linear)-.195 F
2.747(methods may ha)5.997 F 3.137 -.195(ve d)-.26 H(if).195 E 2.747
(\214culty observing data \215o)-.325 F -.845(w,)-.325 G .376
(especially if quads ha)33.336 441 R .766 -.195(ve b)-.26 H .376
(een reordered during optimization, and thus are more reliant on).195 F
3.125(the quad generator using certain strate)33.336 456 R 6.375
(gies. T)-.195 F 3.125(ree methods often ha)-.455 F 3.514 -.195(ve d)
-.26 H(if).195 E 3.124(\214culty with)-.325 F(control \215o)33.336 471 Q
3.25(wc)-.325 G(hanges.)-3.25 E 1.148
(The simplest linear method is template-based.)33.336 501 R 1.149
(Each quad is translated directly into one)7.648 F 1.981
(or more assembly instructions, without re)33.336 516 R -.065(ga)-.195 G
1.98(rd to the other quads surrounding it.).065 F(This)8.48 E 2.117(met\
hod performs poorly when the assembly is richer than the quad schema, e\
.g. X86)33.336 531 R(assembly)33.336 546 Q 5.236(,b)-.845 G 1.985(ecaus\
e it can not recognize opportunities for combining instructions into a)
-5.236 F(single more potent instruction or addressing mode.)33.336 561 Q
3.785 -1.04(We w)33.336 591 T 1.705(ill discuss a method of linear inst\
ruction selection called the "peephole" method.)1.04 F 5.927 -1.04(We d)
33.336 606 T 3.847(e\214ne a "windo)1.04 F 3.847
(w" which has a certain maximum size.)-.325 F 3.847(This windo)10.347 F
7.097(ws)-.325 G 3.847(pans a)-7.097 F(constantly adv)33.336 621 Q
(ancing linear range of instructions.)-.325 E
(The algorithm can be summarized as:)6.5 E/F2 10/Courier@0 SF
(while \(there are more quads to consume\))90.936 633 Q({)90.936 645 Q
(do {)148.536 657 Q(Examine the current window for pattern matches)
206.136 669 Q(\(If there are multiple matches, pick the least-cost\))
206.136 681 Q(Perform the pattern transformation)206.136 693 Q 6(}w)
148.536 705 S(hile \(there was a pattern which matched\))-6 E
(shift the next quad into the far end of the window:)148.536 717 Q
(Since the window has a definite size, eventually)206.136 729 Q
(something will have to be pushed out of the near end.)206.136 741 Q 0
Cg EP
%%Page: 3 3
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 140.742(ECE466:Compilers Unit)33.336 60 R(7/pg 3)
2.25 E(\2512012 Jef)144.405 E 2.25(fH)-.225 G(akner)-2.25 E/F1 10
/Courier@0 SF(If this something is an un-matched quad, we have)206.136
117 Q(failed to produce an instruction selection, oops.)206.136 129 Q(})
90.936 141 Q(whatever is left in the window should be assembly language)
90.936 153 Q/F2 13/Times-Roman@0 SF -.455(Tr)33.336 174 S .141(anslated\
 assembly language instructions roll out of the top, or near end, of th\
e peephole).455 F(windo)33.336 189 Q 10.548 -.845(w. T)-.325 H 5.608
(he windo).845 F 8.858(ws)-.325 G 5.607
(ize is chosen so that the longest practical sequence of)-8.858 F 4.226
(quads/assembly can be handled.)33.336 204 R 4.226(Making the windo)
10.726 F 7.476(wu)-.325 G 4.226(nduly lar)-7.476 F 4.227
(ge has no further)-.234 F(adv)33.336 219 Q 1.417(antage, and instead i\
ncreases the translation time by requiring more searching.)-.325 F(The)
7.917 E .753(peephole method can be applied indi)33.336 234 R .753
(vidually to each basic block, or to the o)-.325 F -.195(ve)-.195 G .754
(rall linear).195 F .172(stream of quads.)33.336 249 R .172
(The patterns to be matched can also re)6.672 F .172
(write assembly language opcodes)-.325 F(into more ef)33.336 264 Q
(\214cient opcodes.)-.325 E 2.586
(The "shape" of the quads, i.e. the strate)33.336 285 R 2.586
(gy used by the quad generator and the quad)-.195 F .201
(scheme, in\215uences this method.)33.336 300 R .201(If the quads are v)
6.701 F .201(ery rich, it may be necessary to e)-.195 F(xpand)-.195 E
3.531(them into simpler operations before entering the windo)33.336 315
R 8.472 -.845(w. I)-.325 H 6.782(no).845 G 3.532(rder to \214nd optimal)
-6.782 F 1.258
(instruction sequences on some architectures, it may be necessary to e)
33.336 330 R 1.257(xpose hidden data)-.195 F<8d6f>33.336 345 Q 1.69
-.845(w, e)-.325 H(.g. the use of condition codes.).845 E .048(It shoul\
d be understood that the instruction selector is not necessarily e)
33.336 366 R .048(xpected to perform)-.195 F 1.452
(well on arbitrary input sequences of quads.)33.336 381 R 1.451
(It may depend on certain properties of the)7.951 F .34(quad generator)
33.336 396 R 3.59(,e)-.52 G .341
(.g. that all temporary names are assigned to just once and ne)-3.59 F
-.195(ve)-.325 G 3.591(rr).195 G(e-used.)-3.591 E 3.944(In the e)33.336
417 R 3.944(xamples belo)-.195 F 5.634 -.845(w, w)-.325 H 7.194(ew).845
G 3.944(ill use an informal syntax for describing the pattern)-7.194 F
1.372(matching/replacement engine.)33.336 432 R 1.372(It isn')7.872 F
4.622(ti)-.234 G 1.372(ntended to be a literal implementation.)-4.622 F
1.373(In some)7.872 F 1.296
(compilers, the pattern matching is coded on an ad-hoc basis.)33.336 447
R 1.295(Others, such as the GNU)7.795 F -.13(fa)33.336 462 S 1.149(mily\
 of compilers, de\214ne a complicated language for modelling the tar).13
F 1.15(get system and)-.234 F .018(applying transformations.)33.336 477
R .018(When the compiler is b)6.518 F .017(uilt for a particular tar)
-.26 F .017(get, that language)-.234 F(is used to generate internal tab\
les and code to perform the pattern matching.)33.336 492 Q/F3 13
/Times-Bold@0 SF(Instruction Selection example, X86)170.564 522 Q F2
(Let')33.336 558 Q 3.25(ss)-.715 G(ay we ha)-3.25 E .39 -.195(ve t)-.26
H(he follo).195 E(wing code fragment:)-.325 E F1(f\(\))33.336 570 Q({)
33.336 582 Q(int i;)33.336 594 Q(int ary[16];)33.336 606 Q(ary[i]++;)
90.936 618 Q F2 4.078(This might produce the follo)33.336 648 R 4.078
(wing IR sequence, using the nomenclature pre)-.325 F(viously)-.325 E
.689(described in Unit 6.)33.336 663 R 2.769 -1.04(We w)7.189 H .689
(ill mak)1.04 F 3.939(et)-.13 G .689(he observ)-3.939 F .689
(ation that temporary names are lik)-.325 F 3.939(ev)-.13 G(irtual)
-3.939 E(re)33.336 678 Q 3.261(gisters. The)-.195 F 3.261(yh)-.195 G
-2.925 -.26(av e)-3.261 H .011(no assigned storage location, no e)3.521
F .011(xplicit initialization, and no w)-.195 F .011(ay to)-.13 F(tak)
33.336 693 Q 4.547(et)-.13 G 1.297(heir address.)-4.547 F 1.297
(On the other hand, program v)7.797 F 1.297(ariables ha)-.325 F 1.687
-.195(ve a)-.26 H 4.547(ne).195 G 1.297(xistence in memory)-4.742 F(,)
-.845 E 1.933(and ha)33.336 708 R 2.323 -.195(ve t)-.26 H 5.183(ob).195
G 5.183(el)-5.183 G 1.933(oaded \(either e)-5.183 F 1.933
(xplicitly into a re)-.195 F(gister)-.195 E 5.183(,o)-.52 G 5.184(ri)
-5.183 G 1.934(mplicitly via an addressing)-5.184 F .671
(mode\) before use.)33.336 723 R .671(The quad code belo)7.171 F 3.921
(wf)-.325 G(ollo)-3.921 E .671(ws the con)-.325 F -.195(ve)-.52 G .671
(ntion sho).195 F .67(wn in Unit 6 that all)-.325 F .299
(temporary names are represented by virtual re)33.336 738 R 3.549
(gisters. W)-.195 F 3.549(ea)-1.04 G .299
(ssume that it has already been)-3.549 F 0 Cg EP
%%Page: 4 4
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 140.742(ECE466:Compilers Unit)33.336 60 R(7/pg 4)
2.25 E(\2512012 Jef)144.405 E 2.25(fH)-.225 G(akner)-2.25 E/F1 13
/Times-Roman@0 SF 3.401
(passed through the architecture-independent optimizer which remo)33.336
120 R -.195(ve)-.195 G 6.651(dt).195 G 3.401(he redundant)-6.651 F
(address computation for a[i]:)33.336 135 Q/F2 10/Courier@0 SF 27.6
(%T1= LEA)90.936 147 R(ary{lvar})39.6 E 27.6(%T2= MUL)90.936 159 R
(i{lvar},4)39.6 E 27.6(%T3= ADD)90.936 171 R(%T1,%T2)39.6 E 27.6
($T4= LOAD [%T3])90.936 183 R 27.6(%T5= ADD)90.936 195 R(%T4,1)39.6 E
21.6(STORE %T5,[%T3])90.936 207 R F1
(The pattern recognizer could be set up to recognize something lik)
33.336 237 Q 3.25(et)-.13 G(his:)-3.25 E F2(Recognize:)33.336 249 Q 15.6
(%rega= LEA)90.936 261 R(localvar\(x\))39.6 E 15.6(%regb= MUL)90.936 273
R(localvar\(y\),4)39.6 E 15.6(%regc= ADD)90.936 285 R(%rega,%regb)39.6 E
(Replace:)33.336 297 Q 27.6(movl offset\(y\)\(%ebp\),%regb)90.936 309 R
27.6(leal offset\(x\)\(%ebp,%regb,4\),%regc)90.936 321 R F1 1.784
(In these patterns, %re)33.336 342 R 1.914 -.065(ga i)-.195 H 5.035(saw)
.065 G 1.785(ildcard, matching an)-5.035 F 5.035(yv)-.195 G 1.785
(irtual re)-5.035 F(gister)-.195 E 5.035(,b)-.52 G 1.785
(ut tracking it as)-5.295 F .674
(well, so that we can see the correspondence between the LEA into a re)
33.336 357 R .674(gister and the use)-.195 F .451(of that re)33.336 372
R .451(gister in the ADD.)-.195 F(Lik)6.951 E -.325(ew)-.13 G .451
(ise localv).325 F .452(ar\(x\) is intended as a wildcard matching an)
-.325 F(y)-.195 E .888(local v)33.336 387 R .888(ariable v)-.325 F .888
(alue and gi)-.325 F .888(ving it a wildcard name x.)-.325 F(of)7.387 E
.887(fset\(x\) will be replaced with the)-.325 F(of)33.336 402 Q 1.536
(fset \(within the stack frame\) of the local v)-.325 F 1.536
(ariable which has been gi)-.325 F -.195(ve)-.325 G 4.786(nt).195 G
1.536(he wildcard)-4.786 F .382(name x.)33.336 417 R .382(This of)6.882
F .382(fset is clearly kno)-.325 F .381
(wn to us at this time, since the entire function has been)-.325 F 1.734
(seen and the stack frame has been laid out with of)33.336 432 R 1.735
(fsets assigned to all local v)-.325 F(ariables.)-.325 E .23(E.g. let')
33.336 447 R 3.48(sa)-.715 G .229(ssume that i has an of)-3.48 F .229
(fset of -4 from the %ebp re)-.325 F(gister)-.195 E 3.479(,a)-.52 G .229
(nd ary has an of)-3.479 F .229(fset of)-.325 F 3.978(-8. The)33.336 462
R(lo)3.978 E .728(wercase nomenclature indicates a translated assembly \
language instruction, vs)-.325 F(uppercase for quads.)33.336 477 Q .076
(Considering only the pattern abo)33.336 498 R -.195(ve)-.195 G 3.325
(,t).195 G .075(he \214rst tw)-3.325 F 3.325(oq)-.13 G .075(uads w)
-3.325 F .075(ould be shifted into the peephole)-.13 F -.26(bu)33.336
513 S 4.344(tr).26 G 1.094(esult in no matches.)-4.344 F 1.095
(Then the third quad w)7.594 F 1.095(ould create a match ag)-.13 F 1.095
(ainst the pattern.)-.065 F 1.836
(But in general, there will be multiple pattern matches.)33.336 528 R
1.835(E.g. there should be a pattern:)8.336 F(Recognize:)33.336 543 Q
(%re)90.936 558 Q -.065(ga)-.195 G 17.326(=L).065 G 29.078(EA localv)
-17.326 F(ar\(x\))-.325 E(Replace)33.336 573 Q 35.578(leal of)90.936 588
R(fset\(x\)\(%ebp\),%re)-.325 E -.065(ga)-.195 G .526(to handle the mor\
e general case where the address of the array is needed else)33.336 603
R .527(where in an)-.325 F -.195(ex)33.336 618 S 5.678(pression. This)
.195 F 2.428
(pattern will \214re too early unless we modify the peephole algorithm)
5.678 F(slightly)33.336 633 Q 7.011(.I)-.845 G .511
(nstead of inserting quads one at a time, we al)-7.011 F -.13(wa)-.13 G
.512(ys grab groups of quads which).13 F .72(are lar)33.336 648 R .72
(ger than the longest pattern.)-.234 F .719
(When multiple patterns match, we assign a metric or)7.22 F
("weight" to each match which f)33.336 663 Q -.26(avo)-.13 G
(rs the longest possible match.).26 E 1.605(Another pattern to pick up \
the load, add, store sequence and select the incl instruction)33.336 684
R(might be:)33.336 699 Q F2(Recognize:)33.336 711 Q 15.6(%regb= LOAD)
90.936 723 R([%rega])33.6 E 15.6(%regc= ADD)90.936 735 R(%regb,1)39.6 E
0 Cg EP
%%Page: 5 5
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 140.742(ECE466:Compilers Unit)33.336 60 R(7/pg 5)
2.25 E(\2512012 Jef)144.405 E 2.25(fH)-.225 G(akner)-2.25 E/F1 10
/Courier@0 SF 21.6(STORE %regc,[%rega])148.536 117 R(Replace:)33.336 129
Q 27.6(incl \(%rega\))90.936 141 R/F2 13/Times-Roman@0 SF
(At this point, the follo)33.336 186 Q
(wing assembly instructions are in the windo)-.325 E(w:)-.325 E F1 27.6
(movl -4\(%ebp\),%T2)90.936 198 R 27.6(leal -8\(%ebp,%T2,4\),%T1)90.936
210 R 27.6(incl \(%T1\))90.936 222 R F2(Finally)33.336 252 Q 8.18(,a)
-.845 G 4.929
(nother pattern might be written which matches not quads, b)-8.18 F
4.929(ut partially)-.26 F(constructed assembly code.)33.336 267 Q
(It recognizes the addressing mode:)6.5 E F1(Recognize)33.336 279 Q 27.6
(leal offset\(%rega,%regb,scale\),%regc)90.936 291 R 33.6(opX \(%regc\))
90.936 303 R({%regc dead})90.936 315 Q(Replace)33.336 327 Q 33.6
(opX offset\(%rega,%regb,scale\))90.936 339 R F2(Lea)33.336 369 Q
(ving us with:)-.26 E F1 27.6(movl -4\(%ebp\),%T2)90.936 381 R 27.6
(incl -8\(%ebp,%T2,4\))90.936 393 R F2 .763(Thus in a CISC tar)33.336
429 R .764
(get which is richer than our IR schema, the number of operations has)
-.234 F(been consolidated during tar)33.336 444 Q(get code generation.)
-.234 E 1.285(During re)33.336 465 R 1.285
(gister allocation, the virtual re)-.195 F 1.285(gisters %T0, etc. w)
-.195 F 1.285(ould be replaced with actual)-.13 F(re)33.336 480 Q 3.385
(gisters. Note)-.195 F .135(that the last pattern w)3.385 F .136
(as predicated on "%re)-.13 F .136(gc dead".)-.195 F 2.216 -1.04(We w)
6.636 H .136(ill de\214ne dead)1.04 F .645(and li)33.336 495 R 1.035
-.195(ve v)-.325 H .645(alues shortly)-.13 F 7.145(.T)-.845 G .644
(he reader may then re\215ect back on this paragraph and consider)-7.145
F .351(that if %re)33.336 510 R .351(gc were li)-.195 F .742 -.195(ve a)
-.325 H .352(fter this 2-instruction pattern, it w).195 F .352
(ould not be proper to replace it)-.13 F 1.925(with the single instruct\
ion, because later on the IR is depending on a v)33.336 525 R 1.924
(alid v)-.325 F 1.924(alue \(the)-.325 F
(address of the array element\) being in %re)33.336 540 Q(gc.)-.195 E/F3
13/Times-Bold@0 SF(Dif\214culties with 2-addr)174.542 570 Q(ess tar)
-.234 E(gets)-.13 E F2 1.869(Most instructions in the X86 set are 2-add\
ress \(there are also 1-address and 3-address)33.336 606 R 1.871(instru\
ctions\), meaning that the destination operand is also one of the sourc\
e operands.)33.336 621 R .125
(This creates challenges in translating 3-address quads.)33.336 636 R
.126(In addition, for most operations, it)6.626 F(is not allo)33.336 651
Q(wed to specify both source and destination as memory operands.)-.325 E
(E.g.)6.5 E F1(extern int a,b,c;)39.336 663 Q(a=b+c:)90.936 675 Q 31.2
(a{global}=ADD b{global},c{global})90.936 699 R F2
(One possible pattern sequence might be:)33.336 720 Q F1(Match)33.336
732 Q 0 Cg EP
%%Page: 6 6
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 140.742(ECE466:Compilers Unit)33.336 60 R(7/pg 6)
2.25 E(\2512012 Jef)144.405 E 2.25(fH)-.225 G(akner)-2.25 E/F1 10
/Courier@0 SF 31.2(global\(Z\)=ADD global\(X\),global\(Y\))90.936 117 R
(Replace)33.336 129 Q 27.6(movl X,%regN)90.936 141 R 33.6(add Y,%regN)
90.936 153 R 27.6(movl %regN,Z)90.936 165 R/F2 13/Times-Roman@0 SF
(Here %re)33.336 186 Q(gN denotes a ne)-.195 E 3.25(wv)-.325 G
(irtual re)-3.25 E(gister which is allocated on the \215y)-.195 E(.)
-.845 E 1.526
(If the instruction selection algorithm has information about "li)33.336
207 R -.195(ve)-.325 G 4.775("v).195 G 1.525(alues a)-5.1 F -.325(va)
-.26 G 1.525(ilable to it).325 F 2.108(\(see belo)33.336 222 R 5.358(wu)
-.325 G 2.108(nder re)-5.358 F 2.108
(gister allocation\) then it can mak)-.195 F 5.358(em)-.13 G 2.109
(ore informed decisions about)-5.358 F(2-address issues.)33.336 237 Q F1
(Match)33.336 249 Q 9.6(%temp2= ADD)90.936 261 R(%temp0,%temp1)39.6 E
({%temp1 live})90.936 273 Q F2(If %temp1 is li)33.336 288 Q .39 -.195
(ve a)-.325 H(fter this quad, we must emit:).195 E F1(Replace)33.336 300
Q 27.6(movl %temp1,%temp2)90.936 312 R 27.6(addl %temp0,%temp2)90.936
324 R F2(If we kno)33.336 339 Q 3.25(wt)-.325 G
(hat %temp1 is dead after this quad, we can emit)-3.25 E F1 27.6
(addl %temp0,%temp1)90.936 351 R F2
(and then alias %temp2 to %temp1 thereafter)33.336 366 Q(.)-.715 E/F3 13
/Times-Bold@0 SF(Mor)169.355 396 Q 3.25(et)-.234 G -.234(ro)-3.25 G
(uble with X86 instructions).234 E F2
(Some X86 instructions require the use of speci\214c re)33.336 432 Q
3.25(gisters. No)-.195 F 3.25(wl)-.325 G(et')-3.25 E 3.25(sl)-.715 G
(ook at)-3.25 E F1(extern int a,b,c;)39.336 444 Q(a=b/c;)90.936 456 Q
21.6(c=DIV a,b)90.936 480 R F2 .679(One might think that we can select \
instructions for DIV in a manner analogous to ADD.)33.336 501 R .103
(But the X86 idi)33.336 516 R 3.353(vi)-.325 G .103(nstruction \(idi)
-3.353 F 3.353(vi)-.325 G 3.353(sf)-3.353 G .103(or signed long di)
-3.353 F .103(vision, di)-.325 F 3.353(vi)-.325 G 3.353(sf)-3.353 G .104
(or unsigned long\) has)-3.353 F 3.301(ap)33.336 531 S .051
(eculiar restriction.)-3.301 F .05
(It is really a 1-address instruction.)6.551 F .05(The di)6.55 F .05
(vidend is actually a 64 bit)-.325 F -.325(va)33.336 546 S .248
(lue and is al).325 F -.13(wa)-.13 G .249(ys in the re).13 F .249
(gister pair %edx:%eax \(%edx is the most signi\214cant 32 bits\).)-.195
F .886(The di)33.336 561 R .886(visor may be a re)-.325 F .886
(gister or memory operand \(b)-.195 F .886(ut not immediate!\).)-.26 F
.885(The quotient is)7.386 F(placed in %eax, and the remainder in %edx \
\(there is no separate MOD instruction\).)33.336 576 Q F1(Match:)33.336
588 Q -2.4(global\(Z\) DIV)90.936 600 R(global\(X\),global\(Y\))39.6 E
(Replace:)33.336 612 Q({kill %eax})90.936 624 Q 27.6(movl X,%eax)90.936
636 R({kill %edx})90.936 648 Q(cltd)90.936 660 Q 21.6(idivl Y)90.936 672
R 27.6(movl %eax,Z)90.936 684 R F2 4.16(The cltd instruction sign-e)
33.336 699 R 4.16(xtends the %eax re)-.195 F 4.16
(gister into the %edx re)-.195 F(gister)-.195 E 7.41(,a)-.52 G 4.16
(nd is)-7.41 F 4.017(necessary to set up properly for a signed inte)
33.336 714 R 4.017(ger 32 bit di)-.195 F 7.267(vision. An)-.325 F
(unfortunate)7.267 E 2.031(consequence of this re)33.336 729 R(gister)
-.195 E 2.031
(-speci\214c peculiarity is that we must violate our nice clean)-.26 F
4.246(model of k)33.336 744 R 4.246(eeping all re)-.13 F 4.246
(gisters virtual during instruction selection.)-.195 F 4.245(During re)
10.745 F(gister)-.195 E 0 Cg EP
%%Page: 7 7
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 140.742(ECE466:Compilers Unit)33.336 60 R(7/pg 7)
2.25 E(\2512012 Jef)144.405 E 2.25(fH)-.225 G(akner)-2.25 E/F1 13
/Times-Roman@0 SF .143(allocation, when the mo)33.336 120 R .143
(vl X,%eax is encountered, it will force whate)-.195 F -.195(ve)-.325 G
3.393(rv).195 G .143(alue happens to)-3.718 F .532(be in the %eax re)
33.336 135 R .531(gister at the time to be spilled to mak)-.195 F 3.781
(et)-.13 G .531(he re)-3.781 F .531(gister a)-.195 F -.325(va)-.26 G
3.781(ilable. Lik).325 F -.325(ew)-.13 G(ise,).325 E 1.628
(the {kill %edx} notation will instruct the re)33.336 150 R 1.628
(gister allocator to v)-.195 F 1.628(acate the %edx re)-.325 F(gister)
-.195 E(prior to the cltd instruction \(which will implicitly o)33.336
165 Q -.195(ve)-.195 G(rwrite it\).).195 E/F2 13/Times-Bold@0 SF
(Instruction Selection example, SP)160.573 225 Q(ARC)-.962 E F1 3.046
(In the CISC architecture e)33.336 261 R 3.046(xample abo)-.195 F -.195
(ve)-.195 G 6.296(,t).195 G 3.045(he assembly output often contained fe)
-6.296 F(wer)-.325 E .267(operations than the IR form.)33.336 276 R .268
(This is because, in general, the CISC instruction set is more)6.768 F
-.195(ex)33.336 291 S(pressi).195 E 3.723 -.195(ve t)-.325 H 3.333
(han our choice of quad schema \(we').195 F 3.723 -.195(ve s)-.65 H
3.332(een some anno).195 F 3.332(ying e)-.13 F(xceptions,)-.195 E(ho)
33.336 306 Q(we)-.325 E -.195(ve)-.325 G(r\).).195 E .659
(The RISC philosoph)33.336 327 R 3.909(yi)-.065 G 3.909(sm)-3.909 G .66
(uch closer to that chosen for our quads, in that it is inherently)
-3.909 F 1.238(3-address with a limited number of addressing modes.)
33.336 342 R 1.238(Therefore we w)7.738 F 1.238(ould e)-.13 F 1.238
(xpect that)-.195 F .683(the assembly output w)33.336 357 R .683
(ould be similar to our quads, if not an e)-.13 F .683
(xpansion, and there w)-.195 F(ould)-.13 E .949(be little opportunity t\
o coalesce sequences of quads into smaller sequences of assembly)33.336
372 R(.)-.845 E 1.494(Thus in man)33.336 387 R 4.744(yw)-.195 G 1.494
(ays our job of instruction selection will be easier)-4.874 F 7.994(.R)
-.715 G 1.494(ecall our pre)-7.994 F(vious)-.325 E -.195(ex)33.336 402 S
(ample with quads:).195 E/F3 10/Courier@0 SF 27.6(%T1= LEA)90.936 414 R
(ary)39.6 E 27.6(%T2= MUL)90.936 426 R(i,4)39.6 E 27.6(%T3= ADD)90.936
438 R(%T1,%T2)39.6 E 27.6(%T4= LOAD [%T3])90.936 450 R 27.6(%T5= ADD)
90.936 462 R(%T4,1)39.6 E 21.6(STORE %T5,[%T3])148.536 474 R F1 .064
(In the X86 instruction set, we could access memory operands directly)
33.336 489 R 3.314(,b)-.845 G .064(ut in SP)-3.574 F .064(ARC only)
-1.196 F(re)33.336 504 Q(gister)-.195 E(-to-re)-.26 E 2.406
(gister operations are permitted.)-.195 F 4.486 -1.04(We w)8.906 H 2.407
(ill assume that during architecture-)1.04 F 1.414
(neutral optimization, an)33.336 519 R 4.663(yo)-.195 G 1.413
(pportunities for placing v)-4.663 F 1.413(ariables into virtual re)
-.325 F 1.413(gisters safely)-.195 F(ha)33.336 534 Q 4.058 -.195(ve b)
-.26 H 3.668(een identi\214ed and that code has been re-written to use \
the virtual re).195 F(gisters.)-.195 E .541(Therefore, an)33.336 549 R
3.791(yr)-.195 G .541(eferences remaining to memory operands are requir\
ed to be translated as)-3.791 F 1.091
(actual references to those memory operands.)33.336 564 R 3.171 -1.04
(To u)7.591 H 1.091(se the pattern-matching approach, we)1.04 F -.13(wo)
33.336 579 S(uld need to b).13 E
(uild a pattern for each of the three operand positions:)-.26 E F3
(Recognize)33.336 591 Q 9.6(Z=OP\(O\) localvar\(x\),Y)90.936 603 R
(Replace)33.336 615 Q 39.6(ld [%fp+offset\(x\)],%regN)90.936 627 R 39.6
(Z= OP\(O\))90.936 639 R(%regN,Y)27.6 E(Recognize)33.336 651 Q 39.6
(Z= OP\(O\))90.936 663 R(Y,localvar\(x\))27.6 E(Replace)33.336 675 Q
39.6(ld [%fp+offset\(x\)],%regN)90.936 687 R 39.6(Z= OP\(O\))90.936 699
R(Y,%regN)27.6 E(Recognize)33.336 711 Q 37.2(localvar\(z\)= OP\(O\))
90.936 723 R(X,Y)27.6 E(Replace)33.336 735 Q 0 Cg EP
%%Page: 8 8
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 140.742(ECE466:Compilers Unit)33.336 60 R(7/pg 8)
2.25 E(\2512012 Jef)144.405 E 2.25(fH)-.225 G(akner)-2.25 E/F1 10
/Courier@0 SF 21.6(OP\(O\) X,Y,%regN)90.936 117 R 39.6
(st %regN,[%fp+offset\(z\)])90.936 129 R(Recognize)33.336 141 Q 15.6
(%rega= LEA)90.936 153 R(localvar\(x\))39.6 E(Replace)33.336 165 Q 33.6
(add %fp,offset\(x\),%rega)90.936 177 R(Recognize)33.336 189 Q 15.6
(%regc= ADD)90.936 201 R(%rega,%regb)39.6 E(Replace)33.336 213 Q 33.6
(add %rega,%regb,%regc)90.936 225 R(Recognize)33.336 237 Q 15.6
(%regb= ADD)90.936 249 R(%rega,imm\(I\))39.6 E({Caveat: -4096<=I<4096\))
206.136 261 Q(Replace)33.336 273 Q 33.6(add %rega,I,%regb)90.936 285 R
/F2 13/Times-Roman@0 SF .358(Here OP\(O\) represents an)33.336 306 R
3.608(yw)-.195 G .358
(ildcard quad operation, X/Y/Z are wildcard operands which)-3.608 F .248
(could be %T temporaries, immediate v)33.336 321 R .248
(alues, or local or global v)-.325 F .248(ariables\), and %re)-.325 F
.248(gN is a)-.195 F(ne)33.336 336 Q 4.275(wv)-.325 G 1.025(irtual re)
-4.275 F 1.025(gister which is assigned on the \215y)-.195 F 7.525(.A)
-.845 G 1.025(pplying these patterns and assuming)-7.525 F(that the of)
33.336 351 Q(fset of v)-.325 E(ariable i is -84 and the of)-.325 E
(fset of ary is -80:)-.325 E F1 33.6(add %fp,-80,%T1)90.936 363 R 39.6
(ld [%fp-84],%T6)90.936 375 R 33.6(mul %T6,4,%T2)90.936 387 R 33.6
(add %T1,%T2,%T3)90.936 399 R 39.6(ld [%T3],%T4)90.936 411 R 33.6
(add %T4,1,%T5)90.936 423 R 39.6(st %T5,[%T3])90.936 435 R F2 .565
(As discussed in Unit 6, SP)33.336 456 R .565(ARC instructions are al)
-1.196 F -.13(wa)-.13 G .565(ys a single 32-bit w).13 F .565
(ord, and there is)-.13 F 3.578(no room for immediate v)33.336 471 R
3.578(alues other than small ones.)-.325 F 3.578(13 bits are a)10.078 F
-.325(va)-.26 G 3.577(ilable for an).325 F .371(immediate v)33.336 486 R
.371(alue, and since the v)-.325 F .371(alue is sign-e)-.325 F .372
(xtended to 32 bits, this limits the range of I)-.195 F
(to -4096 through +4095.)33.336 501 Q 2.08 -1.04(To h)6.5 H(andle lar)
1.04 E(ger constants:)-.234 E F1(Match)33.336 513 Q 15.6(%regb= OP\(O\))
90.936 525 R(%rega,immI)27.6 E(Replace)33.336 537 Q 21.6
(sethi %hi\(I\),%regN)90.936 549 R 39.6(or %regN,%lo\(I\),%regN)90.936
561 R 21.6(OP\(O\) %rega,%regN,%regb)90.936 573 R F2 4.16(As)33.336 594
S .91(imilar pattern needs to be in place for accessing memory operands\
 which are global,)-4.16 F(as there is no w)33.336 609 Q
(ay to specify the 32-bit address directly)-.13 E(.)-.845 E/F3 13
/Times-Bold@0 SF(Instruction Scheduling)203.948 639 Q F2 2.787
(The objecti)33.336 675 R 3.177 -.195(ve o)-.325 H 6.037(fi).195 G 2.788
(nstruction scheduling is to change the order of instructions, where)
-6.037 F .2(possible, to impro)33.336 690 R .59 -.195(ve t)-.195 H .2
(he o).195 F -.195(ve)-.195 G .199
(rlap of operations and minimize the total time.).195 F .199
(In order to do)6.699 F 4.01(this, the compiler constructs an internal \
model of the speci\214c processor')33.336 705 R 7.26(sp)-.715 G(ipeline)
-7.26 E 2.194(properties, such as the number of e)33.336 720 R -.195(xe)
-.195 G 2.194(cution units a).195 F -.325(va)-.26 G 2.194(ilable, the e)
.325 F -.195(xe)-.195 G 2.194(cution time of the).195 F -.325(va)33.336
735 S 1.414(rious instructions, etc.).325 F 1.414
(It then adjusts the timing of instruction issue to minimize the)7.914 F
0 Cg EP
%%Page: 9 9
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 140.742(ECE466:Compilers Unit)33.336 60 R(7/pg 9)
2.25 E(\2512012 Jef)144.405 E 2.25(fH)-.225 G(akner)-2.25 E/F1 13
/Times-Roman@0 SF 3.367
(delay of an instruction which stalls because it is w)33.336 120 R 3.367
(aiting for a result from another)-.13 F(instruction.)33.336 135 Q 2.602
-1.04(We w)33.336 156 T .522(ill not ha)1.04 F .913 -.195(ve t)-.26 H
.523(ime during this course to discuss instruction scheduling.).195 F
.523(The reader is)7.023 F(referred to the Dragon te)33.336 171 Q
(xtbook for an introductory presentation.)-.195 E/F2 13/Times-Bold@0 SF
(Register Allocation)214.081 201 Q F1 1.641
(The instruction selection phase can re)33.336 237 R 1.64
(write the generic IR into one in which there is a)-.325 F 1.341
(clear distinction between memory symbols and re)33.336 252 R 1.341
(gisters, because at this point it kno)-.195 F(ws)-.325 E 2.797(the tar)
33.336 267 R 2.796
(get architecture and the means used to access parameters, local v)-.234
F 2.796(ariables, etc.)-.325 F(Ho)33.336 282 Q(we)-.325 E -.195(ve)-.325
G 1.173 -.52(r, i).195 H 3.383(ti).52 G 3.383(sn)-3.383 G .133
(ot yet practical to allocate speci\214c re)-3.383 F 3.383(gisters. As)
-.195 F .133(we ha)3.383 F .524 -.195(ve s)-.26 H .134(een, we can use)
.195 F(virtual re)33.336 297 Q(gisters such as %re)-.195 E
(g0 and complete instruction selection.)-.195 E 2.213(Then, the job f)
33.336 318 R 2.213(alls to the re)-.13 F 2.212(gister allocator to mak)
-.195 F 5.462(et)-.13 G 2.212(he best use of the real re)-5.462 F
(gisters,)-.195 E 2.6(mapping the virtual re)33.336 333 R 2.6
(gisters to real re)-.195 F 2.6
(gisters, and inserting additional instructions as)-.195 F 4.228
(needed. The)33.336 348 R .978(set of ph)4.228 F .978(ysical re)-.065 F
.978(gisters is usually limited, which mak)-.195 F .978
(es this an interesting)-.13 F(problem.)33.336 363 Q .654
(In order to do its job, the re)33.336 384 R .654
(gister allocator must be able to track the "li)-.195 F -.195(ve)-.325 G
.654(ness" of virtual).195 F(re)33.336 399 Q 5.159(gisters. DEF:)-.195 F
5.159(An)5.159 G 1.909(ame is)-5.159 F F2(li)5.159 E -.13(ve)-.13 G F1
1.909(at a gi)5.289 F -.195(ve)-.325 G 5.159(np).195 G 1.908
(oint in a program if there is a subsequent)-5.159 F 2.033
(reachable point in the control \215o)33.336 414 R 5.283(wg)-.325 G
2.033(raph in which that name is used, and there is no)-5.283 F(interv)
33.336 429 Q(ening place where that name could be rede\214ned.)-.195 E
2.565(In the ne)33.336 450 R 2.564(xt unit, we will see an algorithm fo\
r analyzing all of the basic blocks in a)-.195 F 1.218
(function to determine li)33.336 465 R -.195(ve)-.325 G 4.468(ness. Gi)
.195 F -.195(ve)-.325 G 4.468(nt).195 G 1.218(he e)-4.468 F 1.218
(xistence of this algorithm, we will ha)-.195 F -.195(ve)-.26 G 4.468
(,f).195 G(or)-4.468 E 1.311(each basic block, a set)33.336 480 R/F3 13
/Times-Italic@0 SF(LIVEOUT)4.561 E F1 1.311(of names which are li)4.561
F 1.701 -.195(ve a)-.325 H 4.561(tt).195 G 1.31
(he end of that block \(i.e.)-4.561 F .684(names which ha)33.336 495 R
1.074 -.195(ve b)-.26 H .685
(een de\214ned in that block or a predecessor block, and whose v).195 F
.685(alue is)-.325 F(used ag)33.336 510 Q
(ain before rede\214nition in a successor block\).)-.065 E(Gi)33.336 540
Q -.195(ve)-.325 G(n).195 E F3(LIVEOUT)3.274 E F1 3.274(,w)C 3.274(ec)
-3.274 G .023(an w)-3.274 F .023(ork backw)-.13 F .023
(ards in the basic block, b)-.13 F .023(uilding a set)-.26 F F3(LIVENO)
3.273 E(W)-.65 E F1(for)3.273 E .738(each operation \(quad\) in the blo\
ck, which contains the list of names which are li)33.336 555 R 1.128
-.195(ve a)-.325 H 3.988(so).195 G(f)-3.988 E
(the completion of that operation.)33.336 570 Q 2.08 -1.04(We c)6.5 H
(an compute this set as follo)1.04 E(ws:)-.325 E/F4 10/Courier@0 SF
(LIVENOW[N]=LIVEOUT)90.936 582 Q 52.8(for\(i=N-1;i>=1;i--\) //quads)
90.936 594 R(numbered 1...N)6 E({)90.936 606 Q(LIVENOW[i]=LIVENOW[i+1];)
148.536 618 Q(remove from LIVENOW[i] the dest operand of quad i+1)
148.536 630 Q(for any names used as source operands in quad i+1:)148.536
642 Q(add these names to LIVENOW[i])206.136 654 Q(})90.936 666 Q F1
3.514(The order of remo)33.336 681 R 3.513
(ving the destination before adding the source is important when)-.195 F
(considering an operation which uses a name as both a source and a dest\
ination.)33.336 696 Q 3.432(Ag)33.336 717 S -2.795 -.325(iv e)-3.432 H
3.432(nn).325 G .182(ame may be li)-3.432 F .572 -.195(ve i)-.325 H
3.432(nc).195 G .182
(ertain places in the code, and dead in other places.)-3.432 F 2.262
-1.04(We c)6.682 H(all)1.04 E(this a)33.336 732 Q F2(li)3.25 E .26 -.13
(ve r)-.13 H(ange).13 E F1 6.5(.E)C(.g. consider:)-6.5 E 0 Cg EP
%%Page: 10 10
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 138.492(ECE466:Compilers Unit)33.336 60 R
(7/pg 10)2.25 E(\2512012 Jef)142.155 E 2.25(fH)-.225 G(akner)-2.25 E/F1
10/Courier@0 SF 51.6(1A)33.336 117 S 33.6(DD a,b->c)-51.6 F 51.6(2A)
33.336 129 S 33.6(DD c,d->e)-51.6 F 51.6(3A)33.336 141 S 33.6(DD x,y->c)
-51.6 F 51.6(4A)33.336 153 S 33.6(DD g,h->i)-51.6 F 51.6(5A)33.336 165 S
33.6(DD j,k->l)-51.6 F 51.6(6A)33.336 177 S 33.6(DD p,q->c)-51.6 F 51.6
(7A)33.336 189 S 33.6(DD c,u->w)-51.6 F
([Assume LIVEOUT from this BB does not include c])90.936 201 Q/F2 13
/Times-Roman@0 SF .156(Using our pre)33.336 216 R .156
(vious algorithm, v)-.325 F .156(ariable c is not li)-.325 F .546 -.195
(ve a)-.325 H 3.406(tt).195 G .156(he end of instruction 7.)-3.406 F
.156(It is li)6.656 F .546 -.195(ve a)-.325 H(t).195 E 3.953(6a)33.336
231 S .704(nd at 1, creating tw)-3.953 F 3.954(ol)-.13 G -2.795 -.325
(iv e)-3.954 H .704(ranges in the basic block for c: 1..1 and 6..6.)
4.279 F .704(Since c is not)7.204 F .346
(used as a source operand in instructions 4, 5 or 6 before being o)
33.336 246 R -.195(ve)-.195 G .346(rwritten at 6, operation).195 F(#3 w)
33.336 261 Q(as useless.)-.13 E(Normally)6.5 E 3.25(,t)-.845 G
(he optimizer will ha)-3.25 E .39 -.195(ve r)-.26 H(emo).195 E -.195(ve)
-.195 G 3.25(dt).195 G(his useless operation.)-3.25 E/F3 13/Times-Bold@0
SF(Local Register Allocation)196.928 291 Q F2 6.408(Al)33.336 327 S
3.158(ocal re)-6.408 F 3.158(gister allocator w)-.195 F 3.158
(orks only within a single basic block, and w)-.13 F 3.158(orks on an)
-.13 F 4.488(operation-by-operation basis.)33.336 342 R 4.488
(It maintains a "scoreboard" representing the pool of)10.988 F .499
(general-purpose re)33.336 357 R 3.749(gisters. F)-.195 F .499
(or each re)-.195 F(gister)-.195 E 3.749(,w)-.52 G 3.749(et)-3.749 G .5
(rack if the re)-3.749 F .5(gister is currently a)-.195 F -.325(va)-.26
G(ilable).325 E(or allocated to a speci\214c name \(virtual re)33.336
372 Q 3.25(gister\). The)-.195 F(algorithm can be summarized:)3.25 E F1
64.8(for\(i=1;i<=N;i++\) //quads)90.936 384 R(numbered 1..N)6 E({)90.936
396 Q(consider quad i,)148.536 408 Q(if src1 is a virtual register:)
148.536 420 Q(rx=ensure\(src1\))206.136 432 Q(rewrite src1 to use %rx)
206.136 444 Q(if src2 is a virtual register:)148.536 456 Q
(ry=ensure\(src2\))206.136 468 Q(rewrite src2 to use %ry)206.136 480 Q
(if \(src1 is dead after operation i\))148.536 492 Q(mark rx free)
206.136 504 Q(if \(src2 is dead after operation i\))148.536 516 Q
(mark ry free)206.136 528 Q(if dst is a virtual register:)148.536 540 Q
(rd=allocate\(dst\))206.136 552 Q(rewrite dst as %rd)206.136 564 Q
(mark %rd as dirty)206.136 576 Q(})90.936 588 Q
(spill all dirty registers live at end of this BB)90.936 600 Q
(ensure\(vr\))45.336 624 Q({)45.336 636 Q
(if a register is already allocated to vr, return that register)148.536
648 Q(r=allocate\(vr\))148.536 660 Q
(emit code to move vr from its backing store to r)148.536 672 Q
(return r)148.536 684 Q(})45.336 696 Q(allocate\(vr\))45.336 720 Q({)
45.336 732 Q 0 Cg EP
%%Page: 11 11
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 138.492(ECE466:Compilers Unit)33.336 60 R
(7/pg 11)2.25 E(\2512012 Jef)142.155 E 2.25(fH)-.225 G(akner)-2.25 E/F1
10/Courier@0 SF(pick an available free physical register r)148.536 117 Q
(if there is none:)148.536 129 Q
(pick the "best" physical register r to spill)206.136 141 Q
(it currently contains virtual register X)206.136 153 Q
(if \(X live after this quad and r is dirty\))206.136 165 Q
(emit code to store %r to backing store for X)263.736 177 Q
(mark register r as containing vr)148.536 189 Q(return r)148.536 201 Q
(})51.336 213 Q/F2 13/Times-Bold@0 SF(Register Spills)227.432 228 Q/F3
13/Times-Roman@0 SF 1.001(Consider each operation in the basic block.)
33.336 264 R 1.001(If the number of virtual re)7.501 F 1.001
(gisters which are)-.195 F(li)33.336 279 Q 1.326 -.195(ve a)-.325 H
4.186(tt).195 G .936(hat point e)-4.186 F .936(xceeds the number of ph)
-.195 F .936(ysical re)-.065 F .936
(gisters in the pool, then the allocator)-.195 F 1.098
(will be forced to)33.336 294 R F2(spill)4.348 E F3 4.348(ar)4.348 G
-.195(eg)-4.348 G(ister).195 E 7.598(.T)-.715 G 1.098
(he allocator will only spill li)-7.598 F 1.487 -.195(ve v)-.325 H 1.097
(irtual re).195 F 4.347(gisters. If)-.195 F(a)4.347 E 1.338(virtual re)
33.336 309 R 1.338
(gister is dead after a particular operation, then it w)-.195 F 1.338
(ould be mark)-.13 F 1.338(ed as free.)-.13 F(In)7.839 E .201
(order to spill a virtual re)33.336 324 R .2(gister which is li)-.195 F
-.195(ve)-.325 G 3.45(,i).195 G .2(ts contents must be sa)-3.45 F -.195
(ve)-.26 G 3.45(ds).195 G(ome)-3.45 E 3.45(where. Later)-.325 F 1.579
(on, when the v)33.336 339 R 1.58(alue is needed ag)-.325 F 1.58
(ain as a source operand, it will be fetched back into a)-.065 F(ph)
33.336 354 Q .276(ysical re)-.065 F(gister)-.195 E 6.776(.T)-.715 G .276
(he backing location will either be an absolute memory address for the)
-6.776 F 2.389(case of global v)33.336 369 R 2.389
(ariables, or a place on the local stack frame for local and temporary)
-.325 F -.325(va)33.336 384 S 3.486(riables. The).325 F(re)3.486 E .236
(gister allocator is architecture-speci\214c so it kno)-.195 F .236
(ws ho)-.325 F 3.486(wt)-.325 G 3.486(ol)-3.486 G .236(oad and store)
-3.486 F(these v)33.336 399 Q(alues.)-.325 E .719(It w)33.336 420 R .719
(ould be unusual for a temporary v)-.13 F .719(ariable to spill.)-.325 F
.72(Most temps are short-li)7.219 F -.195(ve)-.325 G 3.97(d. If).195 F
(the)3.97 E(tar)33.336 435 Q 2.425(get architecture has a v)-.234 F
2.425(ery limited supply of re)-.195 F 2.425(gisters and is e)-.195 F
-.325(va)-.325 G 2.425(luating a comple).325 F(x)-.195 E -.195(ex)33.336
450 S(pression, it is possible that this will happen.).195 E 3.063
(Often the re)33.336 471 R 3.064
(gister allocator must deal with multiple groups of re)-.195 F 3.064
(gisters which serv)-.195 F(e)-.195 E(dif)33.336 486 Q .279
(ferent purposes and must be dealt with as separate allocation pools.)
-.325 F .279(E.g. \215oating point)6.779 F 1.094(vs inte)33.336 501 R
1.094(ger re)-.195 F 4.344(gisters. The)-.195 F(re)4.344 E 1.094
(gister allocator can also use li)-.195 F -.195(ve)-.325 G 1.094
(ness, or whether a particular).195 F 1.523(virtual re)33.336 516 R
1.523(gister is a temporary vs a source program name, as hints to)-.195
F -.13(wa)-.325 G 1.522(rds steering the).13 F 1.898(allocation to)
33.336 531 R -.13(wa)-.325 G 1.898(rds a particular group of re).13 F
5.148(gisters. E.g.)-.195 F 1.898(on the X86 architecture, short-)5.148
F(li)33.336 546 Q -.195(ve)-.325 G 4.129(dv).195 G .879
(alues should gra)-4.454 F .879(vitate to)-.26 F -.13(wa)-.325 G .879
(rds the re).13 F .878(gister set \(%eax, %ecx, %edx\) because these)
-.195 F .359(are caller)33.336 561 R(-sa)-.26 E .749 -.195(ve r)-.26 H
-.195(eg).195 G .359(isters and are e).195 F .359
(xpected to be lost across function calls.)-.195 F(Re)6.86 E .36
(gisters in the)-.195 F .957
(\(%ebx, %edi, %esi\) set should be used for longer)33.336 576 R .957
(-term v)-.26 F .957(alues as the)-.325 F 4.207(yd)-.195 G 4.207(on)
-4.207 G .957(ot need to be)-4.207 F(sa)33.336 591 Q -.195(ve)-.26 G
5.781(da).195 G 2.532(nd restored after each function call.)-5.781 F
(Lik)9.032 E -.325(ew)-.13 G 2.532(ise on the SP).325 F 2.532
(ARC architecture we)-1.196 F 5.416
(should use %g1..%g7 for short-term v)33.336 606 R 5.416
(alues, %l0..%l7 for long-term v)-.325 F 5.415(alues, and)-.325 F
(%o0..%o7 for v)33.336 621 Q(alues which are to be used as ar)-.325 E
(guments to a function call.)-.234 E .63(As a further impro)33.336 642 R
-.195(ve)-.195 G .63(ment, the re).195 F .63
(gister allocator can track if a particular ph)-.195 F .63(ysical re)
-.065 F(gister)-.195 E 1.733(is "dirty".)33.336 657 R 1.733(If a v)8.233
F 1.733(alue has been written into that re)-.325 F 1.733
(gister and then the li)-.195 F 2.122 -.195(ve v)-.325 H 1.732
(alue in that)-.13 F(re)33.336 672 Q 1.143
(gister needs to be spilled, a write-back to backing store is needed.)
-.195 F 1.144(But if the v)7.643 F 1.144(alue is)-.325 F .303
(clean, then an identical v)33.336 687 R .303(alue already e)-.325 F
.303(xists in backing store and no write-back is needed.)-.195 F
(The allocator may then prefer to spill clean v)33.336 702 Q(alues o)
-.325 E -.195(ve)-.195 G 3.25(rd).195 G(irty ones.)-3.25 E 2.591(Becaus\
e the local allocator looks only at one basic block, it does not mak)
33.336 723 R 5.841(ee)-.13 G -.325<668c>-5.841 G(cient).325 E .104
(decisions about which re)33.336 738 R .104(gisters to spill.)-.195 F
.104(One possible metric is to look at all of the virtual)6.604 F 0 Cg
EP
%%Page: 12 12
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 138.492(ECE466:Compilers Unit)33.336 60 R
(7/pg 12)2.25 E(\2512012 Jef)142.155 E 2.25(fH)-.225 G(akner)-2.25 E/F1
13/Times-Roman@0 SF(re)33.336 120 Q .254(gisters currently in ph)-.195 F
.254(ysical re)-.065 F .254
(gisters and pick the one whose use as a source operand is)-.195 F
(furthest a)33.336 135 Q -.13(wa)-.195 G 3.25(yi).13 G 3.25(nt)-3.25 G
(he basic block.)-3.25 E .228(Another serious problem of a local alloca\
tor is that it must spill all li)33.336 156 R .617 -.195(ve v)-.325 H
.227(irtual re).195 F .227(gisters at)-.195 F
(the end of the basic block.)33.336 171 Q(Consider:)6.5 E/F2 10
/Courier@0 SF(BB1:)33.336 183 Q 21.6(%VRx= ADD)90.936 195 R(a,b)39.6 E
27.6(BRxx BB3)90.936 207 R(BB2:)33.336 219 Q 21.6(%VRx= ADD)90.936 231 R
(q,r)39.6 E 27.6(BRxx BB3)90.936 243 R(...)90.936 255 Q(...)90.936 267 Q
(BB3:)33.336 279 Q 21.6(%VRz= ADD)90.936 291 R(%VRx,%VRy)39.6 E F1 .469
(The virtual re)33.336 306 R .469(gister %VRx is li)-.195 F .86 -.195
(ve o)-.325 H 3.72(ne).195 G .47
(xit from both BB1 and BB2, because control \215o)-3.915 F(ws)-.325 E
1.759
(from each to BB3 and %VRx is used in BB3 without being rede\214ned.)
33.336 321 R 1.759(Upon entry to)8.259 F .524(BB3, the "scoreboard" is \
blank, and %VRx must be fetched from its backing store into a)33.336 336
R(ph)33.336 351 Q 1.631(ysical re)-.065 F 1.631
(gister before being used.)-.195 F 1.63(Therefore, the updated v)8.131 F
1.63(alue of %VRx must ha)-.325 F -.195(ve)-.26 G(pre)33.336 366 Q .722
(viously been placed in that memory location prior to branching out of \
BB1 and BB2.)-.325 F .883(One might think that this can be a)33.336 381
R -.26(vo)-.26 G .883(ided by simply assigning the same ph).26 F .883
(ysical re)-.065 F(gister)-.195 E .501(to %VRx in both basic blocks, b)
33.336 396 R .501(ut since the local allocator w)-.26 F .502
(orks only on the local basic)-.13 F(block, it does not ha)33.336 411 Q
.39 -.195(ve t)-.26 H(he po).195 E(wer to do this.)-.325 E/F3 13
/Times-Bold@0 SF(Global Allocation)218.397 441 Q F1 1.713
(After performing li)33.336 477 R -.195(ve)-.325 G 1.712
(ness analysis on an entire function, we ha).195 F 2.102 -.195(ve a l)
-.26 H 1.712(ist of li).195 F 2.102 -.195(ve r)-.325 H(anges.).195 E
2.219(DEF: A)33.336 492 R F3(li)5.469 E 2.479 -.13(ve r)-.13 H(ange).13
E F1 2.22(is a contiguous range of quads in one basic block where a gi)
5.469 F -.195(ve)-.325 G(n).195 E 1.183(name/virtual re)33.336 507 R
1.183(gister is li)-.195 F -.195(ve)-.325 G 7.683(.A).195 G(gi)-3.25 E
-.195(ve)-.325 G 4.433(nv).195 G 1.183(irtual re)-4.433 F 1.183
(gister will ha)-.195 F 1.573 -.195(ve o)-.26 H 1.183(ne or more li).195
F 1.573 -.195(ve r)-.325 H(anges.).195 E 2.824(e.g. virtual re)33.336
522 R 2.824(gister %VRa is li)-.195 F 3.215 -.195(ve i)-.325 H 6.075(nb)
.195 G 2.825(asic block 1:operations 1..5.)-6.075 F 2.825(%VRb is li)
9.325 F 3.215 -.195(ve i)-.325 H(n).195 E 8.876(1:4..7,2:3..8,etc. W)
33.336 537 R 8.876(ec)-1.04 G 5.626(an construct a graph \(conceptually)
-8.876 F 8.875(,i)-.845 G 8.875(td)-8.875 G(oesn')-8.875 E 8.875(th)
-.234 G -2.925 -.26(av e)-8.875 H 5.625(to be)9.135 F 2.783
(implemented as a graph\) which represents the interference among li)
33.336 552 R 3.174 -.195(ve r)-.325 H 6.034(anges. Each).195 F .424
(virtual re)33.336 567 R .423(gister is a node, and if there is a \(non\
-directional\) link to another node, it means)-.195 F(that their li)
33.336 582 Q .39 -.195(ve r)-.325 H(anges o).195 E -.195(ve)-.195 G
(rlap at some point.).195 E(Gi)33.336 603 Q -.195(ve)-.325 G 6.536(nt)
.195 G 3.287(his interference graph, global re)-6.536 F 3.287
(gister allocation is the classic map or graph)-.195 F 3.541
(coloring problem.)33.336 618 R 3.541(If there are)10.041 F/F4 13
/Times-Italic@0 SF(n)6.791 E F1(re)6.791 E 3.541(gisters a)-.195 F -.325
(va)-.26 G 3.541(ilable for general use \(as opposed to).325 F 1.027
(specialized re)33.336 633 R 1.027(gisters, or re)-.195 F 1.027
(gisters which are held in reserv)-.195 F 4.277(ef)-.195 G 1.027
(or certain purposes\), then is)-4.277 F .371
(the interference graph colorable with just)33.336 648 R F4(n)3.621 E F1
.37(colors, such that for each node, each adjacent)3.621 F 3.374
(node is a dif)33.336 663 R 3.375(ferent color?)-.325 F 3.375
(If so, then all of the names under consideration can be)9.875 F 1.89
(permanently allocated to those general-purpose re)33.336 678 R 5.139
(gisters. If)-.195 F 1.889(not, there are a v)5.139 F 1.889(ariety of)
-.325 F(algorithms to pick which names go into which re)33.336 693 Q
(gisters.)-.195 E .329(First, we can mak)33.336 714 R 3.579(et)-.13 G
.329(he observ)-3.579 F .329(ation that an)-.325 F 3.579(yn)-.195 G .329
(ode with fe)-3.579 F .33(wer than)-.325 F F4(n)3.58 E F1 .33
(neighbors can al)3.58 F -.13(wa)-.13 G(ys).13 E .246
(be colored, i.e. it can o)33.336 729 R .245(wn a re)-.325 F .245
(gister slot without an)-.195 F 3.495(yp)-.195 G .245
(ossibility of interference.)-3.495 F .245(Then the)6.745 F .576
(remaining, uncolorable nodes need to be prioritized in some manner)
33.336 744 R 7.077(.O)-.715 G .577(ne method might)-7.077 F 0 Cg EP
%%Page: 13 13
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 138.492(ECE466:Compilers Unit)33.336 60 R
(7/pg 13)2.25 E(\2512012 Jef)142.155 E 2.25(fH)-.225 G(akner)-2.25 E/F1
13/Times-Roman@0 SF .072(be to estimate ho)33.336 120 R 3.322(wm)-.325 G
(an)-3.322 E 3.322(yt)-.195 G .072(imes that name might be accessed.)
-3.322 F .072(Another f)6.572 F .072(actor might be the)-.13 F .356
(number of interferences of that node.)33.336 135 R .356
(If the node interferes with man)6.856 F 3.606(yn)-.195 G .357
(odes, it might be)-3.606 F 3.421(ag)33.336 150 S .171
(ood candidate for "spilling" to memory)-3.421 F 3.421(,b)-.845 G .171
(ecause doing so will impro)-3.421 F .561 -.195(ve t)-.195 H .171
(he colorability).195 F(of man)33.336 165 Q 3.25(yo)-.195 G(ther nodes.)
-3.25 E 2.357(This \214rst cut at global allocation al)33.336 186 R -.13
(wa)-.13 G 2.358(ys puts a speci\214c virtual re).13 F 2.358
(gister into a certain)-.195 F(ph)33.336 201 Q .509(ysical re)-.065 F
(gister)-.195 E 7.009(.I)-.715 G 3.759(nam)-7.009 G .509
(ore optimal solution, the virtual re)-3.759 F .509
(gister could reside in dif)-.195 F(ferent)-.325 E(ph)33.336 216 Q 1.773
(ysical re)-.065 F 1.773(gisters at dif)-.195 F 1.773
(ferent places in the code.)-.325 F 3.854 -1.04(To d)8.274 H 5.024(ot)
1.04 G 1.774(his requires a mechanism for)-5.024 F 3.911
(tracking the relationship between de\214nitions and uses.)33.336 231 R
3.91(Such a mechanism will be)10.411 F -.195(ex)33.336 246 S
(plored in the ne).195 E(xt unit.)-.195 E 0 Cg EP
%%Trailer
end
%%EOF
